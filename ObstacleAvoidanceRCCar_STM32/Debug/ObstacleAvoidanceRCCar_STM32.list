
ObstacleAvoidanceRCCar_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061e4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080062f4  080062f4  000162f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063ac  080063ac  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  080063ac  080063ac  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080063ac  080063ac  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063ac  080063ac  000163ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063b0  080063b0  000163b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080063b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000043c  2000006c  08006420  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a8  08006420  000204a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dee3  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023ea  00000000  00000000  0002dfbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d90  00000000  00000000  000303a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a8a  00000000  00000000  00031138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018e2e  00000000  00000000  00031bc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ff9d  00000000  00000000  0004a9f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c6d3  00000000  00000000  0005a98d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000041e0  00000000  00000000  000e7060  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009a  00000000  00000000  000eb240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000006c 	.word	0x2000006c
 800012c:	00000000 	.word	0x00000000
 8000130:	080062dc 	.word	0x080062dc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000070 	.word	0x20000070
 800014c:	080062dc 	.word	0x080062dc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2uiz>:
 80008fc:	004a      	lsls	r2, r1, #1
 80008fe:	d211      	bcs.n	8000924 <__aeabi_d2uiz+0x28>
 8000900:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000904:	d211      	bcs.n	800092a <__aeabi_d2uiz+0x2e>
 8000906:	d50d      	bpl.n	8000924 <__aeabi_d2uiz+0x28>
 8000908:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800090c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000910:	d40e      	bmi.n	8000930 <__aeabi_d2uiz+0x34>
 8000912:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000916:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800091a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800091e:	fa23 f002 	lsr.w	r0, r3, r2
 8000922:	4770      	bx	lr
 8000924:	f04f 0000 	mov.w	r0, #0
 8000928:	4770      	bx	lr
 800092a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800092e:	d102      	bne.n	8000936 <__aeabi_d2uiz+0x3a>
 8000930:	f04f 30ff 	mov.w	r0, #4294967295
 8000934:	4770      	bx	lr
 8000936:	f04f 0000 	mov.w	r0, #0
 800093a:	4770      	bx	lr

0800093c <init_bt>:
// from motor_driver_esp32cam.c
extern uint8_t cur_dir;
extern uint8_t cur_fl;
extern uint8_t cur_slp;

void init_bt(UART_HandleTypeDef *huart) {
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
	m_huart = huart;
 8000944:	4a03      	ldr	r2, [pc, #12]	; (8000954 <init_bt+0x18>)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	6013      	str	r3, [r2, #0]
}
 800094a:	bf00      	nop
 800094c:	370c      	adds	r7, #12
 800094e:	46bd      	mov	sp, r7
 8000950:	bc80      	pop	{r7}
 8000952:	4770      	bx	lr
 8000954:	20000088 	.word	0x20000088

08000958 <send_distance>:

void send_distance(uint8_t L_Dist, uint8_t C_Dist, uint8_t R_Dist) {
 8000958:	b5b0      	push	{r4, r5, r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af04      	add	r7, sp, #16
 800095e:	4603      	mov	r3, r0
 8000960:	71fb      	strb	r3, [r7, #7]
 8000962:	460b      	mov	r3, r1
 8000964:	71bb      	strb	r3, [r7, #6]
 8000966:	4613      	mov	r3, r2
 8000968:	717b      	strb	r3, [r7, #5]
	sprintf((char*) tx_dist,
 800096a:	4b14      	ldr	r3, [pc, #80]	; (80009bc <send_distance+0x64>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	461d      	mov	r5, r3
 8000970:	79f9      	ldrb	r1, [r7, #7]
 8000972:	79bb      	ldrb	r3, [r7, #6]
 8000974:	797a      	ldrb	r2, [r7, #5]
 8000976:	4812      	ldr	r0, [pc, #72]	; (80009c0 <send_distance+0x68>)
 8000978:	7800      	ldrb	r0, [r0, #0]
 800097a:	4604      	mov	r4, r0
 800097c:	4811      	ldr	r0, [pc, #68]	; (80009c4 <send_distance+0x6c>)
 800097e:	7800      	ldrb	r0, [r0, #0]
 8000980:	9003      	str	r0, [sp, #12]
 8000982:	9402      	str	r4, [sp, #8]
 8000984:	9201      	str	r2, [sp, #4]
 8000986:	9300      	str	r3, [sp, #0]
 8000988:	460b      	mov	r3, r1
 800098a:	462a      	mov	r2, r5
 800098c:	490e      	ldr	r1, [pc, #56]	; (80009c8 <send_distance+0x70>)
 800098e:	480f      	ldr	r0, [pc, #60]	; (80009cc <send_distance+0x74>)
 8000990:	f004 fc62 	bl	8005258 <siprintf>
			"DIR : %c\r\nL : %d cm\r\nC : %d cm\r\nR : %d cm\r\nFL : %c\r\nSLP : %c\r\n\r\n",
			cur_dir, L_Dist, C_Dist, R_Dist, cur_fl, cur_slp);
	printf("%s", tx_dist);
 8000994:	490d      	ldr	r1, [pc, #52]	; (80009cc <send_distance+0x74>)
 8000996:	480e      	ldr	r0, [pc, #56]	; (80009d0 <send_distance+0x78>)
 8000998:	f004 fc4c 	bl	8005234 <iprintf>
	HAL_UART_Transmit(m_huart, tx_dist, strlen((char*) tx_dist), 100);
 800099c:	4b0d      	ldr	r3, [pc, #52]	; (80009d4 <send_distance+0x7c>)
 800099e:	681c      	ldr	r4, [r3, #0]
 80009a0:	480a      	ldr	r0, [pc, #40]	; (80009cc <send_distance+0x74>)
 80009a2:	f7ff fbd5 	bl	8000150 <strlen>
 80009a6:	4603      	mov	r3, r0
 80009a8:	b29a      	uxth	r2, r3
 80009aa:	2364      	movs	r3, #100	; 0x64
 80009ac:	4907      	ldr	r1, [pc, #28]	; (80009cc <send_distance+0x74>)
 80009ae:	4620      	mov	r0, r4
 80009b0:	f003 fd56 	bl	8004460 <HAL_UART_Transmit>
}
 80009b4:	bf00      	nop
 80009b6:	3708      	adds	r7, #8
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bdb0      	pop	{r4, r5, r7, pc}
 80009bc:	20000000 	.word	0x20000000
 80009c0:	20000001 	.word	0x20000001
 80009c4:	20000002 	.word	0x20000002
 80009c8:	080062f4 	.word	0x080062f4
 80009cc:	200000b0 	.word	0x200000b0
 80009d0:	08006338 	.word	0x08006338
 80009d4:	20000088 	.word	0x20000088

080009d8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a12      	ldr	r2, [pc, #72]	; (8000a30 <HAL_UART_RxCpltCallback+0x58>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d11e      	bne.n	8000a28 <HAL_UART_RxCpltCallback+0x50>
		drive(rx_c);
 80009ea:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <HAL_UART_RxCpltCallback+0x5c>)
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	4618      	mov	r0, r3
 80009f0:	f000 fba6 	bl	8001140 <drive>
		sprintf((char*) tx_c, "rx_c : %c\r\n", rx_c);
 80009f4:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <HAL_UART_RxCpltCallback+0x5c>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	461a      	mov	r2, r3
 80009fa:	490f      	ldr	r1, [pc, #60]	; (8000a38 <HAL_UART_RxCpltCallback+0x60>)
 80009fc:	480f      	ldr	r0, [pc, #60]	; (8000a3c <HAL_UART_RxCpltCallback+0x64>)
 80009fe:	f004 fc2b 	bl	8005258 <siprintf>
		printf("%s", tx_c);
 8000a02:	490e      	ldr	r1, [pc, #56]	; (8000a3c <HAL_UART_RxCpltCallback+0x64>)
 8000a04:	480e      	ldr	r0, [pc, #56]	; (8000a40 <HAL_UART_RxCpltCallback+0x68>)
 8000a06:	f004 fc15 	bl	8005234 <iprintf>
		HAL_UART_Transmit(huart, tx_c, strlen((char*) tx_c), 10);
 8000a0a:	480c      	ldr	r0, [pc, #48]	; (8000a3c <HAL_UART_RxCpltCallback+0x64>)
 8000a0c:	f7ff fba0 	bl	8000150 <strlen>
 8000a10:	4603      	mov	r3, r0
 8000a12:	b29a      	uxth	r2, r3
 8000a14:	230a      	movs	r3, #10
 8000a16:	4909      	ldr	r1, [pc, #36]	; (8000a3c <HAL_UART_RxCpltCallback+0x64>)
 8000a18:	6878      	ldr	r0, [r7, #4]
 8000a1a:	f003 fd21 	bl	8004460 <HAL_UART_Transmit>
		HAL_UART_Receive_IT(huart, &rx_c, 1);
 8000a1e:	2201      	movs	r2, #1
 8000a20:	4904      	ldr	r1, [pc, #16]	; (8000a34 <HAL_UART_RxCpltCallback+0x5c>)
 8000a22:	6878      	ldr	r0, [r7, #4]
 8000a24:	f003 fd9f 	bl	8004566 <HAL_UART_Receive_IT>
	}
}
 8000a28:	bf00      	nop
 8000a2a:	3708      	adds	r7, #8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	40013800 	.word	0x40013800
 8000a34:	2000008c 	.word	0x2000008c
 8000a38:	0800633c 	.word	0x0800633c
 8000a3c:	20000090 	.word	0x20000090
 8000a40:	08006338 	.word	0x08006338

08000a44 <delay_us>:
static void MX_TIM3_Init(void);
static void MX_TIM4_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

void delay_us(uint16_t time) {  // delay for microseconds
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8000a4e:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <delay_us+0x2c>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	2200      	movs	r2, #0
 8000a54:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim3)) < time)
 8000a56:	bf00      	nop
 8000a58:	4b05      	ldr	r3, [pc, #20]	; (8000a70 <delay_us+0x2c>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a5e:	88fb      	ldrh	r3, [r7, #6]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	d3f9      	bcc.n	8000a58 <delay_us+0x14>
		;
}
 8000a64:	bf00      	nop
 8000a66:	bf00      	nop
 8000a68:	370c      	adds	r7, #12
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bc80      	pop	{r7}
 8000a6e:	4770      	bx	lr
 8000a70:	200001f8 	.word	0x200001f8

08000a74 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { // read & send distance every 100ms
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
	bool L_obstacle = false;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	73fb      	strb	r3, [r7, #15]
	bool R_obstacle = false;
 8000a80:	2300      	movs	r3, #0
 8000a82:	73bb      	strb	r3, [r7, #14]
	bool C_obstacle = false;
 8000a84:	2300      	movs	r3, #0
 8000a86:	737b      	strb	r3, [r7, #13]
	if (htim->Instance == htim4.Instance) {
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	4b2b      	ldr	r3, [pc, #172]	; (8000b3c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	429a      	cmp	r2, r3
 8000a92:	d14f      	bne.n	8000b34 <HAL_TIM_PeriodElapsedCallback+0xc0>
		if (HAL_GPIO_ReadPin(PA11_BT_STATE_GPIO_Port, PA11_BT_STATE_Pin) == 0) // if bluetooth connection is lost
 8000a94:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a98:	4829      	ldr	r0, [pc, #164]	; (8000b40 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000a9a:	f001 fda1 	bl	80025e0 <HAL_GPIO_ReadPin>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d102      	bne.n	8000aaa <HAL_TIM_PeriodElapsedCallback+0x36>
			drive('h');  // stop car
 8000aa4:	2068      	movs	r0, #104	; 0x68
 8000aa6:	f000 fb4b 	bl	8001140 <drive>
		HCSR04_Read();
 8000aaa:	f000 ff4f 	bl	800194c <HCSR04_Read>

		if (cur_dir != 'h') {
 8000aae:	4b25      	ldr	r3, [pc, #148]	; (8000b44 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	2b68      	cmp	r3, #104	; 0x68
 8000ab4:	d035      	beq.n	8000b22 <HAL_TIM_PeriodElapsedCallback+0xae>
			if (L_Dist_arr[0] < 10) {  // Left sensor got obstacle < 10cm
 8000ab6:	4b24      	ldr	r3, [pc, #144]	; (8000b48 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	2b09      	cmp	r3, #9
 8000abc:	d80d      	bhi.n	8000ada <HAL_TIM_PeriodElapsedCallback+0x66>
				if (L_Dist_arr[0] < L_Dist_arr[1]
 8000abe:	4b22      	ldr	r3, [pc, #136]	; (8000b48 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000ac0:	781a      	ldrb	r2, [r3, #0]
 8000ac2:	4b21      	ldr	r3, [pc, #132]	; (8000b48 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000ac4:	785b      	ldrb	r3, [r3, #1]
 8000ac6:	429a      	cmp	r2, r3
 8000ac8:	d207      	bcs.n	8000ada <HAL_TIM_PeriodElapsedCallback+0x66>
						&& L_Dist_arr[1] < L_Dist_arr[2]) {
 8000aca:	4b1f      	ldr	r3, [pc, #124]	; (8000b48 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000acc:	785a      	ldrb	r2, [r3, #1]
 8000ace:	4b1e      	ldr	r3, [pc, #120]	; (8000b48 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000ad0:	789b      	ldrb	r3, [r3, #2]
 8000ad2:	429a      	cmp	r2, r3
 8000ad4:	d201      	bcs.n	8000ada <HAL_TIM_PeriodElapsedCallback+0x66>
					L_obstacle = true;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	73fb      	strb	r3, [r7, #15]
				}
			}
			if (C_Dist_arr[0] < 10) {  // Center sensor got obstacle < 10cm
 8000ada:	4b1c      	ldr	r3, [pc, #112]	; (8000b4c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	2b09      	cmp	r3, #9
 8000ae0:	d80d      	bhi.n	8000afe <HAL_TIM_PeriodElapsedCallback+0x8a>
				if (C_Dist_arr[0] < C_Dist_arr[1]
 8000ae2:	4b1a      	ldr	r3, [pc, #104]	; (8000b4c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000ae4:	781a      	ldrb	r2, [r3, #0]
 8000ae6:	4b19      	ldr	r3, [pc, #100]	; (8000b4c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000ae8:	785b      	ldrb	r3, [r3, #1]
 8000aea:	429a      	cmp	r2, r3
 8000aec:	d207      	bcs.n	8000afe <HAL_TIM_PeriodElapsedCallback+0x8a>
						&& C_Dist_arr[1] < C_Dist_arr[2]) {
 8000aee:	4b17      	ldr	r3, [pc, #92]	; (8000b4c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000af0:	785a      	ldrb	r2, [r3, #1]
 8000af2:	4b16      	ldr	r3, [pc, #88]	; (8000b4c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000af4:	789b      	ldrb	r3, [r3, #2]
 8000af6:	429a      	cmp	r2, r3
 8000af8:	d201      	bcs.n	8000afe <HAL_TIM_PeriodElapsedCallback+0x8a>
					C_obstacle = true;
 8000afa:	2301      	movs	r3, #1
 8000afc:	737b      	strb	r3, [r7, #13]
				}
			}
			if (R_Dist_arr[0] < 10) {  // Right sensor got obstacle < 10cm
 8000afe:	4b14      	ldr	r3, [pc, #80]	; (8000b50 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	2b09      	cmp	r3, #9
 8000b04:	d80d      	bhi.n	8000b22 <HAL_TIM_PeriodElapsedCallback+0xae>
				if (R_Dist_arr[0] < R_Dist_arr[1]
 8000b06:	4b12      	ldr	r3, [pc, #72]	; (8000b50 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000b08:	781a      	ldrb	r2, [r3, #0]
 8000b0a:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000b0c:	785b      	ldrb	r3, [r3, #1]
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	d207      	bcs.n	8000b22 <HAL_TIM_PeriodElapsedCallback+0xae>
						&& R_Dist_arr[1] < R_Dist_arr[2]) {
 8000b12:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000b14:	785a      	ldrb	r2, [r3, #1]
 8000b16:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000b18:	789b      	ldrb	r3, [r3, #2]
 8000b1a:	429a      	cmp	r2, r3
 8000b1c:	d201      	bcs.n	8000b22 <HAL_TIM_PeriodElapsedCallback+0xae>
					R_obstacle = true;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	73bb      	strb	r3, [r7, #14]
		}

		if (L_obstacle)
			;

		send_distance(L_Dist_arr[0], C_Dist_arr[0], R_Dist_arr[0]);
 8000b22:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	4a09      	ldr	r2, [pc, #36]	; (8000b4c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000b28:	7811      	ldrb	r1, [r2, #0]
 8000b2a:	4a09      	ldr	r2, [pc, #36]	; (8000b50 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000b2c:	7812      	ldrb	r2, [r2, #0]
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f7ff ff12 	bl	8000958 <send_distance>
	}
}
 8000b34:	bf00      	nop
 8000b36:	3710      	adds	r7, #16
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000240 	.word	0x20000240
 8000b40:	40010800 	.word	0x40010800
 8000b44:	20000000 	.word	0x20000000
 8000b48:	2000034c 	.word	0x2000034c
 8000b4c:	20000350 	.word	0x20000350
 8000b50:	20000354 	.word	0x20000354

08000b54 <__io_putchar>:
/**
 * @brief Retargets the C library printf function to the USART
 * @param None
 * @retval None
 */
PUTCHAR_PROTOTYPE {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
	if (ch == '\n')
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2b0a      	cmp	r3, #10
 8000b60:	d106      	bne.n	8000b70 <__io_putchar+0x1c>
		HAL_UART_Transmit(&huart2, (uint8_t*) "\r", 1, 0xFFFF);
 8000b62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b66:	2201      	movs	r2, #1
 8000b68:	4907      	ldr	r1, [pc, #28]	; (8000b88 <__io_putchar+0x34>)
 8000b6a:	4808      	ldr	r0, [pc, #32]	; (8000b8c <__io_putchar+0x38>)
 8000b6c:	f003 fc78 	bl	8004460 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 8000b70:	1d39      	adds	r1, r7, #4
 8000b72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b76:	2201      	movs	r2, #1
 8000b78:	4804      	ldr	r0, [pc, #16]	; (8000b8c <__io_putchar+0x38>)
 8000b7a:	f003 fc71 	bl	8004460 <HAL_UART_Transmit>
	return ch;
 8000b7e:	687b      	ldr	r3, [r7, #4]
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	08006348 	.word	0x08006348
 8000b8c:	200002d0 	.word	0x200002d0

08000b90 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000b94:	f001 f95a 	bl	8001e4c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000b98:	f000 f83c 	bl	8000c14 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000b9c:	f000 fa24 	bl	8000fe8 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000ba0:	f000 f9f8 	bl	8000f94 <MX_USART2_UART_Init>
	MX_TIM2_Init();
 8000ba4:	f000 f878 	bl	8000c98 <MX_TIM2_Init>
	MX_TIM3_Init();
 8000ba8:	f000 f8f6 	bl	8000d98 <MX_TIM3_Init>
	MX_TIM4_Init();
 8000bac:	f000 f97a 	bl	8000ea4 <MX_TIM4_Init>
	MX_USART1_UART_Init();
 8000bb0:	f000 f9c6 	bl	8000f40 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */

	// ultrasonic_sensor
	ultrasonic_init(&htim3);
 8000bb4:	4812      	ldr	r0, [pc, #72]	; (8000c00 <main+0x70>)
 8000bb6:	f000 febb 	bl	8001930 <ultrasonic_init>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000bba:	2100      	movs	r1, #0
 8000bbc:	4810      	ldr	r0, [pc, #64]	; (8000c00 <main+0x70>)
 8000bbe:	f002 fb43 	bl	8003248 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8000bc2:	2104      	movs	r1, #4
 8000bc4:	480e      	ldr	r0, [pc, #56]	; (8000c00 <main+0x70>)
 8000bc6:	f002 fb3f 	bl	8003248 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 8000bca:	2108      	movs	r1, #8
 8000bcc:	480c      	ldr	r0, [pc, #48]	; (8000c00 <main+0x70>)
 8000bce:	f002 fb3b 	bl	8003248 <HAL_TIM_IC_Start_IT>

	// motor_driver_esp32cam
	motor_init(&htim2);
 8000bd2:	480c      	ldr	r0, [pc, #48]	; (8000c04 <main+0x74>)
 8000bd4:	f000 faa0 	bl	8001118 <motor_init>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000bd8:	2100      	movs	r1, #0
 8000bda:	480a      	ldr	r0, [pc, #40]	; (8000c04 <main+0x74>)
 8000bdc:	f002 fa3a 	bl	8003054 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000be0:	2104      	movs	r1, #4
 8000be2:	4808      	ldr	r0, [pc, #32]	; (8000c04 <main+0x74>)
 8000be4:	f002 fa36 	bl	8003054 <HAL_TIM_PWM_Start>

	// bluetooth_module
	init_bt(&huart1);
 8000be8:	4807      	ldr	r0, [pc, #28]	; (8000c08 <main+0x78>)
 8000bea:	f7ff fea7 	bl	800093c <init_bt>
	HAL_UART_Receive_IT(&huart1, &rx_c, 1);
 8000bee:	2201      	movs	r2, #1
 8000bf0:	4906      	ldr	r1, [pc, #24]	; (8000c0c <main+0x7c>)
 8000bf2:	4805      	ldr	r0, [pc, #20]	; (8000c08 <main+0x78>)
 8000bf4:	f003 fcb7 	bl	8004566 <HAL_UART_Receive_IT>
	HAL_TIM_Base_Start_IT(&htim4);
 8000bf8:	4805      	ldr	r0, [pc, #20]	; (8000c10 <main+0x80>)
 8000bfa:	f002 f981 	bl	8002f00 <HAL_TIM_Base_Start_IT>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000bfe:	e7fe      	b.n	8000bfe <main+0x6e>
 8000c00:	200001f8 	.word	0x200001f8
 8000c04:	200001b0 	.word	0x200001b0
 8000c08:	20000288 	.word	0x20000288
 8000c0c:	2000008c 	.word	0x2000008c
 8000c10:	20000240 	.word	0x20000240

08000c14 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b090      	sub	sp, #64	; 0x40
 8000c18:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000c1a:	f107 0318 	add.w	r3, r7, #24
 8000c1e:	2228      	movs	r2, #40	; 0x28
 8000c20:	2100      	movs	r1, #0
 8000c22:	4618      	mov	r0, r3
 8000c24:	f004 fb7b 	bl	800531e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000c28:	1d3b      	adds	r3, r7, #4
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	605a      	str	r2, [r3, #4]
 8000c30:	609a      	str	r2, [r3, #8]
 8000c32:	60da      	str	r2, [r3, #12]
 8000c34:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c36:	2302      	movs	r3, #2
 8000c38:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c3e:	2310      	movs	r3, #16
 8000c40:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c42:	2302      	movs	r3, #2
 8000c44:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000c46:	2300      	movs	r3, #0
 8000c48:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000c4a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000c50:	f107 0318 	add.w	r3, r7, #24
 8000c54:	4618      	mov	r0, r3
 8000c56:	f001 fcf3 	bl	8002640 <HAL_RCC_OscConfig>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <SystemClock_Config+0x50>
		Error_Handler();
 8000c60:	f000 fa54 	bl	800110c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000c64:	230f      	movs	r3, #15
 8000c66:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c74:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c76:	2300      	movs	r3, #0
 8000c78:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000c7a:	1d3b      	adds	r3, r7, #4
 8000c7c:	2102      	movs	r1, #2
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f001 ff60 	bl	8002b44 <HAL_RCC_ClockConfig>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <SystemClock_Config+0x7a>
		Error_Handler();
 8000c8a:	f000 fa3f 	bl	800110c <Error_Handler>
	}
}
 8000c8e:	bf00      	nop
 8000c90:	3740      	adds	r7, #64	; 0x40
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
	...

08000c98 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08e      	sub	sp, #56	; 0x38
 8000c9c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000c9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	605a      	str	r2, [r3, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
 8000caa:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000cac:	f107 0320 	add.w	r3, r7, #32
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000cb6:	1d3b      	adds	r3, r7, #4
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
 8000cc4:	615a      	str	r2, [r3, #20]
 8000cc6:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000cc8:	4b32      	ldr	r3, [pc, #200]	; (8000d94 <MX_TIM2_Init+0xfc>)
 8000cca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cce:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 72 - 1;
 8000cd0:	4b30      	ldr	r3, [pc, #192]	; (8000d94 <MX_TIM2_Init+0xfc>)
 8000cd2:	2247      	movs	r2, #71	; 0x47
 8000cd4:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd6:	4b2f      	ldr	r3, [pc, #188]	; (8000d94 <MX_TIM2_Init+0xfc>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000 - 1;
 8000cdc:	4b2d      	ldr	r3, [pc, #180]	; (8000d94 <MX_TIM2_Init+0xfc>)
 8000cde:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ce2:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ce4:	4b2b      	ldr	r3, [pc, #172]	; (8000d94 <MX_TIM2_Init+0xfc>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000cea:	4b2a      	ldr	r3, [pc, #168]	; (8000d94 <MX_TIM2_Init+0xfc>)
 8000cec:	2280      	movs	r2, #128	; 0x80
 8000cee:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000cf0:	4828      	ldr	r0, [pc, #160]	; (8000d94 <MX_TIM2_Init+0xfc>)
 8000cf2:	f002 f8b5 	bl	8002e60 <HAL_TIM_Base_Init>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_TIM2_Init+0x68>
		Error_Handler();
 8000cfc:	f000 fa06 	bl	800110c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d04:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000d06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4821      	ldr	r0, [pc, #132]	; (8000d94 <MX_TIM2_Init+0xfc>)
 8000d0e:	f002 fe0d 	bl	800392c <HAL_TIM_ConfigClockSource>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_TIM2_Init+0x84>
		Error_Handler();
 8000d18:	f000 f9f8 	bl	800110c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8000d1c:	481d      	ldr	r0, [pc, #116]	; (8000d94 <MX_TIM2_Init+0xfc>)
 8000d1e:	f002 f941 	bl	8002fa4 <HAL_TIM_PWM_Init>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_TIM2_Init+0x94>
		Error_Handler();
 8000d28:	f000 f9f0 	bl	800110c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d30:	2300      	movs	r3, #0
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000d34:	f107 0320 	add.w	r3, r7, #32
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4816      	ldr	r0, [pc, #88]	; (8000d94 <MX_TIM2_Init+0xfc>)
 8000d3c:	f003 fad0 	bl	80042e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_TIM2_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 8000d46:	f000 f9e1 	bl	800110c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d4a:	2360      	movs	r3, #96	; 0x60
 8000d4c:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d52:	2300      	movs	r3, #0
 8000d54:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d56:	2300      	movs	r3, #0
 8000d58:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 8000d5a:	1d3b      	adds	r3, r7, #4
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	4619      	mov	r1, r3
 8000d60:	480c      	ldr	r0, [pc, #48]	; (8000d94 <MX_TIM2_Init+0xfc>)
 8000d62:	f002 fd21 	bl	80037a8 <HAL_TIM_PWM_ConfigChannel>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_TIM2_Init+0xd8>
			!= HAL_OK) {
		Error_Handler();
 8000d6c:	f000 f9ce 	bl	800110c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2)
 8000d70:	1d3b      	adds	r3, r7, #4
 8000d72:	2204      	movs	r2, #4
 8000d74:	4619      	mov	r1, r3
 8000d76:	4807      	ldr	r0, [pc, #28]	; (8000d94 <MX_TIM2_Init+0xfc>)
 8000d78:	f002 fd16 	bl	80037a8 <HAL_TIM_PWM_ConfigChannel>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_TIM2_Init+0xee>
			!= HAL_OK) {
		Error_Handler();
 8000d82:	f000 f9c3 	bl	800110c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8000d86:	4803      	ldr	r0, [pc, #12]	; (8000d94 <MX_TIM2_Init+0xfc>)
 8000d88:	f000 fc20 	bl	80015cc <HAL_TIM_MspPostInit>

}
 8000d8c:	bf00      	nop
 8000d8e:	3738      	adds	r7, #56	; 0x38
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	200001b0 	.word	0x200001b0

08000d98 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b08a      	sub	sp, #40	; 0x28
 8000d9c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000d9e:	f107 0318 	add.w	r3, r7, #24
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
 8000da8:	609a      	str	r2, [r3, #8]
 8000daa:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000dac:	f107 0310 	add.w	r3, r7, #16
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8000db6:	463b      	mov	r3, r7
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000dc2:	4b36      	ldr	r3, [pc, #216]	; (8000e9c <MX_TIM3_Init+0x104>)
 8000dc4:	4a36      	ldr	r2, [pc, #216]	; (8000ea0 <MX_TIM3_Init+0x108>)
 8000dc6:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 72 - 1;
 8000dc8:	4b34      	ldr	r3, [pc, #208]	; (8000e9c <MX_TIM3_Init+0x104>)
 8000dca:	2247      	movs	r2, #71	; 0x47
 8000dcc:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dce:	4b33      	ldr	r3, [pc, #204]	; (8000e9c <MX_TIM3_Init+0x104>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 0xFFFF - 1;
 8000dd4:	4b31      	ldr	r3, [pc, #196]	; (8000e9c <MX_TIM3_Init+0x104>)
 8000dd6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000dda:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ddc:	4b2f      	ldr	r3, [pc, #188]	; (8000e9c <MX_TIM3_Init+0x104>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000de2:	4b2e      	ldr	r3, [pc, #184]	; (8000e9c <MX_TIM3_Init+0x104>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8000de8:	482c      	ldr	r0, [pc, #176]	; (8000e9c <MX_TIM3_Init+0x104>)
 8000dea:	f002 f839 	bl	8002e60 <HAL_TIM_Base_Init>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_TIM3_Init+0x60>
		Error_Handler();
 8000df4:	f000 f98a 	bl	800110c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000df8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dfc:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8000dfe:	f107 0318 	add.w	r3, r7, #24
 8000e02:	4619      	mov	r1, r3
 8000e04:	4825      	ldr	r0, [pc, #148]	; (8000e9c <MX_TIM3_Init+0x104>)
 8000e06:	f002 fd91 	bl	800392c <HAL_TIM_ConfigClockSource>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_TIM3_Init+0x7c>
		Error_Handler();
 8000e10:	f000 f97c 	bl	800110c <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim3) != HAL_OK) {
 8000e14:	4821      	ldr	r0, [pc, #132]	; (8000e9c <MX_TIM3_Init+0x104>)
 8000e16:	f002 f9bf 	bl	8003198 <HAL_TIM_IC_Init>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_TIM3_Init+0x8c>
		Error_Handler();
 8000e20:	f000 f974 	bl	800110c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e24:	2300      	movs	r3, #0
 8000e26:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8000e2c:	f107 0310 	add.w	r3, r7, #16
 8000e30:	4619      	mov	r1, r3
 8000e32:	481a      	ldr	r0, [pc, #104]	; (8000e9c <MX_TIM3_Init+0x104>)
 8000e34:	f003 fa54 	bl	80042e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_TIM3_Init+0xaa>
			!= HAL_OK) {
		Error_Handler();
 8000e3e:	f000 f965 	bl	800110c <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000e42:	2300      	movs	r3, #0
 8000e44:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000e46:	2301      	movs	r3, #1
 8000e48:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 15;
 8000e4e:	230f      	movs	r3, #15
 8000e50:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8000e52:	463b      	mov	r3, r7
 8000e54:	2200      	movs	r2, #0
 8000e56:	4619      	mov	r1, r3
 8000e58:	4810      	ldr	r0, [pc, #64]	; (8000e9c <MX_TIM3_Init+0x104>)
 8000e5a:	f002 fc09 	bl	8003670 <HAL_TIM_IC_ConfigChannel>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_TIM3_Init+0xd0>
		Error_Handler();
 8000e64:	f000 f952 	bl	800110c <Error_Handler>
	}
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 8000e68:	463b      	mov	r3, r7
 8000e6a:	2204      	movs	r2, #4
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	480b      	ldr	r0, [pc, #44]	; (8000e9c <MX_TIM3_Init+0x104>)
 8000e70:	f002 fbfe 	bl	8003670 <HAL_TIM_IC_ConfigChannel>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_TIM3_Init+0xe6>
		Error_Handler();
 8000e7a:	f000 f947 	bl	800110c <Error_Handler>
	}
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK) {
 8000e7e:	463b      	mov	r3, r7
 8000e80:	2208      	movs	r2, #8
 8000e82:	4619      	mov	r1, r3
 8000e84:	4805      	ldr	r0, [pc, #20]	; (8000e9c <MX_TIM3_Init+0x104>)
 8000e86:	f002 fbf3 	bl	8003670 <HAL_TIM_IC_ConfigChannel>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_TIM3_Init+0xfc>
		Error_Handler();
 8000e90:	f000 f93c 	bl	800110c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8000e94:	bf00      	nop
 8000e96:	3728      	adds	r7, #40	; 0x28
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	200001f8 	.word	0x200001f8
 8000ea0:	40000400 	.word	0x40000400

08000ea4 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b086      	sub	sp, #24
 8000ea8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000eaa:	f107 0308 	add.w	r3, r7, #8
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	605a      	str	r2, [r3, #4]
 8000eb4:	609a      	str	r2, [r3, #8]
 8000eb6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000eb8:	463b      	mov	r3, r7
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8000ec0:	4b1d      	ldr	r3, [pc, #116]	; (8000f38 <MX_TIM4_Init+0x94>)
 8000ec2:	4a1e      	ldr	r2, [pc, #120]	; (8000f3c <MX_TIM4_Init+0x98>)
 8000ec4:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 720 - 1;
 8000ec6:	4b1c      	ldr	r3, [pc, #112]	; (8000f38 <MX_TIM4_Init+0x94>)
 8000ec8:	f240 22cf 	movw	r2, #719	; 0x2cf
 8000ecc:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ece:	4b1a      	ldr	r3, [pc, #104]	; (8000f38 <MX_TIM4_Init+0x94>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 10000 - 1;
 8000ed4:	4b18      	ldr	r3, [pc, #96]	; (8000f38 <MX_TIM4_Init+0x94>)
 8000ed6:	f242 720f 	movw	r2, #9999	; 0x270f
 8000eda:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000edc:	4b16      	ldr	r3, [pc, #88]	; (8000f38 <MX_TIM4_Init+0x94>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ee2:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <MX_TIM4_Init+0x94>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8000ee8:	4813      	ldr	r0, [pc, #76]	; (8000f38 <MX_TIM4_Init+0x94>)
 8000eea:	f001 ffb9 	bl	8002e60 <HAL_TIM_Base_Init>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_TIM4_Init+0x54>
		Error_Handler();
 8000ef4:	f000 f90a 	bl	800110c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ef8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000efc:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8000efe:	f107 0308 	add.w	r3, r7, #8
 8000f02:	4619      	mov	r1, r3
 8000f04:	480c      	ldr	r0, [pc, #48]	; (8000f38 <MX_TIM4_Init+0x94>)
 8000f06:	f002 fd11 	bl	800392c <HAL_TIM_ConfigClockSource>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_TIM4_Init+0x70>
		Error_Handler();
 8000f10:	f000 f8fc 	bl	800110c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f14:	2300      	movs	r3, #0
 8000f16:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8000f1c:	463b      	mov	r3, r7
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4805      	ldr	r0, [pc, #20]	; (8000f38 <MX_TIM4_Init+0x94>)
 8000f22:	f003 f9dd 	bl	80042e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_TIM4_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8000f2c:	f000 f8ee 	bl	800110c <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8000f30:	bf00      	nop
 8000f32:	3718      	adds	r7, #24
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000240 	.word	0x20000240
 8000f3c:	40000800 	.word	0x40000800

08000f40 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000f44:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <MX_USART1_UART_Init+0x4c>)
 8000f46:	4a12      	ldr	r2, [pc, #72]	; (8000f90 <MX_USART1_UART_Init+0x50>)
 8000f48:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8000f4a:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <MX_USART1_UART_Init+0x4c>)
 8000f4c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f50:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f52:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <MX_USART1_UART_Init+0x4c>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000f58:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <MX_USART1_UART_Init+0x4c>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <MX_USART1_UART_Init+0x4c>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000f64:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <MX_USART1_UART_Init+0x4c>)
 8000f66:	220c      	movs	r2, #12
 8000f68:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f6a:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <MX_USART1_UART_Init+0x4c>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <MX_USART1_UART_Init+0x4c>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000f76:	4805      	ldr	r0, [pc, #20]	; (8000f8c <MX_USART1_UART_Init+0x4c>)
 8000f78:	f003 fa22 	bl	80043c0 <HAL_UART_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8000f82:	f000 f8c3 	bl	800110c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000288 	.word	0x20000288
 8000f90:	40013800 	.word	0x40013800

08000f94 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000f98:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <MX_USART2_UART_Init+0x4c>)
 8000f9a:	4a12      	ldr	r2, [pc, #72]	; (8000fe4 <MX_USART2_UART_Init+0x50>)
 8000f9c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000f9e:	4b10      	ldr	r3, [pc, #64]	; (8000fe0 <MX_USART2_UART_Init+0x4c>)
 8000fa0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fa4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <MX_USART2_UART_Init+0x4c>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000fac:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <MX_USART2_UART_Init+0x4c>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000fb2:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <MX_USART2_UART_Init+0x4c>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000fb8:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <MX_USART2_UART_Init+0x4c>)
 8000fba:	220c      	movs	r2, #12
 8000fbc:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fbe:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <MX_USART2_UART_Init+0x4c>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fc4:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <MX_USART2_UART_Init+0x4c>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000fca:	4805      	ldr	r0, [pc, #20]	; (8000fe0 <MX_USART2_UART_Init+0x4c>)
 8000fcc:	f003 f9f8 	bl	80043c0 <HAL_UART_Init>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8000fd6:	f000 f899 	bl	800110c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	200002d0 	.word	0x200002d0
 8000fe4:	40004400 	.word	0x40004400

08000fe8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b088      	sub	sp, #32
 8000fec:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000fee:	f107 0310 	add.w	r3, r7, #16
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]
 8000ffa:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000ffc:	4b3f      	ldr	r3, [pc, #252]	; (80010fc <MX_GPIO_Init+0x114>)
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	4a3e      	ldr	r2, [pc, #248]	; (80010fc <MX_GPIO_Init+0x114>)
 8001002:	f043 0320 	orr.w	r3, r3, #32
 8001006:	6193      	str	r3, [r2, #24]
 8001008:	4b3c      	ldr	r3, [pc, #240]	; (80010fc <MX_GPIO_Init+0x114>)
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	f003 0320 	and.w	r3, r3, #32
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001014:	4b39      	ldr	r3, [pc, #228]	; (80010fc <MX_GPIO_Init+0x114>)
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	4a38      	ldr	r2, [pc, #224]	; (80010fc <MX_GPIO_Init+0x114>)
 800101a:	f043 0310 	orr.w	r3, r3, #16
 800101e:	6193      	str	r3, [r2, #24]
 8001020:	4b36      	ldr	r3, [pc, #216]	; (80010fc <MX_GPIO_Init+0x114>)
 8001022:	699b      	ldr	r3, [r3, #24]
 8001024:	f003 0310 	and.w	r3, r3, #16
 8001028:	60bb      	str	r3, [r7, #8]
 800102a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800102c:	4b33      	ldr	r3, [pc, #204]	; (80010fc <MX_GPIO_Init+0x114>)
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	4a32      	ldr	r2, [pc, #200]	; (80010fc <MX_GPIO_Init+0x114>)
 8001032:	f043 0304 	orr.w	r3, r3, #4
 8001036:	6193      	str	r3, [r2, #24]
 8001038:	4b30      	ldr	r3, [pc, #192]	; (80010fc <MX_GPIO_Init+0x114>)
 800103a:	699b      	ldr	r3, [r3, #24]
 800103c:	f003 0304 	and.w	r3, r3, #4
 8001040:	607b      	str	r3, [r7, #4]
 8001042:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001044:	4b2d      	ldr	r3, [pc, #180]	; (80010fc <MX_GPIO_Init+0x114>)
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	4a2c      	ldr	r2, [pc, #176]	; (80010fc <MX_GPIO_Init+0x114>)
 800104a:	f043 0308 	orr.w	r3, r3, #8
 800104e:	6193      	str	r3, [r2, #24]
 8001050:	4b2a      	ldr	r3, [pc, #168]	; (80010fc <MX_GPIO_Init+0x114>)
 8001052:	699b      	ldr	r3, [r3, #24]
 8001054:	f003 0308 	and.w	r3, r3, #8
 8001058:	603b      	str	r3, [r7, #0]
 800105a:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC,
 800105c:	2200      	movs	r2, #0
 800105e:	f240 2107 	movw	r1, #519	; 0x207
 8001062:	4827      	ldr	r0, [pc, #156]	; (8001100 <MX_GPIO_Init+0x118>)
 8001064:	f001 fad3 	bl	800260e <HAL_GPIO_WritePin>
	PC0_ESP32_FL_Pin | PC1_ESP32_SLP_Pin | PC2_ESP32_INT_Pin | PC9_TRIG_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8001068:	2201      	movs	r2, #1
 800106a:	f44f 6186 	mov.w	r1, #1072	; 0x430
 800106e:	4825      	ldr	r0, [pc, #148]	; (8001104 <MX_GPIO_Init+0x11c>)
 8001070:	f001 facd 	bl	800260e <HAL_GPIO_WritePin>
	PB10_MTR_INB_Pin | PB4_MTR_INC_Pin | PB5_MTR_IND_Pin, GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(PA8_MTR_INA_GPIO_Port, PA8_MTR_INA_Pin, GPIO_PIN_SET);
 8001074:	2201      	movs	r2, #1
 8001076:	f44f 7180 	mov.w	r1, #256	; 0x100
 800107a:	4823      	ldr	r0, [pc, #140]	; (8001108 <MX_GPIO_Init+0x120>)
 800107c:	f001 fac7 	bl	800260e <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PC0_ESP32_FL_Pin PC1_ESP32_SLP_Pin PC2_ESP32_INT_Pin PC9_TRIG_Pin */
	GPIO_InitStruct.Pin = PC0_ESP32_FL_Pin | PC1_ESP32_SLP_Pin
 8001080:	f240 2307 	movw	r3, #519	; 0x207
 8001084:	613b      	str	r3, [r7, #16]
			| PC2_ESP32_INT_Pin | PC9_TRIG_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001086:	2301      	movs	r3, #1
 8001088:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800108a:	2302      	movs	r3, #2
 800108c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800108e:	2303      	movs	r3, #3
 8001090:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001092:	f107 0310 	add.w	r3, r7, #16
 8001096:	4619      	mov	r1, r3
 8001098:	4819      	ldr	r0, [pc, #100]	; (8001100 <MX_GPIO_Init+0x118>)
 800109a:	f001 f91d 	bl	80022d8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB10_MTR_INB_Pin PB4_MTR_INC_Pin PB5_MTR_IND_Pin */
	GPIO_InitStruct.Pin = PB10_MTR_INB_Pin | PB4_MTR_INC_Pin | PB5_MTR_IND_Pin;
 800109e:	f44f 6386 	mov.w	r3, #1072	; 0x430
 80010a2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a4:	2301      	movs	r3, #1
 80010a6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010a8:	2301      	movs	r3, #1
 80010aa:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010ac:	2303      	movs	r3, #3
 80010ae:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b0:	f107 0310 	add.w	r3, r7, #16
 80010b4:	4619      	mov	r1, r3
 80010b6:	4813      	ldr	r0, [pc, #76]	; (8001104 <MX_GPIO_Init+0x11c>)
 80010b8:	f001 f90e 	bl	80022d8 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA8_MTR_INA_Pin */
	GPIO_InitStruct.Pin = PA8_MTR_INA_Pin;
 80010bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010c0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c2:	2301      	movs	r3, #1
 80010c4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010c6:	2301      	movs	r3, #1
 80010c8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010ca:	2303      	movs	r3, #3
 80010cc:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(PA8_MTR_INA_GPIO_Port, &GPIO_InitStruct);
 80010ce:	f107 0310 	add.w	r3, r7, #16
 80010d2:	4619      	mov	r1, r3
 80010d4:	480c      	ldr	r0, [pc, #48]	; (8001108 <MX_GPIO_Init+0x120>)
 80010d6:	f001 f8ff 	bl	80022d8 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA11_BT_STATE_Pin */
	GPIO_InitStruct.Pin = PA11_BT_STATE_Pin;
 80010da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010de:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(PA11_BT_STATE_GPIO_Port, &GPIO_InitStruct);
 80010e8:	f107 0310 	add.w	r3, r7, #16
 80010ec:	4619      	mov	r1, r3
 80010ee:	4806      	ldr	r0, [pc, #24]	; (8001108 <MX_GPIO_Init+0x120>)
 80010f0:	f001 f8f2 	bl	80022d8 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80010f4:	bf00      	nop
 80010f6:	3720      	adds	r7, #32
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40021000 	.word	0x40021000
 8001100:	40011000 	.word	0x40011000
 8001104:	40010c00 	.word	0x40010c00
 8001108:	40010800 	.word	0x40010800

0800110c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001110:	b672      	cpsid	i
}
 8001112:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001114:	e7fe      	b.n	8001114 <Error_Handler+0x8>
	...

08001118 <motor_init>:

uint8_t cur_dir = 'h'; // w = forward, s = back, a = turn_left, d = turn_right, h = halt
uint8_t cur_fl = 'F';  // ESP32-CAM FlashLight status
uint8_t cur_slp = 'F';  // ESP32-CAM Deep Sleep status

void motor_init(TIM_HandleTypeDef *htim) {
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
	m_htim = htim;
 8001120:	4a05      	ldr	r2, [pc, #20]	; (8001138 <motor_init+0x20>)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6013      	str	r3, [r2, #0]
	drive(cur_dir);
 8001126:	4b05      	ldr	r3, [pc, #20]	; (800113c <motor_init+0x24>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	4618      	mov	r0, r3
 800112c:	f000 f808 	bl	8001140 <drive>
}
 8001130:	bf00      	nop
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20000318 	.word	0x20000318
 800113c:	20000000 	.word	0x20000000

08001140 <drive>:

void drive(uint8_t dir) {
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	71fb      	strb	r3, [r7, #7]
	m_htim->Instance->CCR1 = DUTY(50); // left motor duty = 50%
 800114a:	4b66      	ldr	r3, [pc, #408]	; (80012e4 <drive+0x1a4>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001154:	635a      	str	r2, [r3, #52]	; 0x34
	m_htim->Instance->CCR2 = DUTY(50); // right motor duty = 50%
 8001156:	4b63      	ldr	r3, [pc, #396]	; (80012e4 <drive+0x1a4>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001160:	639a      	str	r2, [r3, #56]	; 0x38
	switch (dir) {
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	3b61      	subs	r3, #97	; 0x61
 8001166:	2b16      	cmp	r3, #22
 8001168:	f200 80b1 	bhi.w	80012ce <drive+0x18e>
 800116c:	a201      	add	r2, pc, #4	; (adr r2, 8001174 <drive+0x34>)
 800116e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001172:	bf00      	nop
 8001174:	08001211 	.word	0x08001211
 8001178:	080012cf 	.word	0x080012cf
 800117c:	080012cf 	.word	0x080012cf
 8001180:	08001231 	.word	0x08001231
 8001184:	080012cf 	.word	0x080012cf
 8001188:	08001251 	.word	0x08001251
 800118c:	080012cf 	.word	0x080012cf
 8001190:	080012cf 	.word	0x080012cf
 8001194:	080012cf 	.word	0x080012cf
 8001198:	080012cf 	.word	0x080012cf
 800119c:	080012cf 	.word	0x080012cf
 80011a0:	080012cf 	.word	0x080012cf
 80011a4:	080012cf 	.word	0x080012cf
 80011a8:	080012cf 	.word	0x080012cf
 80011ac:	080012cf 	.word	0x080012cf
 80011b0:	08001283 	.word	0x08001283
 80011b4:	080012cf 	.word	0x080012cf
 80011b8:	080012cf 	.word	0x080012cf
 80011bc:	080011f1 	.word	0x080011f1
 80011c0:	080012cf 	.word	0x080012cf
 80011c4:	080012cf 	.word	0x080012cf
 80011c8:	080012cf 	.word	0x080012cf
 80011cc:	080011d1 	.word	0x080011d1
	case 'w':
		if (cur_dir == 's') {
 80011d0:	4b45      	ldr	r3, [pc, #276]	; (80012e8 <drive+0x1a8>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	2b73      	cmp	r3, #115	; 0x73
 80011d6:	d105      	bne.n	80011e4 <drive+0xa4>
			cur_dir = 'h';
 80011d8:	4b43      	ldr	r3, [pc, #268]	; (80012e8 <drive+0x1a8>)
 80011da:	2268      	movs	r2, #104	; 0x68
 80011dc:	701a      	strb	r2, [r3, #0]
			stop();
 80011de:	f000 f903 	bl	80013e8 <stop>
		} else {
			cur_dir = 'w';
			forward();
		}
		break;
 80011e2:	e07a      	b.n	80012da <drive+0x19a>
			cur_dir = 'w';
 80011e4:	4b40      	ldr	r3, [pc, #256]	; (80012e8 <drive+0x1a8>)
 80011e6:	2277      	movs	r2, #119	; 0x77
 80011e8:	701a      	strb	r2, [r3, #0]
			forward();
 80011ea:	f000 f885 	bl	80012f8 <forward>
		break;
 80011ee:	e074      	b.n	80012da <drive+0x19a>

	case 's':
		if (cur_dir == 'w') {
 80011f0:	4b3d      	ldr	r3, [pc, #244]	; (80012e8 <drive+0x1a8>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2b77      	cmp	r3, #119	; 0x77
 80011f6:	d105      	bne.n	8001204 <drive+0xc4>
			cur_dir = 'h';
 80011f8:	4b3b      	ldr	r3, [pc, #236]	; (80012e8 <drive+0x1a8>)
 80011fa:	2268      	movs	r2, #104	; 0x68
 80011fc:	701a      	strb	r2, [r3, #0]
			stop();
 80011fe:	f000 f8f3 	bl	80013e8 <stop>
		} else {
			cur_dir = 's';
			back();
		}
		break;
 8001202:	e06a      	b.n	80012da <drive+0x19a>
			cur_dir = 's';
 8001204:	4b38      	ldr	r3, [pc, #224]	; (80012e8 <drive+0x1a8>)
 8001206:	2273      	movs	r2, #115	; 0x73
 8001208:	701a      	strb	r2, [r3, #0]
			back();
 800120a:	f000 f893 	bl	8001334 <back>
		break;
 800120e:	e064      	b.n	80012da <drive+0x19a>

	case 'a':
		if (cur_dir == 'd') {
 8001210:	4b35      	ldr	r3, [pc, #212]	; (80012e8 <drive+0x1a8>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	2b64      	cmp	r3, #100	; 0x64
 8001216:	d105      	bne.n	8001224 <drive+0xe4>
			cur_dir = 'h';
 8001218:	4b33      	ldr	r3, [pc, #204]	; (80012e8 <drive+0x1a8>)
 800121a:	2268      	movs	r2, #104	; 0x68
 800121c:	701a      	strb	r2, [r3, #0]
			stop();
 800121e:	f000 f8e3 	bl	80013e8 <stop>
		} else {
			cur_dir = 'a';
			turn_left();
		}
		break;
 8001222:	e05a      	b.n	80012da <drive+0x19a>
			cur_dir = 'a';
 8001224:	4b30      	ldr	r3, [pc, #192]	; (80012e8 <drive+0x1a8>)
 8001226:	2261      	movs	r2, #97	; 0x61
 8001228:	701a      	strb	r2, [r3, #0]
			turn_left();
 800122a:	f000 f8a1 	bl	8001370 <turn_left>
		break;
 800122e:	e054      	b.n	80012da <drive+0x19a>

	case 'd':
		if (cur_dir == 'a') {
 8001230:	4b2d      	ldr	r3, [pc, #180]	; (80012e8 <drive+0x1a8>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2b61      	cmp	r3, #97	; 0x61
 8001236:	d105      	bne.n	8001244 <drive+0x104>
			cur_dir = 'h';
 8001238:	4b2b      	ldr	r3, [pc, #172]	; (80012e8 <drive+0x1a8>)
 800123a:	2268      	movs	r2, #104	; 0x68
 800123c:	701a      	strb	r2, [r3, #0]
			stop();
 800123e:	f000 f8d3 	bl	80013e8 <stop>
		} else {
			cur_dir = 'd';
			turn_right();
		}
		break;
 8001242:	e04a      	b.n	80012da <drive+0x19a>
			cur_dir = 'd';
 8001244:	4b28      	ldr	r3, [pc, #160]	; (80012e8 <drive+0x1a8>)
 8001246:	2264      	movs	r2, #100	; 0x64
 8001248:	701a      	strb	r2, [r3, #0]
			turn_right();
 800124a:	f000 f8af 	bl	80013ac <turn_right>
		break;
 800124e:	e044      	b.n	80012da <drive+0x19a>

	case 'f':
		if (HAL_GPIO_ReadPin(PC0_ESP32_FL_GPIO_Port, PC0_ESP32_FL_Pin) == 0) {
 8001250:	2101      	movs	r1, #1
 8001252:	4826      	ldr	r0, [pc, #152]	; (80012ec <drive+0x1ac>)
 8001254:	f001 f9c4 	bl	80025e0 <HAL_GPIO_ReadPin>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d108      	bne.n	8001270 <drive+0x130>
			HAL_GPIO_WritePin(PC0_ESP32_FL_GPIO_Port, PC0_ESP32_FL_Pin, 1);
 800125e:	2201      	movs	r2, #1
 8001260:	2101      	movs	r1, #1
 8001262:	4822      	ldr	r0, [pc, #136]	; (80012ec <drive+0x1ac>)
 8001264:	f001 f9d3 	bl	800260e <HAL_GPIO_WritePin>
			cur_fl = 'T';
 8001268:	4b21      	ldr	r3, [pc, #132]	; (80012f0 <drive+0x1b0>)
 800126a:	2254      	movs	r2, #84	; 0x54
 800126c:	701a      	strb	r2, [r3, #0]
		} else {
			HAL_GPIO_WritePin(PC0_ESP32_FL_GPIO_Port, PC0_ESP32_FL_Pin, 0);
			cur_fl = 'F';
		}
		break;
 800126e:	e034      	b.n	80012da <drive+0x19a>
			HAL_GPIO_WritePin(PC0_ESP32_FL_GPIO_Port, PC0_ESP32_FL_Pin, 0);
 8001270:	2200      	movs	r2, #0
 8001272:	2101      	movs	r1, #1
 8001274:	481d      	ldr	r0, [pc, #116]	; (80012ec <drive+0x1ac>)
 8001276:	f001 f9ca 	bl	800260e <HAL_GPIO_WritePin>
			cur_fl = 'F';
 800127a:	4b1d      	ldr	r3, [pc, #116]	; (80012f0 <drive+0x1b0>)
 800127c:	2246      	movs	r2, #70	; 0x46
 800127e:	701a      	strb	r2, [r3, #0]
		break;
 8001280:	e02b      	b.n	80012da <drive+0x19a>

	case 'p':
		if (cur_slp == 'F') {
 8001282:	4b1c      	ldr	r3, [pc, #112]	; (80012f4 <drive+0x1b4>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	2b46      	cmp	r3, #70	; 0x46
 8001288:	d110      	bne.n	80012ac <drive+0x16c>
			HAL_GPIO_WritePin(PC1_ESP32_SLP_GPIO_Port, PC1_ESP32_SLP_Pin, 1);
 800128a:	2201      	movs	r2, #1
 800128c:	2102      	movs	r1, #2
 800128e:	4817      	ldr	r0, [pc, #92]	; (80012ec <drive+0x1ac>)
 8001290:	f001 f9bd 	bl	800260e <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8001294:	2001      	movs	r0, #1
 8001296:	f000 fe3b 	bl	8001f10 <HAL_Delay>
			HAL_GPIO_WritePin(PC1_ESP32_SLP_GPIO_Port, PC1_ESP32_SLP_Pin, 0);
 800129a:	2200      	movs	r2, #0
 800129c:	2102      	movs	r1, #2
 800129e:	4813      	ldr	r0, [pc, #76]	; (80012ec <drive+0x1ac>)
 80012a0:	f001 f9b5 	bl	800260e <HAL_GPIO_WritePin>
			cur_slp = 'T';
 80012a4:	4b13      	ldr	r3, [pc, #76]	; (80012f4 <drive+0x1b4>)
 80012a6:	2254      	movs	r2, #84	; 0x54
 80012a8:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(PC2_ESP32_INT_GPIO_Port, PC2_ESP32_INT_Pin, 1);
			HAL_Delay(1);
			HAL_GPIO_WritePin(PC2_ESP32_INT_GPIO_Port, PC2_ESP32_INT_Pin, 0);
			cur_slp = 'F';
		}
		break;
 80012aa:	e016      	b.n	80012da <drive+0x19a>
			HAL_GPIO_WritePin(PC2_ESP32_INT_GPIO_Port, PC2_ESP32_INT_Pin, 1);
 80012ac:	2201      	movs	r2, #1
 80012ae:	2104      	movs	r1, #4
 80012b0:	480e      	ldr	r0, [pc, #56]	; (80012ec <drive+0x1ac>)
 80012b2:	f001 f9ac 	bl	800260e <HAL_GPIO_WritePin>
			HAL_Delay(1);
 80012b6:	2001      	movs	r0, #1
 80012b8:	f000 fe2a 	bl	8001f10 <HAL_Delay>
			HAL_GPIO_WritePin(PC2_ESP32_INT_GPIO_Port, PC2_ESP32_INT_Pin, 0);
 80012bc:	2200      	movs	r2, #0
 80012be:	2104      	movs	r1, #4
 80012c0:	480a      	ldr	r0, [pc, #40]	; (80012ec <drive+0x1ac>)
 80012c2:	f001 f9a4 	bl	800260e <HAL_GPIO_WritePin>
			cur_slp = 'F';
 80012c6:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <drive+0x1b4>)
 80012c8:	2246      	movs	r2, #70	; 0x46
 80012ca:	701a      	strb	r2, [r3, #0]
		break;
 80012cc:	e005      	b.n	80012da <drive+0x19a>


	default:
		cur_dir = 'h';
 80012ce:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <drive+0x1a8>)
 80012d0:	2268      	movs	r2, #104	; 0x68
 80012d2:	701a      	strb	r2, [r3, #0]
		stop();
 80012d4:	f000 f888 	bl	80013e8 <stop>
		break;
 80012d8:	bf00      	nop
	}
}
 80012da:	bf00      	nop
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20000318 	.word	0x20000318
 80012e8:	20000000 	.word	0x20000000
 80012ec:	40011000 	.word	0x40011000
 80012f0:	20000001 	.word	0x20000001
 80012f4:	20000002 	.word	0x20000002

080012f8 <forward>:

void forward(void) {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PB5_MTR_IND_GPIO_Port, PB5_MTR_IND_Pin, 1);
 80012fc:	2201      	movs	r2, #1
 80012fe:	2120      	movs	r1, #32
 8001300:	480a      	ldr	r0, [pc, #40]	; (800132c <forward+0x34>)
 8001302:	f001 f984 	bl	800260e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PB4_MTR_INC_GPIO_Port, PB4_MTR_INC_Pin, 0);
 8001306:	2200      	movs	r2, #0
 8001308:	2110      	movs	r1, #16
 800130a:	4808      	ldr	r0, [pc, #32]	; (800132c <forward+0x34>)
 800130c:	f001 f97f 	bl	800260e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PA8_MTR_INA_GPIO_Port, PA8_MTR_INA_Pin, 1);
 8001310:	2201      	movs	r2, #1
 8001312:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001316:	4806      	ldr	r0, [pc, #24]	; (8001330 <forward+0x38>)
 8001318:	f001 f979 	bl	800260e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PB10_MTR_INB_GPIO_Port, PB10_MTR_INB_Pin, 0);
 800131c:	2200      	movs	r2, #0
 800131e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001322:	4802      	ldr	r0, [pc, #8]	; (800132c <forward+0x34>)
 8001324:	f001 f973 	bl	800260e <HAL_GPIO_WritePin>
}
 8001328:	bf00      	nop
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40010c00 	.word	0x40010c00
 8001330:	40010800 	.word	0x40010800

08001334 <back>:

void back(void) {
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PB5_MTR_IND_GPIO_Port, PB5_MTR_IND_Pin, 0);
 8001338:	2200      	movs	r2, #0
 800133a:	2120      	movs	r1, #32
 800133c:	480a      	ldr	r0, [pc, #40]	; (8001368 <back+0x34>)
 800133e:	f001 f966 	bl	800260e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PB4_MTR_INC_GPIO_Port, PB4_MTR_INC_Pin, 1);
 8001342:	2201      	movs	r2, #1
 8001344:	2110      	movs	r1, #16
 8001346:	4808      	ldr	r0, [pc, #32]	; (8001368 <back+0x34>)
 8001348:	f001 f961 	bl	800260e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PA8_MTR_INA_GPIO_Port, PA8_MTR_INA_Pin, 0);
 800134c:	2200      	movs	r2, #0
 800134e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001352:	4806      	ldr	r0, [pc, #24]	; (800136c <back+0x38>)
 8001354:	f001 f95b 	bl	800260e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PB10_MTR_INB_GPIO_Port, PB10_MTR_INB_Pin, 1);
 8001358:	2201      	movs	r2, #1
 800135a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800135e:	4802      	ldr	r0, [pc, #8]	; (8001368 <back+0x34>)
 8001360:	f001 f955 	bl	800260e <HAL_GPIO_WritePin>
}
 8001364:	bf00      	nop
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40010c00 	.word	0x40010c00
 800136c:	40010800 	.word	0x40010800

08001370 <turn_left>:

void turn_left(void) {
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PB5_MTR_IND_GPIO_Port, PB5_MTR_IND_Pin, 1);
 8001374:	2201      	movs	r2, #1
 8001376:	2120      	movs	r1, #32
 8001378:	480a      	ldr	r0, [pc, #40]	; (80013a4 <turn_left+0x34>)
 800137a:	f001 f948 	bl	800260e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PB4_MTR_INC_GPIO_Port, PB4_MTR_INC_Pin, 0);
 800137e:	2200      	movs	r2, #0
 8001380:	2110      	movs	r1, #16
 8001382:	4808      	ldr	r0, [pc, #32]	; (80013a4 <turn_left+0x34>)
 8001384:	f001 f943 	bl	800260e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PA8_MTR_INA_GPIO_Port, PA8_MTR_INA_Pin, 0);
 8001388:	2200      	movs	r2, #0
 800138a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800138e:	4806      	ldr	r0, [pc, #24]	; (80013a8 <turn_left+0x38>)
 8001390:	f001 f93d 	bl	800260e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PB10_MTR_INB_GPIO_Port, PB10_MTR_INB_Pin, 1);
 8001394:	2201      	movs	r2, #1
 8001396:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800139a:	4802      	ldr	r0, [pc, #8]	; (80013a4 <turn_left+0x34>)
 800139c:	f001 f937 	bl	800260e <HAL_GPIO_WritePin>
}
 80013a0:	bf00      	nop
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40010c00 	.word	0x40010c00
 80013a8:	40010800 	.word	0x40010800

080013ac <turn_right>:

void turn_right(void) {
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PB5_MTR_IND_GPIO_Port, PB5_MTR_IND_Pin, 0);
 80013b0:	2200      	movs	r2, #0
 80013b2:	2120      	movs	r1, #32
 80013b4:	480a      	ldr	r0, [pc, #40]	; (80013e0 <turn_right+0x34>)
 80013b6:	f001 f92a 	bl	800260e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PB4_MTR_INC_GPIO_Port, PB4_MTR_INC_Pin, 1);
 80013ba:	2201      	movs	r2, #1
 80013bc:	2110      	movs	r1, #16
 80013be:	4808      	ldr	r0, [pc, #32]	; (80013e0 <turn_right+0x34>)
 80013c0:	f001 f925 	bl	800260e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PA8_MTR_INA_GPIO_Port, PA8_MTR_INA_Pin, 1);
 80013c4:	2201      	movs	r2, #1
 80013c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013ca:	4806      	ldr	r0, [pc, #24]	; (80013e4 <turn_right+0x38>)
 80013cc:	f001 f91f 	bl	800260e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PB10_MTR_INB_GPIO_Port, PB10_MTR_INB_Pin, 0);
 80013d0:	2200      	movs	r2, #0
 80013d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013d6:	4802      	ldr	r0, [pc, #8]	; (80013e0 <turn_right+0x34>)
 80013d8:	f001 f919 	bl	800260e <HAL_GPIO_WritePin>
}
 80013dc:	bf00      	nop
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40010c00 	.word	0x40010c00
 80013e4:	40010800 	.word	0x40010800

080013e8 <stop>:

void stop(void) {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
	m_htim->Instance->CCR1 = 0; // left motor duty = 0%
 80013ec:	4b10      	ldr	r3, [pc, #64]	; (8001430 <stop+0x48>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2200      	movs	r2, #0
 80013f4:	635a      	str	r2, [r3, #52]	; 0x34
	m_htim->Instance->CCR2 = 0; // right motor duty = 0%
 80013f6:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <stop+0x48>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2200      	movs	r2, #0
 80013fe:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_GPIO_WritePin(PB5_MTR_IND_GPIO_Port, PB5_MTR_IND_Pin, 1);
 8001400:	2201      	movs	r2, #1
 8001402:	2120      	movs	r1, #32
 8001404:	480b      	ldr	r0, [pc, #44]	; (8001434 <stop+0x4c>)
 8001406:	f001 f902 	bl	800260e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PB4_MTR_INC_GPIO_Port, PB4_MTR_INC_Pin, 1);
 800140a:	2201      	movs	r2, #1
 800140c:	2110      	movs	r1, #16
 800140e:	4809      	ldr	r0, [pc, #36]	; (8001434 <stop+0x4c>)
 8001410:	f001 f8fd 	bl	800260e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PA8_MTR_INA_GPIO_Port, PA8_MTR_INA_Pin, 1);
 8001414:	2201      	movs	r2, #1
 8001416:	f44f 7180 	mov.w	r1, #256	; 0x100
 800141a:	4807      	ldr	r0, [pc, #28]	; (8001438 <stop+0x50>)
 800141c:	f001 f8f7 	bl	800260e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PB10_MTR_INB_GPIO_Port, PB10_MTR_INB_Pin, 1);
 8001420:	2201      	movs	r2, #1
 8001422:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001426:	4803      	ldr	r0, [pc, #12]	; (8001434 <stop+0x4c>)
 8001428:	f001 f8f1 	bl	800260e <HAL_GPIO_WritePin>
}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20000318 	.word	0x20000318
 8001434:	40010c00 	.word	0x40010c00
 8001438:	40010800 	.word	0x40010800

0800143c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800143c:	b480      	push	{r7}
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001442:	4b15      	ldr	r3, [pc, #84]	; (8001498 <HAL_MspInit+0x5c>)
 8001444:	699b      	ldr	r3, [r3, #24]
 8001446:	4a14      	ldr	r2, [pc, #80]	; (8001498 <HAL_MspInit+0x5c>)
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	6193      	str	r3, [r2, #24]
 800144e:	4b12      	ldr	r3, [pc, #72]	; (8001498 <HAL_MspInit+0x5c>)
 8001450:	699b      	ldr	r3, [r3, #24]
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	60bb      	str	r3, [r7, #8]
 8001458:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800145a:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <HAL_MspInit+0x5c>)
 800145c:	69db      	ldr	r3, [r3, #28]
 800145e:	4a0e      	ldr	r2, [pc, #56]	; (8001498 <HAL_MspInit+0x5c>)
 8001460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001464:	61d3      	str	r3, [r2, #28]
 8001466:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <HAL_MspInit+0x5c>)
 8001468:	69db      	ldr	r3, [r3, #28]
 800146a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146e:	607b      	str	r3, [r7, #4]
 8001470:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001472:	4b0a      	ldr	r3, [pc, #40]	; (800149c <HAL_MspInit+0x60>)
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	4a04      	ldr	r2, [pc, #16]	; (800149c <HAL_MspInit+0x60>)
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800148e:	bf00      	nop
 8001490:	3714      	adds	r7, #20
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr
 8001498:	40021000 	.word	0x40021000
 800149c:	40010000 	.word	0x40010000

080014a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08c      	sub	sp, #48	; 0x30
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a8:	f107 0320 	add.w	r3, r7, #32
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014be:	d114      	bne.n	80014ea <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014c0:	4b3d      	ldr	r3, [pc, #244]	; (80015b8 <HAL_TIM_Base_MspInit+0x118>)
 80014c2:	69db      	ldr	r3, [r3, #28]
 80014c4:	4a3c      	ldr	r2, [pc, #240]	; (80015b8 <HAL_TIM_Base_MspInit+0x118>)
 80014c6:	f043 0301 	orr.w	r3, r3, #1
 80014ca:	61d3      	str	r3, [r2, #28]
 80014cc:	4b3a      	ldr	r3, [pc, #232]	; (80015b8 <HAL_TIM_Base_MspInit+0x118>)
 80014ce:	69db      	ldr	r3, [r3, #28]
 80014d0:	f003 0301 	and.w	r3, r3, #1
 80014d4:	61fb      	str	r3, [r7, #28]
 80014d6:	69fb      	ldr	r3, [r7, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 80014d8:	2200      	movs	r2, #0
 80014da:	2106      	movs	r1, #6
 80014dc:	201c      	movs	r0, #28
 80014de:	f000 fe12 	bl	8002106 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014e2:	201c      	movs	r0, #28
 80014e4:	f000 fe2b 	bl	800213e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80014e8:	e062      	b.n	80015b0 <HAL_TIM_Base_MspInit+0x110>
  else if(htim_base->Instance==TIM3)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a33      	ldr	r2, [pc, #204]	; (80015bc <HAL_TIM_Base_MspInit+0x11c>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d144      	bne.n	800157e <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014f4:	4b30      	ldr	r3, [pc, #192]	; (80015b8 <HAL_TIM_Base_MspInit+0x118>)
 80014f6:	69db      	ldr	r3, [r3, #28]
 80014f8:	4a2f      	ldr	r2, [pc, #188]	; (80015b8 <HAL_TIM_Base_MspInit+0x118>)
 80014fa:	f043 0302 	orr.w	r3, r3, #2
 80014fe:	61d3      	str	r3, [r2, #28]
 8001500:	4b2d      	ldr	r3, [pc, #180]	; (80015b8 <HAL_TIM_Base_MspInit+0x118>)
 8001502:	69db      	ldr	r3, [r3, #28]
 8001504:	f003 0302 	and.w	r3, r3, #2
 8001508:	61bb      	str	r3, [r7, #24]
 800150a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800150c:	4b2a      	ldr	r3, [pc, #168]	; (80015b8 <HAL_TIM_Base_MspInit+0x118>)
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	4a29      	ldr	r2, [pc, #164]	; (80015b8 <HAL_TIM_Base_MspInit+0x118>)
 8001512:	f043 0304 	orr.w	r3, r3, #4
 8001516:	6193      	str	r3, [r2, #24]
 8001518:	4b27      	ldr	r3, [pc, #156]	; (80015b8 <HAL_TIM_Base_MspInit+0x118>)
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	f003 0304 	and.w	r3, r3, #4
 8001520:	617b      	str	r3, [r7, #20]
 8001522:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001524:	4b24      	ldr	r3, [pc, #144]	; (80015b8 <HAL_TIM_Base_MspInit+0x118>)
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	4a23      	ldr	r2, [pc, #140]	; (80015b8 <HAL_TIM_Base_MspInit+0x118>)
 800152a:	f043 0308 	orr.w	r3, r3, #8
 800152e:	6193      	str	r3, [r2, #24]
 8001530:	4b21      	ldr	r3, [pc, #132]	; (80015b8 <HAL_TIM_Base_MspInit+0x118>)
 8001532:	699b      	ldr	r3, [r3, #24]
 8001534:	f003 0308 	and.w	r3, r3, #8
 8001538:	613b      	str	r3, [r7, #16]
 800153a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PA6_TIM3_ECHO_L_Pin|PA7_TIM3_ECHO_C_Pin;
 800153c:	23c0      	movs	r3, #192	; 0xc0
 800153e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001540:	2300      	movs	r3, #0
 8001542:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001548:	f107 0320 	add.w	r3, r7, #32
 800154c:	4619      	mov	r1, r3
 800154e:	481c      	ldr	r0, [pc, #112]	; (80015c0 <HAL_TIM_Base_MspInit+0x120>)
 8001550:	f000 fec2 	bl	80022d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PB0_TIM3_ECHO_R_Pin;
 8001554:	2301      	movs	r3, #1
 8001556:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001558:	2300      	movs	r3, #0
 800155a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	2300      	movs	r3, #0
 800155e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(PB0_TIM3_ECHO_R_GPIO_Port, &GPIO_InitStruct);
 8001560:	f107 0320 	add.w	r3, r7, #32
 8001564:	4619      	mov	r1, r3
 8001566:	4817      	ldr	r0, [pc, #92]	; (80015c4 <HAL_TIM_Base_MspInit+0x124>)
 8001568:	f000 feb6 	bl	80022d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800156c:	2200      	movs	r2, #0
 800156e:	2105      	movs	r1, #5
 8001570:	201d      	movs	r0, #29
 8001572:	f000 fdc8 	bl	8002106 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001576:	201d      	movs	r0, #29
 8001578:	f000 fde1 	bl	800213e <HAL_NVIC_EnableIRQ>
}
 800157c:	e018      	b.n	80015b0 <HAL_TIM_Base_MspInit+0x110>
  else if(htim_base->Instance==TIM4)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a11      	ldr	r2, [pc, #68]	; (80015c8 <HAL_TIM_Base_MspInit+0x128>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d113      	bne.n	80015b0 <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001588:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <HAL_TIM_Base_MspInit+0x118>)
 800158a:	69db      	ldr	r3, [r3, #28]
 800158c:	4a0a      	ldr	r2, [pc, #40]	; (80015b8 <HAL_TIM_Base_MspInit+0x118>)
 800158e:	f043 0304 	orr.w	r3, r3, #4
 8001592:	61d3      	str	r3, [r2, #28]
 8001594:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <HAL_TIM_Base_MspInit+0x118>)
 8001596:	69db      	ldr	r3, [r3, #28]
 8001598:	f003 0304 	and.w	r3, r3, #4
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 7, 0);
 80015a0:	2200      	movs	r2, #0
 80015a2:	2107      	movs	r1, #7
 80015a4:	201e      	movs	r0, #30
 80015a6:	f000 fdae 	bl	8002106 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80015aa:	201e      	movs	r0, #30
 80015ac:	f000 fdc7 	bl	800213e <HAL_NVIC_EnableIRQ>
}
 80015b0:	bf00      	nop
 80015b2:	3730      	adds	r7, #48	; 0x30
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40021000 	.word	0x40021000
 80015bc:	40000400 	.word	0x40000400
 80015c0:	40010800 	.word	0x40010800
 80015c4:	40010c00 	.word	0x40010c00
 80015c8:	40000800 	.word	0x40000800

080015cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b088      	sub	sp, #32
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d4:	f107 0310 	add.w	r3, r7, #16
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015ea:	d117      	bne.n	800161c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ec:	4b0d      	ldr	r3, [pc, #52]	; (8001624 <HAL_TIM_MspPostInit+0x58>)
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	4a0c      	ldr	r2, [pc, #48]	; (8001624 <HAL_TIM_MspPostInit+0x58>)
 80015f2:	f043 0304 	orr.w	r3, r3, #4
 80015f6:	6193      	str	r3, [r2, #24]
 80015f8:	4b0a      	ldr	r3, [pc, #40]	; (8001624 <HAL_TIM_MspPostInit+0x58>)
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	f003 0304 	and.w	r3, r3, #4
 8001600:	60fb      	str	r3, [r7, #12]
 8001602:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = PA0_TIM2_PWM_L_Pin|PA1_TIM2_PWM_R_Pin;
 8001604:	2303      	movs	r3, #3
 8001606:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001608:	2302      	movs	r3, #2
 800160a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160c:	2302      	movs	r3, #2
 800160e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001610:	f107 0310 	add.w	r3, r7, #16
 8001614:	4619      	mov	r1, r3
 8001616:	4804      	ldr	r0, [pc, #16]	; (8001628 <HAL_TIM_MspPostInit+0x5c>)
 8001618:	f000 fe5e 	bl	80022d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800161c:	bf00      	nop
 800161e:	3720      	adds	r7, #32
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	40021000 	.word	0x40021000
 8001628:	40010800 	.word	0x40010800

0800162c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b08a      	sub	sp, #40	; 0x28
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001634:	f107 0318 	add.w	r3, r7, #24
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a3b      	ldr	r2, [pc, #236]	; (8001734 <HAL_UART_MspInit+0x108>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d13a      	bne.n	80016c2 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800164c:	4b3a      	ldr	r3, [pc, #232]	; (8001738 <HAL_UART_MspInit+0x10c>)
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	4a39      	ldr	r2, [pc, #228]	; (8001738 <HAL_UART_MspInit+0x10c>)
 8001652:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001656:	6193      	str	r3, [r2, #24]
 8001658:	4b37      	ldr	r3, [pc, #220]	; (8001738 <HAL_UART_MspInit+0x10c>)
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001660:	617b      	str	r3, [r7, #20]
 8001662:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001664:	4b34      	ldr	r3, [pc, #208]	; (8001738 <HAL_UART_MspInit+0x10c>)
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	4a33      	ldr	r2, [pc, #204]	; (8001738 <HAL_UART_MspInit+0x10c>)
 800166a:	f043 0304 	orr.w	r3, r3, #4
 800166e:	6193      	str	r3, [r2, #24]
 8001670:	4b31      	ldr	r3, [pc, #196]	; (8001738 <HAL_UART_MspInit+0x10c>)
 8001672:	699b      	ldr	r3, [r3, #24]
 8001674:	f003 0304 	and.w	r3, r3, #4
 8001678:	613b      	str	r3, [r7, #16]
 800167a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = PA9_BT_RX_Pin;
 800167c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001680:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001682:	2302      	movs	r3, #2
 8001684:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001686:	2303      	movs	r3, #3
 8001688:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PA9_BT_RX_GPIO_Port, &GPIO_InitStruct);
 800168a:	f107 0318 	add.w	r3, r7, #24
 800168e:	4619      	mov	r1, r3
 8001690:	482a      	ldr	r0, [pc, #168]	; (800173c <HAL_UART_MspInit+0x110>)
 8001692:	f000 fe21 	bl	80022d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PA10_BT_TX_Pin;
 8001696:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800169a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800169c:	2300      	movs	r3, #0
 800169e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(PA10_BT_TX_GPIO_Port, &GPIO_InitStruct);
 80016a4:	f107 0318 	add.w	r3, r7, #24
 80016a8:	4619      	mov	r1, r3
 80016aa:	4824      	ldr	r0, [pc, #144]	; (800173c <HAL_UART_MspInit+0x110>)
 80016ac:	f000 fe14 	bl	80022d8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 8, 0);
 80016b0:	2200      	movs	r2, #0
 80016b2:	2108      	movs	r1, #8
 80016b4:	2025      	movs	r0, #37	; 0x25
 80016b6:	f000 fd26 	bl	8002106 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80016ba:	2025      	movs	r0, #37	; 0x25
 80016bc:	f000 fd3f 	bl	800213e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016c0:	e034      	b.n	800172c <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a1e      	ldr	r2, [pc, #120]	; (8001740 <HAL_UART_MspInit+0x114>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d12f      	bne.n	800172c <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80016cc:	4b1a      	ldr	r3, [pc, #104]	; (8001738 <HAL_UART_MspInit+0x10c>)
 80016ce:	69db      	ldr	r3, [r3, #28]
 80016d0:	4a19      	ldr	r2, [pc, #100]	; (8001738 <HAL_UART_MspInit+0x10c>)
 80016d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016d6:	61d3      	str	r3, [r2, #28]
 80016d8:	4b17      	ldr	r3, [pc, #92]	; (8001738 <HAL_UART_MspInit+0x10c>)
 80016da:	69db      	ldr	r3, [r3, #28]
 80016dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e4:	4b14      	ldr	r3, [pc, #80]	; (8001738 <HAL_UART_MspInit+0x10c>)
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	4a13      	ldr	r2, [pc, #76]	; (8001738 <HAL_UART_MspInit+0x10c>)
 80016ea:	f043 0304 	orr.w	r3, r3, #4
 80016ee:	6193      	str	r3, [r2, #24]
 80016f0:	4b11      	ldr	r3, [pc, #68]	; (8001738 <HAL_UART_MspInit+0x10c>)
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	f003 0304 	and.w	r3, r3, #4
 80016f8:	60bb      	str	r3, [r7, #8]
 80016fa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016fc:	2304      	movs	r3, #4
 80016fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001700:	2302      	movs	r3, #2
 8001702:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001704:	2303      	movs	r3, #3
 8001706:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001708:	f107 0318 	add.w	r3, r7, #24
 800170c:	4619      	mov	r1, r3
 800170e:	480b      	ldr	r0, [pc, #44]	; (800173c <HAL_UART_MspInit+0x110>)
 8001710:	f000 fde2 	bl	80022d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001714:	2308      	movs	r3, #8
 8001716:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001718:	2300      	movs	r3, #0
 800171a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171c:	2300      	movs	r3, #0
 800171e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001720:	f107 0318 	add.w	r3, r7, #24
 8001724:	4619      	mov	r1, r3
 8001726:	4805      	ldr	r0, [pc, #20]	; (800173c <HAL_UART_MspInit+0x110>)
 8001728:	f000 fdd6 	bl	80022d8 <HAL_GPIO_Init>
}
 800172c:	bf00      	nop
 800172e:	3728      	adds	r7, #40	; 0x28
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40013800 	.word	0x40013800
 8001738:	40021000 	.word	0x40021000
 800173c:	40010800 	.word	0x40010800
 8001740:	40004400 	.word	0x40004400

08001744 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001748:	e7fe      	b.n	8001748 <NMI_Handler+0x4>

0800174a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800174e:	e7fe      	b.n	800174e <HardFault_Handler+0x4>

08001750 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001754:	e7fe      	b.n	8001754 <MemManage_Handler+0x4>

08001756 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800175a:	e7fe      	b.n	800175a <BusFault_Handler+0x4>

0800175c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001760:	e7fe      	b.n	8001760 <UsageFault_Handler+0x4>

08001762 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001762:	b480      	push	{r7}
 8001764:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	46bd      	mov	sp, r7
 800176a:	bc80      	pop	{r7}
 800176c:	4770      	bx	lr

0800176e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800176e:	b480      	push	{r7}
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	46bd      	mov	sp, r7
 8001776:	bc80      	pop	{r7}
 8001778:	4770      	bx	lr

0800177a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800177a:	b480      	push	{r7}
 800177c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	46bd      	mov	sp, r7
 8001782:	bc80      	pop	{r7}
 8001784:	4770      	bx	lr

08001786 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800178a:	f000 fba5 	bl	8001ed8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
	...

08001794 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001798:	4802      	ldr	r0, [pc, #8]	; (80017a4 <TIM2_IRQHandler+0x10>)
 800179a:	f001 fe61 	bl	8003460 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	200001b0 	.word	0x200001b0

080017a8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80017ac:	4802      	ldr	r0, [pc, #8]	; (80017b8 <TIM3_IRQHandler+0x10>)
 80017ae:	f001 fe57 	bl	8003460 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	200001f8 	.word	0x200001f8

080017bc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80017c0:	4802      	ldr	r0, [pc, #8]	; (80017cc <TIM4_IRQHandler+0x10>)
 80017c2:	f001 fe4d 	bl	8003460 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	20000240 	.word	0x20000240

080017d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80017d4:	4802      	ldr	r0, [pc, #8]	; (80017e0 <USART1_IRQHandler+0x10>)
 80017d6:	f002 feeb 	bl	80045b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20000288 	.word	0x20000288

080017e4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b086      	sub	sp, #24
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f0:	2300      	movs	r3, #0
 80017f2:	617b      	str	r3, [r7, #20]
 80017f4:	e00a      	b.n	800180c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017f6:	f3af 8000 	nop.w
 80017fa:	4601      	mov	r1, r0
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	1c5a      	adds	r2, r3, #1
 8001800:	60ba      	str	r2, [r7, #8]
 8001802:	b2ca      	uxtb	r2, r1
 8001804:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	3301      	adds	r3, #1
 800180a:	617b      	str	r3, [r7, #20]
 800180c:	697a      	ldr	r2, [r7, #20]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	429a      	cmp	r2, r3
 8001812:	dbf0      	blt.n	80017f6 <_read+0x12>
  }

  return len;
 8001814:	687b      	ldr	r3, [r7, #4]
}
 8001816:	4618      	mov	r0, r3
 8001818:	3718      	adds	r7, #24
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b086      	sub	sp, #24
 8001822:	af00      	add	r7, sp, #0
 8001824:	60f8      	str	r0, [r7, #12]
 8001826:	60b9      	str	r1, [r7, #8]
 8001828:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800182a:	2300      	movs	r3, #0
 800182c:	617b      	str	r3, [r7, #20]
 800182e:	e009      	b.n	8001844 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	1c5a      	adds	r2, r3, #1
 8001834:	60ba      	str	r2, [r7, #8]
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff f98b 	bl	8000b54 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	3301      	adds	r3, #1
 8001842:	617b      	str	r3, [r7, #20]
 8001844:	697a      	ldr	r2, [r7, #20]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	429a      	cmp	r2, r3
 800184a:	dbf1      	blt.n	8001830 <_write+0x12>
  }
  return len;
 800184c:	687b      	ldr	r3, [r7, #4]
}
 800184e:	4618      	mov	r0, r3
 8001850:	3718      	adds	r7, #24
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <_close>:

int _close(int file)
{
 8001856:	b480      	push	{r7}
 8001858:	b083      	sub	sp, #12
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800185e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001862:	4618      	mov	r0, r3
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr

0800186c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800187c:	605a      	str	r2, [r3, #4]
  return 0;
 800187e:	2300      	movs	r3, #0
}
 8001880:	4618      	mov	r0, r3
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	bc80      	pop	{r7}
 8001888:	4770      	bx	lr

0800188a <_isatty>:

int _isatty(int file)
{
 800188a:	b480      	push	{r7}
 800188c:	b083      	sub	sp, #12
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001892:	2301      	movs	r3, #1
}
 8001894:	4618      	mov	r0, r3
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	bc80      	pop	{r7}
 800189c:	4770      	bx	lr

0800189e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800189e:	b480      	push	{r7}
 80018a0:	b085      	sub	sp, #20
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	60f8      	str	r0, [r7, #12]
 80018a6:	60b9      	str	r1, [r7, #8]
 80018a8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018aa:	2300      	movs	r3, #0
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3714      	adds	r7, #20
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bc80      	pop	{r7}
 80018b4:	4770      	bx	lr
	...

080018b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018c0:	4a14      	ldr	r2, [pc, #80]	; (8001914 <_sbrk+0x5c>)
 80018c2:	4b15      	ldr	r3, [pc, #84]	; (8001918 <_sbrk+0x60>)
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018cc:	4b13      	ldr	r3, [pc, #76]	; (800191c <_sbrk+0x64>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d102      	bne.n	80018da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018d4:	4b11      	ldr	r3, [pc, #68]	; (800191c <_sbrk+0x64>)
 80018d6:	4a12      	ldr	r2, [pc, #72]	; (8001920 <_sbrk+0x68>)
 80018d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018da:	4b10      	ldr	r3, [pc, #64]	; (800191c <_sbrk+0x64>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4413      	add	r3, r2
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d207      	bcs.n	80018f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018e8:	f003 fd68 	bl	80053bc <__errno>
 80018ec:	4603      	mov	r3, r0
 80018ee:	220c      	movs	r2, #12
 80018f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018f2:	f04f 33ff 	mov.w	r3, #4294967295
 80018f6:	e009      	b.n	800190c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018f8:	4b08      	ldr	r3, [pc, #32]	; (800191c <_sbrk+0x64>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018fe:	4b07      	ldr	r3, [pc, #28]	; (800191c <_sbrk+0x64>)
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4413      	add	r3, r2
 8001906:	4a05      	ldr	r2, [pc, #20]	; (800191c <_sbrk+0x64>)
 8001908:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800190a:	68fb      	ldr	r3, [r7, #12]
}
 800190c:	4618      	mov	r0, r3
 800190e:	3718      	adds	r7, #24
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	20005000 	.word	0x20005000
 8001918:	00000400 	.word	0x00000400
 800191c:	2000031c 	.word	0x2000031c
 8001920:	200004a8 	.word	0x200004a8

08001924 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001928:	bf00      	nop
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr

08001930 <ultrasonic_init>:
bool R_Is_First_Captured = 0;
uint8_t L_Dist_arr[DIST_ARR_SIZE] = { 0, };
uint8_t C_Dist_arr[DIST_ARR_SIZE] = { 0, };
uint8_t R_Dist_arr[DIST_ARR_SIZE] = { 0, };

void ultrasonic_init(TIM_HandleTypeDef *htim) {
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
	m_htim = htim;
 8001938:	4a03      	ldr	r2, [pc, #12]	; (8001948 <ultrasonic_init+0x18>)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6013      	str	r3, [r2, #0]
}
 800193e:	bf00      	nop
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	bc80      	pop	{r7}
 8001946:	4770      	bx	lr
 8001948:	20000320 	.word	0x20000320

0800194c <HCSR04_Read>:

void HCSR04_Read(void) {
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PC9_TRIG_GPIO_Port, PC9_TRIG_Pin, 1); // pull the TRIG pin HIGH
 8001950:	2201      	movs	r2, #1
 8001952:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001956:	4816      	ldr	r0, [pc, #88]	; (80019b0 <HCSR04_Read+0x64>)
 8001958:	f000 fe59 	bl	800260e <HAL_GPIO_WritePin>
	delay_us(10);  // wait for 10 us
 800195c:	200a      	movs	r0, #10
 800195e:	f7ff f871 	bl	8000a44 <delay_us>
	HAL_GPIO_WritePin(PC9_TRIG_GPIO_Port, PC9_TRIG_Pin, 0); // pull the TRIG pin low
 8001962:	2200      	movs	r2, #0
 8001964:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001968:	4811      	ldr	r0, [pc, #68]	; (80019b0 <HCSR04_Read+0x64>)
 800196a:	f000 fe50 	bl	800260e <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(m_htim, TIM_IT_CC1);
 800196e:	4b11      	ldr	r3, [pc, #68]	; (80019b4 <HCSR04_Read+0x68>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	68da      	ldr	r2, [r3, #12]
 8001976:	4b0f      	ldr	r3, [pc, #60]	; (80019b4 <HCSR04_Read+0x68>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f042 0202 	orr.w	r2, r2, #2
 8001980:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_IT(m_htim, TIM_IT_CC2);
 8001982:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <HCSR04_Read+0x68>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	68da      	ldr	r2, [r3, #12]
 800198a:	4b0a      	ldr	r3, [pc, #40]	; (80019b4 <HCSR04_Read+0x68>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f042 0204 	orr.w	r2, r2, #4
 8001994:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_IT(m_htim, TIM_IT_CC3);
 8001996:	4b07      	ldr	r3, [pc, #28]	; (80019b4 <HCSR04_Read+0x68>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	68da      	ldr	r2, [r3, #12]
 800199e:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <HCSR04_Read+0x68>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f042 0208 	orr.w	r2, r2, #8
 80019a8:	60da      	str	r2, [r3, #12]
}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	40011000 	.word	0x40011000
 80019b4:	20000320 	.word	0x20000320

080019b8 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
	if (htim->Instance == m_htim->Instance
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	4b82      	ldr	r3, [pc, #520]	; (8001bd0 <HAL_TIM_IC_CaptureCallback+0x218>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	f040 809d 	bne.w	8001b0a <HAL_TIM_IC_CaptureCallback+0x152>
			&& htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) { // if the interrupt source is channel 1
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	7f1b      	ldrb	r3, [r3, #28]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	f040 8098 	bne.w	8001b0a <HAL_TIM_IC_CaptureCallback+0x152>
		if (L_Is_First_Captured == false) { // if the first value is not captured
 80019da:	4b7e      	ldr	r3, [pc, #504]	; (8001bd4 <HAL_TIM_IC_CaptureCallback+0x21c>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	f083 0301 	eor.w	r3, r3, #1
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d01a      	beq.n	8001a1e <HAL_TIM_IC_CaptureCallback+0x66>
			L_IC_Val[0] = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 80019e8:	2100      	movs	r1, #0
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f002 f866 	bl	8003abc <HAL_TIM_ReadCapturedValue>
 80019f0:	4603      	mov	r3, r0
 80019f2:	4a79      	ldr	r2, [pc, #484]	; (8001bd8 <HAL_TIM_IC_CaptureCallback+0x220>)
 80019f4:	6013      	str	r3, [r2, #0]
			L_Is_First_Captured = true;  // set the first captured as true
 80019f6:	4b77      	ldr	r3, [pc, #476]	; (8001bd4 <HAL_TIM_IC_CaptureCallback+0x21c>)
 80019f8:	2201      	movs	r2, #1
 80019fa:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	6a1a      	ldr	r2, [r3, #32]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f022 020a 	bic.w	r2, r2, #10
 8001a0a:	621a      	str	r2, [r3, #32]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	6a1a      	ldr	r2, [r3, #32]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f042 0202 	orr.w	r2, r2, #2
 8001a1a:	621a      	str	r2, [r3, #32]
		if (L_Is_First_Captured == false) { // if the first value is not captured
 8001a1c:	e1d5      	b.n	8001dca <HAL_TIM_IC_CaptureCallback+0x412>
					TIM_INPUTCHANNELPOLARITY_FALLING);
		} else if (L_Is_First_Captured == true) { // if the first is already captured
 8001a1e:	4b6d      	ldr	r3, [pc, #436]	; (8001bd4 <HAL_TIM_IC_CaptureCallback+0x21c>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f000 81d1 	beq.w	8001dca <HAL_TIM_IC_CaptureCallback+0x412>
			L_IC_Val[1] = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read second value
 8001a28:	2100      	movs	r1, #0
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f002 f846 	bl	8003abc <HAL_TIM_ReadCapturedValue>
 8001a30:	4603      	mov	r3, r0
 8001a32:	4a69      	ldr	r2, [pc, #420]	; (8001bd8 <HAL_TIM_IC_CaptureCallback+0x220>)
 8001a34:	6053      	str	r3, [r2, #4]

			if (L_IC_Val[1] > L_IC_Val[0]) {
 8001a36:	4b68      	ldr	r3, [pc, #416]	; (8001bd8 <HAL_TIM_IC_CaptureCallback+0x220>)
 8001a38:	685a      	ldr	r2, [r3, #4]
 8001a3a:	4b67      	ldr	r3, [pc, #412]	; (8001bd8 <HAL_TIM_IC_CaptureCallback+0x220>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d907      	bls.n	8001a52 <HAL_TIM_IC_CaptureCallback+0x9a>
				L_Diff = L_IC_Val[1] - L_IC_Val[0];
 8001a42:	4b65      	ldr	r3, [pc, #404]	; (8001bd8 <HAL_TIM_IC_CaptureCallback+0x220>)
 8001a44:	685a      	ldr	r2, [r3, #4]
 8001a46:	4b64      	ldr	r3, [pc, #400]	; (8001bd8 <HAL_TIM_IC_CaptureCallback+0x220>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	4a63      	ldr	r2, [pc, #396]	; (8001bdc <HAL_TIM_IC_CaptureCallback+0x224>)
 8001a4e:	6013      	str	r3, [r2, #0]
 8001a50:	e00f      	b.n	8001a72 <HAL_TIM_IC_CaptureCallback+0xba>
			} else if (L_IC_Val[0] > L_IC_Val[1]) { // if IC_Val[0] is overflowed value
 8001a52:	4b61      	ldr	r3, [pc, #388]	; (8001bd8 <HAL_TIM_IC_CaptureCallback+0x220>)
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	4b60      	ldr	r3, [pc, #384]	; (8001bd8 <HAL_TIM_IC_CaptureCallback+0x220>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d909      	bls.n	8001a72 <HAL_TIM_IC_CaptureCallback+0xba>
				L_Diff = (0xffff - L_IC_Val[0]) + L_IC_Val[1];
 8001a5e:	4b5e      	ldr	r3, [pc, #376]	; (8001bd8 <HAL_TIM_IC_CaptureCallback+0x220>)
 8001a60:	685a      	ldr	r2, [r3, #4]
 8001a62:	4b5d      	ldr	r3, [pc, #372]	; (8001bd8 <HAL_TIM_IC_CaptureCallback+0x220>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001a6c:	33ff      	adds	r3, #255	; 0xff
 8001a6e:	4a5b      	ldr	r2, [pc, #364]	; (8001bdc <HAL_TIM_IC_CaptureCallback+0x224>)
 8001a70:	6013      	str	r3, [r2, #0]
			}

			for (int i = DIST_ARR_SIZE - 1; i > 0; i--)
 8001a72:	2302      	movs	r3, #2
 8001a74:	617b      	str	r3, [r7, #20]
 8001a76:	e00b      	b.n	8001a90 <HAL_TIM_IC_CaptureCallback+0xd8>
				L_Dist_arr[i] = L_Dist_arr[i - 1];
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	4a58      	ldr	r2, [pc, #352]	; (8001be0 <HAL_TIM_IC_CaptureCallback+0x228>)
 8001a7e:	5cd1      	ldrb	r1, [r2, r3]
 8001a80:	4a57      	ldr	r2, [pc, #348]	; (8001be0 <HAL_TIM_IC_CaptureCallback+0x228>)
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	4413      	add	r3, r2
 8001a86:	460a      	mov	r2, r1
 8001a88:	701a      	strb	r2, [r3, #0]
			for (int i = DIST_ARR_SIZE - 1; i > 0; i--)
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	617b      	str	r3, [r7, #20]
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	dcf0      	bgt.n	8001a78 <HAL_TIM_IC_CaptureCallback+0xc0>
			L_Dist_arr[0] = DIST_CALC(L_Diff);
 8001a96:	4b51      	ldr	r3, [pc, #324]	; (8001bdc <HAL_TIM_IC_CaptureCallback+0x224>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7fe fca2 	bl	80003e4 <__aeabi_ui2d>
 8001aa0:	a349      	add	r3, pc, #292	; (adr r3, 8001bc8 <HAL_TIM_IC_CaptureCallback+0x210>)
 8001aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa6:	f7fe fd17 	bl	80004d8 <__aeabi_dmul>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	460b      	mov	r3, r1
 8001aae:	4610      	mov	r0, r2
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	f04f 0200 	mov.w	r2, #0
 8001ab6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001aba:	f7fe fe37 	bl	800072c <__aeabi_ddiv>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	4610      	mov	r0, r2
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	f7fe ff19 	bl	80008fc <__aeabi_d2uiz>
 8001aca:	4603      	mov	r3, r0
 8001acc:	b2da      	uxtb	r2, r3
 8001ace:	4b44      	ldr	r3, [pc, #272]	; (8001be0 <HAL_TIM_IC_CaptureCallback+0x228>)
 8001ad0:	701a      	strb	r2, [r3, #0]
			L_Is_First_Captured = false;  // set it back to false
 8001ad2:	4b40      	ldr	r3, [pc, #256]	; (8001bd4 <HAL_TIM_IC_CaptureCallback+0x21c>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	701a      	strb	r2, [r3, #0]

			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	6a1a      	ldr	r2, [r3, #32]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f022 020a 	bic.w	r2, r2, #10
 8001ae6:	621a      	str	r2, [r3, #32]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	6a12      	ldr	r2, [r2, #32]
 8001af2:	621a      	str	r2, [r3, #32]
					TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(m_htim, TIM_IT_CC1);
 8001af4:	4b36      	ldr	r3, [pc, #216]	; (8001bd0 <HAL_TIM_IC_CaptureCallback+0x218>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	68da      	ldr	r2, [r3, #12]
 8001afc:	4b34      	ldr	r3, [pc, #208]	; (8001bd0 <HAL_TIM_IC_CaptureCallback+0x218>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f022 0202 	bic.w	r2, r2, #2
 8001b06:	60da      	str	r2, [r3, #12]
		if (L_Is_First_Captured == false) { // if the first value is not captured
 8001b08:	e15f      	b.n	8001dca <HAL_TIM_IC_CaptureCallback+0x412>
		}
	} else if (htim->Instance == m_htim->Instance
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	4b30      	ldr	r3, [pc, #192]	; (8001bd0 <HAL_TIM_IC_CaptureCallback+0x218>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	f040 80b4 	bne.w	8001c82 <HAL_TIM_IC_CaptureCallback+0x2ca>
			&& htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) { // if the interrupt source is channel 2
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	7f1b      	ldrb	r3, [r3, #28]
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	f040 80af 	bne.w	8001c82 <HAL_TIM_IC_CaptureCallback+0x2ca>
		if (C_Is_First_Captured == false) { // if the first value is not captured
 8001b24:	4b2f      	ldr	r3, [pc, #188]	; (8001be4 <HAL_TIM_IC_CaptureCallback+0x22c>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	f083 0301 	eor.w	r3, r3, #1
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d01a      	beq.n	8001b68 <HAL_TIM_IC_CaptureCallback+0x1b0>
			C_IC_Val[0] = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); // read the first value
 8001b32:	2104      	movs	r1, #4
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f001 ffc1 	bl	8003abc <HAL_TIM_ReadCapturedValue>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	4a2a      	ldr	r2, [pc, #168]	; (8001be8 <HAL_TIM_IC_CaptureCallback+0x230>)
 8001b3e:	6013      	str	r3, [r2, #0]
			C_Is_First_Captured = true;  // set the first captured as true
 8001b40:	4b28      	ldr	r3, [pc, #160]	; (8001be4 <HAL_TIM_IC_CaptureCallback+0x22c>)
 8001b42:	2201      	movs	r2, #1
 8001b44:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2,
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	6a1a      	ldr	r2, [r3, #32]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001b54:	621a      	str	r2, [r3, #32]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	6a1a      	ldr	r2, [r3, #32]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f042 0220 	orr.w	r2, r2, #32
 8001b64:	621a      	str	r2, [r3, #32]
		if (C_Is_First_Captured == false) { // if the first value is not captured
 8001b66:	e132      	b.n	8001dce <HAL_TIM_IC_CaptureCallback+0x416>
					TIM_INPUTCHANNELPOLARITY_FALLING);
		} else if (C_Is_First_Captured == true) { // if the first is already captured
 8001b68:	4b1e      	ldr	r3, [pc, #120]	; (8001be4 <HAL_TIM_IC_CaptureCallback+0x22c>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	f000 812e 	beq.w	8001dce <HAL_TIM_IC_CaptureCallback+0x416>
			C_IC_Val[1] = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); // read second value
 8001b72:	2104      	movs	r1, #4
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f001 ffa1 	bl	8003abc <HAL_TIM_ReadCapturedValue>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	4a1a      	ldr	r2, [pc, #104]	; (8001be8 <HAL_TIM_IC_CaptureCallback+0x230>)
 8001b7e:	6053      	str	r3, [r2, #4]

			if (C_IC_Val[1] > C_IC_Val[0]) {
 8001b80:	4b19      	ldr	r3, [pc, #100]	; (8001be8 <HAL_TIM_IC_CaptureCallback+0x230>)
 8001b82:	685a      	ldr	r2, [r3, #4]
 8001b84:	4b18      	ldr	r3, [pc, #96]	; (8001be8 <HAL_TIM_IC_CaptureCallback+0x230>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d907      	bls.n	8001b9c <HAL_TIM_IC_CaptureCallback+0x1e4>
				C_Diff = C_IC_Val[1] - C_IC_Val[0];
 8001b8c:	4b16      	ldr	r3, [pc, #88]	; (8001be8 <HAL_TIM_IC_CaptureCallback+0x230>)
 8001b8e:	685a      	ldr	r2, [r3, #4]
 8001b90:	4b15      	ldr	r3, [pc, #84]	; (8001be8 <HAL_TIM_IC_CaptureCallback+0x230>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	4a15      	ldr	r2, [pc, #84]	; (8001bec <HAL_TIM_IC_CaptureCallback+0x234>)
 8001b98:	6013      	str	r3, [r2, #0]
 8001b9a:	e00f      	b.n	8001bbc <HAL_TIM_IC_CaptureCallback+0x204>
			} else if (C_IC_Val[0] > C_IC_Val[1]) { // if IC_Val[0] is overflowed value
 8001b9c:	4b12      	ldr	r3, [pc, #72]	; (8001be8 <HAL_TIM_IC_CaptureCallback+0x230>)
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	4b11      	ldr	r3, [pc, #68]	; (8001be8 <HAL_TIM_IC_CaptureCallback+0x230>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d909      	bls.n	8001bbc <HAL_TIM_IC_CaptureCallback+0x204>
				C_Diff = (0xffff - C_IC_Val[0]) + C_IC_Val[1];
 8001ba8:	4b0f      	ldr	r3, [pc, #60]	; (8001be8 <HAL_TIM_IC_CaptureCallback+0x230>)
 8001baa:	685a      	ldr	r2, [r3, #4]
 8001bac:	4b0e      	ldr	r3, [pc, #56]	; (8001be8 <HAL_TIM_IC_CaptureCallback+0x230>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001bb6:	33ff      	adds	r3, #255	; 0xff
 8001bb8:	4a0c      	ldr	r2, [pc, #48]	; (8001bec <HAL_TIM_IC_CaptureCallback+0x234>)
 8001bba:	6013      	str	r3, [r2, #0]
			}

			for (int i = DIST_ARR_SIZE - 1; i > 0; i--)
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	613b      	str	r3, [r7, #16]
 8001bc0:	e022      	b.n	8001c08 <HAL_TIM_IC_CaptureCallback+0x250>
 8001bc2:	bf00      	nop
 8001bc4:	f3af 8000 	nop.w
 8001bc8:	b020c49c 	.word	0xb020c49c
 8001bcc:	3fa16872 	.word	0x3fa16872
 8001bd0:	20000320 	.word	0x20000320
 8001bd4:	20000348 	.word	0x20000348
 8001bd8:	20000324 	.word	0x20000324
 8001bdc:	2000033c 	.word	0x2000033c
 8001be0:	2000034c 	.word	0x2000034c
 8001be4:	20000349 	.word	0x20000349
 8001be8:	2000032c 	.word	0x2000032c
 8001bec:	20000340 	.word	0x20000340
				C_Dist_arr[i] = C_Dist_arr[i - 1];
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	4a7a      	ldr	r2, [pc, #488]	; (8001de0 <HAL_TIM_IC_CaptureCallback+0x428>)
 8001bf6:	5cd1      	ldrb	r1, [r2, r3]
 8001bf8:	4a79      	ldr	r2, [pc, #484]	; (8001de0 <HAL_TIM_IC_CaptureCallback+0x428>)
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	460a      	mov	r2, r1
 8001c00:	701a      	strb	r2, [r3, #0]
			for (int i = DIST_ARR_SIZE - 1; i > 0; i--)
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	3b01      	subs	r3, #1
 8001c06:	613b      	str	r3, [r7, #16]
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	dcf0      	bgt.n	8001bf0 <HAL_TIM_IC_CaptureCallback+0x238>
			C_Dist_arr[0] = DIST_CALC(C_Diff);
 8001c0e:	4b75      	ldr	r3, [pc, #468]	; (8001de4 <HAL_TIM_IC_CaptureCallback+0x42c>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7fe fbe6 	bl	80003e4 <__aeabi_ui2d>
 8001c18:	a36f      	add	r3, pc, #444	; (adr r3, 8001dd8 <HAL_TIM_IC_CaptureCallback+0x420>)
 8001c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c1e:	f7fe fc5b 	bl	80004d8 <__aeabi_dmul>
 8001c22:	4602      	mov	r2, r0
 8001c24:	460b      	mov	r3, r1
 8001c26:	4610      	mov	r0, r2
 8001c28:	4619      	mov	r1, r3
 8001c2a:	f04f 0200 	mov.w	r2, #0
 8001c2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c32:	f7fe fd7b 	bl	800072c <__aeabi_ddiv>
 8001c36:	4602      	mov	r2, r0
 8001c38:	460b      	mov	r3, r1
 8001c3a:	4610      	mov	r0, r2
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	f7fe fe5d 	bl	80008fc <__aeabi_d2uiz>
 8001c42:	4603      	mov	r3, r0
 8001c44:	b2da      	uxtb	r2, r3
 8001c46:	4b66      	ldr	r3, [pc, #408]	; (8001de0 <HAL_TIM_IC_CaptureCallback+0x428>)
 8001c48:	701a      	strb	r2, [r3, #0]
			C_Is_First_Captured = false;  // set it back to false
 8001c4a:	4b67      	ldr	r3, [pc, #412]	; (8001de8 <HAL_TIM_IC_CaptureCallback+0x430>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	701a      	strb	r2, [r3, #0]

			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2,
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	6a1a      	ldr	r2, [r3, #32]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001c5e:	621a      	str	r2, [r3, #32]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	6a12      	ldr	r2, [r2, #32]
 8001c6a:	621a      	str	r2, [r3, #32]
					TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(m_htim, TIM_IT_CC2);
 8001c6c:	4b5f      	ldr	r3, [pc, #380]	; (8001dec <HAL_TIM_IC_CaptureCallback+0x434>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	68da      	ldr	r2, [r3, #12]
 8001c74:	4b5d      	ldr	r3, [pc, #372]	; (8001dec <HAL_TIM_IC_CaptureCallback+0x434>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f022 0204 	bic.w	r2, r2, #4
 8001c7e:	60da      	str	r2, [r3, #12]
		if (C_Is_First_Captured == false) { // if the first value is not captured
 8001c80:	e0a5      	b.n	8001dce <HAL_TIM_IC_CaptureCallback+0x416>
		}
	} else if (htim->Instance == m_htim->Instance
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	4b59      	ldr	r3, [pc, #356]	; (8001dec <HAL_TIM_IC_CaptureCallback+0x434>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	f040 809f 	bne.w	8001dd0 <HAL_TIM_IC_CaptureCallback+0x418>
			&& htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) { // if the interrupt source is channel 3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	7f1b      	ldrb	r3, [r3, #28]
 8001c96:	2b04      	cmp	r3, #4
 8001c98:	f040 809a 	bne.w	8001dd0 <HAL_TIM_IC_CaptureCallback+0x418>
		if (R_Is_First_Captured == false) { // if the first value is not captured
 8001c9c:	4b54      	ldr	r3, [pc, #336]	; (8001df0 <HAL_TIM_IC_CaptureCallback+0x438>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	f083 0301 	eor.w	r3, r3, #1
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d01a      	beq.n	8001ce0 <HAL_TIM_IC_CaptureCallback+0x328>
			R_IC_Val[0] = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3); // read the first value
 8001caa:	2108      	movs	r1, #8
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f001 ff05 	bl	8003abc <HAL_TIM_ReadCapturedValue>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	4a4f      	ldr	r2, [pc, #316]	; (8001df4 <HAL_TIM_IC_CaptureCallback+0x43c>)
 8001cb6:	6013      	str	r3, [r2, #0]
			R_Is_First_Captured = true;  // set the first captured as true
 8001cb8:	4b4d      	ldr	r3, [pc, #308]	; (8001df0 <HAL_TIM_IC_CaptureCallback+0x438>)
 8001cba:	2201      	movs	r2, #1
 8001cbc:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3,
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	6a1a      	ldr	r2, [r3, #32]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ccc:	621a      	str	r2, [r3, #32]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	6a1a      	ldr	r2, [r3, #32]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cdc:	621a      	str	r2, [r3, #32]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3,
					TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(m_htim, TIM_IT_CC3);
		}
	}
}
 8001cde:	e077      	b.n	8001dd0 <HAL_TIM_IC_CaptureCallback+0x418>
		} else if (R_Is_First_Captured == true) { // if the first is already captured
 8001ce0:	4b43      	ldr	r3, [pc, #268]	; (8001df0 <HAL_TIM_IC_CaptureCallback+0x438>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d073      	beq.n	8001dd0 <HAL_TIM_IC_CaptureCallback+0x418>
			R_IC_Val[1] = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3); // read second value
 8001ce8:	2108      	movs	r1, #8
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f001 fee6 	bl	8003abc <HAL_TIM_ReadCapturedValue>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	4a40      	ldr	r2, [pc, #256]	; (8001df4 <HAL_TIM_IC_CaptureCallback+0x43c>)
 8001cf4:	6053      	str	r3, [r2, #4]
			if (R_IC_Val[1] > R_IC_Val[0]) {
 8001cf6:	4b3f      	ldr	r3, [pc, #252]	; (8001df4 <HAL_TIM_IC_CaptureCallback+0x43c>)
 8001cf8:	685a      	ldr	r2, [r3, #4]
 8001cfa:	4b3e      	ldr	r3, [pc, #248]	; (8001df4 <HAL_TIM_IC_CaptureCallback+0x43c>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d907      	bls.n	8001d12 <HAL_TIM_IC_CaptureCallback+0x35a>
				R_Diff = R_IC_Val[1] - R_IC_Val[0];
 8001d02:	4b3c      	ldr	r3, [pc, #240]	; (8001df4 <HAL_TIM_IC_CaptureCallback+0x43c>)
 8001d04:	685a      	ldr	r2, [r3, #4]
 8001d06:	4b3b      	ldr	r3, [pc, #236]	; (8001df4 <HAL_TIM_IC_CaptureCallback+0x43c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	4a3a      	ldr	r2, [pc, #232]	; (8001df8 <HAL_TIM_IC_CaptureCallback+0x440>)
 8001d0e:	6013      	str	r3, [r2, #0]
 8001d10:	e00f      	b.n	8001d32 <HAL_TIM_IC_CaptureCallback+0x37a>
			} else if (R_IC_Val[0] > R_IC_Val[1]) { // if IC_Val[0] is overflowed value
 8001d12:	4b38      	ldr	r3, [pc, #224]	; (8001df4 <HAL_TIM_IC_CaptureCallback+0x43c>)
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	4b37      	ldr	r3, [pc, #220]	; (8001df4 <HAL_TIM_IC_CaptureCallback+0x43c>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d909      	bls.n	8001d32 <HAL_TIM_IC_CaptureCallback+0x37a>
				R_Diff = (0xffff - R_IC_Val[0]) + R_IC_Val[1];
 8001d1e:	4b35      	ldr	r3, [pc, #212]	; (8001df4 <HAL_TIM_IC_CaptureCallback+0x43c>)
 8001d20:	685a      	ldr	r2, [r3, #4]
 8001d22:	4b34      	ldr	r3, [pc, #208]	; (8001df4 <HAL_TIM_IC_CaptureCallback+0x43c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001d2c:	33ff      	adds	r3, #255	; 0xff
 8001d2e:	4a32      	ldr	r2, [pc, #200]	; (8001df8 <HAL_TIM_IC_CaptureCallback+0x440>)
 8001d30:	6013      	str	r3, [r2, #0]
			for (int i = DIST_ARR_SIZE - 1; i > 0; i--)
 8001d32:	2302      	movs	r3, #2
 8001d34:	60fb      	str	r3, [r7, #12]
 8001d36:	e00b      	b.n	8001d50 <HAL_TIM_IC_CaptureCallback+0x398>
				R_Dist_arr[i] = R_Dist_arr[i - 1];
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	4a2f      	ldr	r2, [pc, #188]	; (8001dfc <HAL_TIM_IC_CaptureCallback+0x444>)
 8001d3e:	5cd1      	ldrb	r1, [r2, r3]
 8001d40:	4a2e      	ldr	r2, [pc, #184]	; (8001dfc <HAL_TIM_IC_CaptureCallback+0x444>)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	4413      	add	r3, r2
 8001d46:	460a      	mov	r2, r1
 8001d48:	701a      	strb	r2, [r3, #0]
			for (int i = DIST_ARR_SIZE - 1; i > 0; i--)
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	3b01      	subs	r3, #1
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	dcf0      	bgt.n	8001d38 <HAL_TIM_IC_CaptureCallback+0x380>
			R_Dist_arr[0] = DIST_CALC(R_Diff);
 8001d56:	4b28      	ldr	r3, [pc, #160]	; (8001df8 <HAL_TIM_IC_CaptureCallback+0x440>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7fe fb42 	bl	80003e4 <__aeabi_ui2d>
 8001d60:	a31d      	add	r3, pc, #116	; (adr r3, 8001dd8 <HAL_TIM_IC_CaptureCallback+0x420>)
 8001d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d66:	f7fe fbb7 	bl	80004d8 <__aeabi_dmul>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	4610      	mov	r0, r2
 8001d70:	4619      	mov	r1, r3
 8001d72:	f04f 0200 	mov.w	r2, #0
 8001d76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d7a:	f7fe fcd7 	bl	800072c <__aeabi_ddiv>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	460b      	mov	r3, r1
 8001d82:	4610      	mov	r0, r2
 8001d84:	4619      	mov	r1, r3
 8001d86:	f7fe fdb9 	bl	80008fc <__aeabi_d2uiz>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	b2da      	uxtb	r2, r3
 8001d8e:	4b1b      	ldr	r3, [pc, #108]	; (8001dfc <HAL_TIM_IC_CaptureCallback+0x444>)
 8001d90:	701a      	strb	r2, [r3, #0]
			R_Is_First_Captured = false;  // set it back to false
 8001d92:	4b17      	ldr	r3, [pc, #92]	; (8001df0 <HAL_TIM_IC_CaptureCallback+0x438>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3,
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	6a1a      	ldr	r2, [r3, #32]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001da6:	621a      	str	r2, [r3, #32]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	6a12      	ldr	r2, [r2, #32]
 8001db2:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(m_htim, TIM_IT_CC3);
 8001db4:	4b0d      	ldr	r3, [pc, #52]	; (8001dec <HAL_TIM_IC_CaptureCallback+0x434>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	68da      	ldr	r2, [r3, #12]
 8001dbc:	4b0b      	ldr	r3, [pc, #44]	; (8001dec <HAL_TIM_IC_CaptureCallback+0x434>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f022 0208 	bic.w	r2, r2, #8
 8001dc6:	60da      	str	r2, [r3, #12]
}
 8001dc8:	e002      	b.n	8001dd0 <HAL_TIM_IC_CaptureCallback+0x418>
		if (L_Is_First_Captured == false) { // if the first value is not captured
 8001dca:	bf00      	nop
 8001dcc:	e000      	b.n	8001dd0 <HAL_TIM_IC_CaptureCallback+0x418>
		if (C_Is_First_Captured == false) { // if the first value is not captured
 8001dce:	bf00      	nop
}
 8001dd0:	bf00      	nop
 8001dd2:	3718      	adds	r7, #24
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	b020c49c 	.word	0xb020c49c
 8001ddc:	3fa16872 	.word	0x3fa16872
 8001de0:	20000350 	.word	0x20000350
 8001de4:	20000340 	.word	0x20000340
 8001de8:	20000349 	.word	0x20000349
 8001dec:	20000320 	.word	0x20000320
 8001df0:	2000034a 	.word	0x2000034a
 8001df4:	20000334 	.word	0x20000334
 8001df8:	20000344 	.word	0x20000344
 8001dfc:	20000354 	.word	0x20000354

08001e00 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e00:	f7ff fd90 	bl	8001924 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e04:	480b      	ldr	r0, [pc, #44]	; (8001e34 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001e06:	490c      	ldr	r1, [pc, #48]	; (8001e38 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001e08:	4a0c      	ldr	r2, [pc, #48]	; (8001e3c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001e0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e0c:	e002      	b.n	8001e14 <LoopCopyDataInit>

08001e0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e12:	3304      	adds	r3, #4

08001e14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e18:	d3f9      	bcc.n	8001e0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e1a:	4a09      	ldr	r2, [pc, #36]	; (8001e40 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001e1c:	4c09      	ldr	r4, [pc, #36]	; (8001e44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e20:	e001      	b.n	8001e26 <LoopFillZerobss>

08001e22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e24:	3204      	adds	r2, #4

08001e26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e28:	d3fb      	bcc.n	8001e22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e2a:	f003 facd 	bl	80053c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e2e:	f7fe feaf 	bl	8000b90 <main>
  bx lr
 8001e32:	4770      	bx	lr
  ldr r0, =_sdata
 8001e34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e38:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001e3c:	080063b4 	.word	0x080063b4
  ldr r2, =_sbss
 8001e40:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001e44:	200004a8 	.word	0x200004a8

08001e48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e48:	e7fe      	b.n	8001e48 <ADC1_2_IRQHandler>
	...

08001e4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e50:	4b08      	ldr	r3, [pc, #32]	; (8001e74 <HAL_Init+0x28>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a07      	ldr	r2, [pc, #28]	; (8001e74 <HAL_Init+0x28>)
 8001e56:	f043 0310 	orr.w	r3, r3, #16
 8001e5a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e5c:	2003      	movs	r0, #3
 8001e5e:	f000 f947 	bl	80020f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e62:	2000      	movs	r0, #0
 8001e64:	f000 f808 	bl	8001e78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e68:	f7ff fae8 	bl	800143c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	40022000 	.word	0x40022000

08001e78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e80:	4b12      	ldr	r3, [pc, #72]	; (8001ecc <HAL_InitTick+0x54>)
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	4b12      	ldr	r3, [pc, #72]	; (8001ed0 <HAL_InitTick+0x58>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	4619      	mov	r1, r3
 8001e8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e96:	4618      	mov	r0, r3
 8001e98:	f000 f95f 	bl	800215a <HAL_SYSTICK_Config>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e00e      	b.n	8001ec4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2b0f      	cmp	r3, #15
 8001eaa:	d80a      	bhi.n	8001ec2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001eac:	2200      	movs	r2, #0
 8001eae:	6879      	ldr	r1, [r7, #4]
 8001eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001eb4:	f000 f927 	bl	8002106 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001eb8:	4a06      	ldr	r2, [pc, #24]	; (8001ed4 <HAL_InitTick+0x5c>)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	e000      	b.n	8001ec4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	20000004 	.word	0x20000004
 8001ed0:	2000000c 	.word	0x2000000c
 8001ed4:	20000008 	.word	0x20000008

08001ed8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001edc:	4b05      	ldr	r3, [pc, #20]	; (8001ef4 <HAL_IncTick+0x1c>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	4b05      	ldr	r3, [pc, #20]	; (8001ef8 <HAL_IncTick+0x20>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	4a03      	ldr	r2, [pc, #12]	; (8001ef8 <HAL_IncTick+0x20>)
 8001eea:	6013      	str	r3, [r2, #0]
}
 8001eec:	bf00      	nop
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bc80      	pop	{r7}
 8001ef2:	4770      	bx	lr
 8001ef4:	2000000c 	.word	0x2000000c
 8001ef8:	20000358 	.word	0x20000358

08001efc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  return uwTick;
 8001f00:	4b02      	ldr	r3, [pc, #8]	; (8001f0c <HAL_GetTick+0x10>)
 8001f02:	681b      	ldr	r3, [r3, #0]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bc80      	pop	{r7}
 8001f0a:	4770      	bx	lr
 8001f0c:	20000358 	.word	0x20000358

08001f10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f18:	f7ff fff0 	bl	8001efc <HAL_GetTick>
 8001f1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f28:	d005      	beq.n	8001f36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f2a:	4b0a      	ldr	r3, [pc, #40]	; (8001f54 <HAL_Delay+0x44>)
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	461a      	mov	r2, r3
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	4413      	add	r3, r2
 8001f34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f36:	bf00      	nop
 8001f38:	f7ff ffe0 	bl	8001efc <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d8f7      	bhi.n	8001f38 <HAL_Delay+0x28>
  {
  }
}
 8001f48:	bf00      	nop
 8001f4a:	bf00      	nop
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	2000000c 	.word	0x2000000c

08001f58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f003 0307 	and.w	r3, r3, #7
 8001f66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f68:	4b0c      	ldr	r3, [pc, #48]	; (8001f9c <__NVIC_SetPriorityGrouping+0x44>)
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f6e:	68ba      	ldr	r2, [r7, #8]
 8001f70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f74:	4013      	ands	r3, r2
 8001f76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f8a:	4a04      	ldr	r2, [pc, #16]	; (8001f9c <__NVIC_SetPriorityGrouping+0x44>)
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	60d3      	str	r3, [r2, #12]
}
 8001f90:	bf00      	nop
 8001f92:	3714      	adds	r7, #20
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bc80      	pop	{r7}
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	e000ed00 	.word	0xe000ed00

08001fa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fa4:	4b04      	ldr	r3, [pc, #16]	; (8001fb8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	0a1b      	lsrs	r3, r3, #8
 8001faa:	f003 0307 	and.w	r3, r3, #7
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bc80      	pop	{r7}
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	e000ed00 	.word	0xe000ed00

08001fbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	db0b      	blt.n	8001fe6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fce:	79fb      	ldrb	r3, [r7, #7]
 8001fd0:	f003 021f 	and.w	r2, r3, #31
 8001fd4:	4906      	ldr	r1, [pc, #24]	; (8001ff0 <__NVIC_EnableIRQ+0x34>)
 8001fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fda:	095b      	lsrs	r3, r3, #5
 8001fdc:	2001      	movs	r0, #1
 8001fde:	fa00 f202 	lsl.w	r2, r0, r2
 8001fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fe6:	bf00      	nop
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bc80      	pop	{r7}
 8001fee:	4770      	bx	lr
 8001ff0:	e000e100 	.word	0xe000e100

08001ff4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	6039      	str	r1, [r7, #0]
 8001ffe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002004:	2b00      	cmp	r3, #0
 8002006:	db0a      	blt.n	800201e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	b2da      	uxtb	r2, r3
 800200c:	490c      	ldr	r1, [pc, #48]	; (8002040 <__NVIC_SetPriority+0x4c>)
 800200e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002012:	0112      	lsls	r2, r2, #4
 8002014:	b2d2      	uxtb	r2, r2
 8002016:	440b      	add	r3, r1
 8002018:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800201c:	e00a      	b.n	8002034 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	b2da      	uxtb	r2, r3
 8002022:	4908      	ldr	r1, [pc, #32]	; (8002044 <__NVIC_SetPriority+0x50>)
 8002024:	79fb      	ldrb	r3, [r7, #7]
 8002026:	f003 030f 	and.w	r3, r3, #15
 800202a:	3b04      	subs	r3, #4
 800202c:	0112      	lsls	r2, r2, #4
 800202e:	b2d2      	uxtb	r2, r2
 8002030:	440b      	add	r3, r1
 8002032:	761a      	strb	r2, [r3, #24]
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	bc80      	pop	{r7}
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	e000e100 	.word	0xe000e100
 8002044:	e000ed00 	.word	0xe000ed00

08002048 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002048:	b480      	push	{r7}
 800204a:	b089      	sub	sp, #36	; 0x24
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f003 0307 	and.w	r3, r3, #7
 800205a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	f1c3 0307 	rsb	r3, r3, #7
 8002062:	2b04      	cmp	r3, #4
 8002064:	bf28      	it	cs
 8002066:	2304      	movcs	r3, #4
 8002068:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	3304      	adds	r3, #4
 800206e:	2b06      	cmp	r3, #6
 8002070:	d902      	bls.n	8002078 <NVIC_EncodePriority+0x30>
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	3b03      	subs	r3, #3
 8002076:	e000      	b.n	800207a <NVIC_EncodePriority+0x32>
 8002078:	2300      	movs	r3, #0
 800207a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800207c:	f04f 32ff 	mov.w	r2, #4294967295
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	43da      	mvns	r2, r3
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	401a      	ands	r2, r3
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002090:	f04f 31ff 	mov.w	r1, #4294967295
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	fa01 f303 	lsl.w	r3, r1, r3
 800209a:	43d9      	mvns	r1, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a0:	4313      	orrs	r3, r2
         );
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3724      	adds	r7, #36	; 0x24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bc80      	pop	{r7}
 80020aa:	4770      	bx	lr

080020ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	3b01      	subs	r3, #1
 80020b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020bc:	d301      	bcc.n	80020c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020be:	2301      	movs	r3, #1
 80020c0:	e00f      	b.n	80020e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020c2:	4a0a      	ldr	r2, [pc, #40]	; (80020ec <SysTick_Config+0x40>)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3b01      	subs	r3, #1
 80020c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020ca:	210f      	movs	r1, #15
 80020cc:	f04f 30ff 	mov.w	r0, #4294967295
 80020d0:	f7ff ff90 	bl	8001ff4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020d4:	4b05      	ldr	r3, [pc, #20]	; (80020ec <SysTick_Config+0x40>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020da:	4b04      	ldr	r3, [pc, #16]	; (80020ec <SysTick_Config+0x40>)
 80020dc:	2207      	movs	r2, #7
 80020de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	e000e010 	.word	0xe000e010

080020f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f7ff ff2d 	bl	8001f58 <__NVIC_SetPriorityGrouping>
}
 80020fe:	bf00      	nop
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002106:	b580      	push	{r7, lr}
 8002108:	b086      	sub	sp, #24
 800210a:	af00      	add	r7, sp, #0
 800210c:	4603      	mov	r3, r0
 800210e:	60b9      	str	r1, [r7, #8]
 8002110:	607a      	str	r2, [r7, #4]
 8002112:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002114:	2300      	movs	r3, #0
 8002116:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002118:	f7ff ff42 	bl	8001fa0 <__NVIC_GetPriorityGrouping>
 800211c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	68b9      	ldr	r1, [r7, #8]
 8002122:	6978      	ldr	r0, [r7, #20]
 8002124:	f7ff ff90 	bl	8002048 <NVIC_EncodePriority>
 8002128:	4602      	mov	r2, r0
 800212a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800212e:	4611      	mov	r1, r2
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff ff5f 	bl	8001ff4 <__NVIC_SetPriority>
}
 8002136:	bf00      	nop
 8002138:	3718      	adds	r7, #24
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800213e:	b580      	push	{r7, lr}
 8002140:	b082      	sub	sp, #8
 8002142:	af00      	add	r7, sp, #0
 8002144:	4603      	mov	r3, r0
 8002146:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214c:	4618      	mov	r0, r3
 800214e:	f7ff ff35 	bl	8001fbc <__NVIC_EnableIRQ>
}
 8002152:	bf00      	nop
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b082      	sub	sp, #8
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f7ff ffa2 	bl	80020ac <SysTick_Config>
 8002168:	4603      	mov	r3, r0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002172:	b480      	push	{r7}
 8002174:	b085      	sub	sp, #20
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800217a:	2300      	movs	r3, #0
 800217c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d008      	beq.n	800219c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2204      	movs	r2, #4
 800218e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e020      	b.n	80021de <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f022 020e 	bic.w	r2, r2, #14
 80021aa:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f022 0201 	bic.w	r2, r2, #1
 80021ba:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c4:	2101      	movs	r1, #1
 80021c6:	fa01 f202 	lsl.w	r2, r1, r2
 80021ca:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80021dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3714      	adds	r7, #20
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bc80      	pop	{r7}
 80021e6:	4770      	bx	lr

080021e8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021f0:	2300      	movs	r3, #0
 80021f2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d005      	beq.n	800220c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2204      	movs	r2, #4
 8002204:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	73fb      	strb	r3, [r7, #15]
 800220a:	e051      	b.n	80022b0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f022 020e 	bic.w	r2, r2, #14
 800221a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f022 0201 	bic.w	r2, r2, #1
 800222a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a22      	ldr	r2, [pc, #136]	; (80022bc <HAL_DMA_Abort_IT+0xd4>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d029      	beq.n	800228a <HAL_DMA_Abort_IT+0xa2>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a21      	ldr	r2, [pc, #132]	; (80022c0 <HAL_DMA_Abort_IT+0xd8>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d022      	beq.n	8002286 <HAL_DMA_Abort_IT+0x9e>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a1f      	ldr	r2, [pc, #124]	; (80022c4 <HAL_DMA_Abort_IT+0xdc>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d01a      	beq.n	8002280 <HAL_DMA_Abort_IT+0x98>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a1e      	ldr	r2, [pc, #120]	; (80022c8 <HAL_DMA_Abort_IT+0xe0>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d012      	beq.n	800227a <HAL_DMA_Abort_IT+0x92>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a1c      	ldr	r2, [pc, #112]	; (80022cc <HAL_DMA_Abort_IT+0xe4>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d00a      	beq.n	8002274 <HAL_DMA_Abort_IT+0x8c>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a1b      	ldr	r2, [pc, #108]	; (80022d0 <HAL_DMA_Abort_IT+0xe8>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d102      	bne.n	800226e <HAL_DMA_Abort_IT+0x86>
 8002268:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800226c:	e00e      	b.n	800228c <HAL_DMA_Abort_IT+0xa4>
 800226e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002272:	e00b      	b.n	800228c <HAL_DMA_Abort_IT+0xa4>
 8002274:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002278:	e008      	b.n	800228c <HAL_DMA_Abort_IT+0xa4>
 800227a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800227e:	e005      	b.n	800228c <HAL_DMA_Abort_IT+0xa4>
 8002280:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002284:	e002      	b.n	800228c <HAL_DMA_Abort_IT+0xa4>
 8002286:	2310      	movs	r3, #16
 8002288:	e000      	b.n	800228c <HAL_DMA_Abort_IT+0xa4>
 800228a:	2301      	movs	r3, #1
 800228c:	4a11      	ldr	r2, [pc, #68]	; (80022d4 <HAL_DMA_Abort_IT+0xec>)
 800228e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d003      	beq.n	80022b0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	4798      	blx	r3
    } 
  }
  return status;
 80022b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3710      	adds	r7, #16
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40020008 	.word	0x40020008
 80022c0:	4002001c 	.word	0x4002001c
 80022c4:	40020030 	.word	0x40020030
 80022c8:	40020044 	.word	0x40020044
 80022cc:	40020058 	.word	0x40020058
 80022d0:	4002006c 	.word	0x4002006c
 80022d4:	40020000 	.word	0x40020000

080022d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022d8:	b480      	push	{r7}
 80022da:	b08b      	sub	sp, #44	; 0x2c
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022e2:	2300      	movs	r3, #0
 80022e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80022e6:	2300      	movs	r3, #0
 80022e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022ea:	e169      	b.n	80025c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80022ec:	2201      	movs	r2, #1
 80022ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	69fa      	ldr	r2, [r7, #28]
 80022fc:	4013      	ands	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	429a      	cmp	r2, r3
 8002306:	f040 8158 	bne.w	80025ba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	4a9a      	ldr	r2, [pc, #616]	; (8002578 <HAL_GPIO_Init+0x2a0>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d05e      	beq.n	80023d2 <HAL_GPIO_Init+0xfa>
 8002314:	4a98      	ldr	r2, [pc, #608]	; (8002578 <HAL_GPIO_Init+0x2a0>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d875      	bhi.n	8002406 <HAL_GPIO_Init+0x12e>
 800231a:	4a98      	ldr	r2, [pc, #608]	; (800257c <HAL_GPIO_Init+0x2a4>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d058      	beq.n	80023d2 <HAL_GPIO_Init+0xfa>
 8002320:	4a96      	ldr	r2, [pc, #600]	; (800257c <HAL_GPIO_Init+0x2a4>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d86f      	bhi.n	8002406 <HAL_GPIO_Init+0x12e>
 8002326:	4a96      	ldr	r2, [pc, #600]	; (8002580 <HAL_GPIO_Init+0x2a8>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d052      	beq.n	80023d2 <HAL_GPIO_Init+0xfa>
 800232c:	4a94      	ldr	r2, [pc, #592]	; (8002580 <HAL_GPIO_Init+0x2a8>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d869      	bhi.n	8002406 <HAL_GPIO_Init+0x12e>
 8002332:	4a94      	ldr	r2, [pc, #592]	; (8002584 <HAL_GPIO_Init+0x2ac>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d04c      	beq.n	80023d2 <HAL_GPIO_Init+0xfa>
 8002338:	4a92      	ldr	r2, [pc, #584]	; (8002584 <HAL_GPIO_Init+0x2ac>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d863      	bhi.n	8002406 <HAL_GPIO_Init+0x12e>
 800233e:	4a92      	ldr	r2, [pc, #584]	; (8002588 <HAL_GPIO_Init+0x2b0>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d046      	beq.n	80023d2 <HAL_GPIO_Init+0xfa>
 8002344:	4a90      	ldr	r2, [pc, #576]	; (8002588 <HAL_GPIO_Init+0x2b0>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d85d      	bhi.n	8002406 <HAL_GPIO_Init+0x12e>
 800234a:	2b12      	cmp	r3, #18
 800234c:	d82a      	bhi.n	80023a4 <HAL_GPIO_Init+0xcc>
 800234e:	2b12      	cmp	r3, #18
 8002350:	d859      	bhi.n	8002406 <HAL_GPIO_Init+0x12e>
 8002352:	a201      	add	r2, pc, #4	; (adr r2, 8002358 <HAL_GPIO_Init+0x80>)
 8002354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002358:	080023d3 	.word	0x080023d3
 800235c:	080023ad 	.word	0x080023ad
 8002360:	080023bf 	.word	0x080023bf
 8002364:	08002401 	.word	0x08002401
 8002368:	08002407 	.word	0x08002407
 800236c:	08002407 	.word	0x08002407
 8002370:	08002407 	.word	0x08002407
 8002374:	08002407 	.word	0x08002407
 8002378:	08002407 	.word	0x08002407
 800237c:	08002407 	.word	0x08002407
 8002380:	08002407 	.word	0x08002407
 8002384:	08002407 	.word	0x08002407
 8002388:	08002407 	.word	0x08002407
 800238c:	08002407 	.word	0x08002407
 8002390:	08002407 	.word	0x08002407
 8002394:	08002407 	.word	0x08002407
 8002398:	08002407 	.word	0x08002407
 800239c:	080023b5 	.word	0x080023b5
 80023a0:	080023c9 	.word	0x080023c9
 80023a4:	4a79      	ldr	r2, [pc, #484]	; (800258c <HAL_GPIO_Init+0x2b4>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d013      	beq.n	80023d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80023aa:	e02c      	b.n	8002406 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	623b      	str	r3, [r7, #32]
          break;
 80023b2:	e029      	b.n	8002408 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	3304      	adds	r3, #4
 80023ba:	623b      	str	r3, [r7, #32]
          break;
 80023bc:	e024      	b.n	8002408 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	3308      	adds	r3, #8
 80023c4:	623b      	str	r3, [r7, #32]
          break;
 80023c6:	e01f      	b.n	8002408 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	330c      	adds	r3, #12
 80023ce:	623b      	str	r3, [r7, #32]
          break;
 80023d0:	e01a      	b.n	8002408 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d102      	bne.n	80023e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80023da:	2304      	movs	r3, #4
 80023dc:	623b      	str	r3, [r7, #32]
          break;
 80023de:	e013      	b.n	8002408 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d105      	bne.n	80023f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023e8:	2308      	movs	r3, #8
 80023ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	69fa      	ldr	r2, [r7, #28]
 80023f0:	611a      	str	r2, [r3, #16]
          break;
 80023f2:	e009      	b.n	8002408 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023f4:	2308      	movs	r3, #8
 80023f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	69fa      	ldr	r2, [r7, #28]
 80023fc:	615a      	str	r2, [r3, #20]
          break;
 80023fe:	e003      	b.n	8002408 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002400:	2300      	movs	r3, #0
 8002402:	623b      	str	r3, [r7, #32]
          break;
 8002404:	e000      	b.n	8002408 <HAL_GPIO_Init+0x130>
          break;
 8002406:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	2bff      	cmp	r3, #255	; 0xff
 800240c:	d801      	bhi.n	8002412 <HAL_GPIO_Init+0x13a>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	e001      	b.n	8002416 <HAL_GPIO_Init+0x13e>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	3304      	adds	r3, #4
 8002416:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	2bff      	cmp	r3, #255	; 0xff
 800241c:	d802      	bhi.n	8002424 <HAL_GPIO_Init+0x14c>
 800241e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	e002      	b.n	800242a <HAL_GPIO_Init+0x152>
 8002424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002426:	3b08      	subs	r3, #8
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	210f      	movs	r1, #15
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	fa01 f303 	lsl.w	r3, r1, r3
 8002438:	43db      	mvns	r3, r3
 800243a:	401a      	ands	r2, r3
 800243c:	6a39      	ldr	r1, [r7, #32]
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	fa01 f303 	lsl.w	r3, r1, r3
 8002444:	431a      	orrs	r2, r3
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002452:	2b00      	cmp	r3, #0
 8002454:	f000 80b1 	beq.w	80025ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002458:	4b4d      	ldr	r3, [pc, #308]	; (8002590 <HAL_GPIO_Init+0x2b8>)
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	4a4c      	ldr	r2, [pc, #304]	; (8002590 <HAL_GPIO_Init+0x2b8>)
 800245e:	f043 0301 	orr.w	r3, r3, #1
 8002462:	6193      	str	r3, [r2, #24]
 8002464:	4b4a      	ldr	r3, [pc, #296]	; (8002590 <HAL_GPIO_Init+0x2b8>)
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	f003 0301 	and.w	r3, r3, #1
 800246c:	60bb      	str	r3, [r7, #8]
 800246e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002470:	4a48      	ldr	r2, [pc, #288]	; (8002594 <HAL_GPIO_Init+0x2bc>)
 8002472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002474:	089b      	lsrs	r3, r3, #2
 8002476:	3302      	adds	r3, #2
 8002478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800247c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800247e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002480:	f003 0303 	and.w	r3, r3, #3
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	220f      	movs	r2, #15
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	43db      	mvns	r3, r3
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	4013      	ands	r3, r2
 8002492:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4a40      	ldr	r2, [pc, #256]	; (8002598 <HAL_GPIO_Init+0x2c0>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d013      	beq.n	80024c4 <HAL_GPIO_Init+0x1ec>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4a3f      	ldr	r2, [pc, #252]	; (800259c <HAL_GPIO_Init+0x2c4>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d00d      	beq.n	80024c0 <HAL_GPIO_Init+0x1e8>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4a3e      	ldr	r2, [pc, #248]	; (80025a0 <HAL_GPIO_Init+0x2c8>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d007      	beq.n	80024bc <HAL_GPIO_Init+0x1e4>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4a3d      	ldr	r2, [pc, #244]	; (80025a4 <HAL_GPIO_Init+0x2cc>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d101      	bne.n	80024b8 <HAL_GPIO_Init+0x1e0>
 80024b4:	2303      	movs	r3, #3
 80024b6:	e006      	b.n	80024c6 <HAL_GPIO_Init+0x1ee>
 80024b8:	2304      	movs	r3, #4
 80024ba:	e004      	b.n	80024c6 <HAL_GPIO_Init+0x1ee>
 80024bc:	2302      	movs	r3, #2
 80024be:	e002      	b.n	80024c6 <HAL_GPIO_Init+0x1ee>
 80024c0:	2301      	movs	r3, #1
 80024c2:	e000      	b.n	80024c6 <HAL_GPIO_Init+0x1ee>
 80024c4:	2300      	movs	r3, #0
 80024c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024c8:	f002 0203 	and.w	r2, r2, #3
 80024cc:	0092      	lsls	r2, r2, #2
 80024ce:	4093      	lsls	r3, r2
 80024d0:	68fa      	ldr	r2, [r7, #12]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80024d6:	492f      	ldr	r1, [pc, #188]	; (8002594 <HAL_GPIO_Init+0x2bc>)
 80024d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024da:	089b      	lsrs	r3, r3, #2
 80024dc:	3302      	adds	r3, #2
 80024de:	68fa      	ldr	r2, [r7, #12]
 80024e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d006      	beq.n	80024fe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80024f0:	4b2d      	ldr	r3, [pc, #180]	; (80025a8 <HAL_GPIO_Init+0x2d0>)
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	492c      	ldr	r1, [pc, #176]	; (80025a8 <HAL_GPIO_Init+0x2d0>)
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	608b      	str	r3, [r1, #8]
 80024fc:	e006      	b.n	800250c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80024fe:	4b2a      	ldr	r3, [pc, #168]	; (80025a8 <HAL_GPIO_Init+0x2d0>)
 8002500:	689a      	ldr	r2, [r3, #8]
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	43db      	mvns	r3, r3
 8002506:	4928      	ldr	r1, [pc, #160]	; (80025a8 <HAL_GPIO_Init+0x2d0>)
 8002508:	4013      	ands	r3, r2
 800250a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d006      	beq.n	8002526 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002518:	4b23      	ldr	r3, [pc, #140]	; (80025a8 <HAL_GPIO_Init+0x2d0>)
 800251a:	68da      	ldr	r2, [r3, #12]
 800251c:	4922      	ldr	r1, [pc, #136]	; (80025a8 <HAL_GPIO_Init+0x2d0>)
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	4313      	orrs	r3, r2
 8002522:	60cb      	str	r3, [r1, #12]
 8002524:	e006      	b.n	8002534 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002526:	4b20      	ldr	r3, [pc, #128]	; (80025a8 <HAL_GPIO_Init+0x2d0>)
 8002528:	68da      	ldr	r2, [r3, #12]
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	43db      	mvns	r3, r3
 800252e:	491e      	ldr	r1, [pc, #120]	; (80025a8 <HAL_GPIO_Init+0x2d0>)
 8002530:	4013      	ands	r3, r2
 8002532:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d006      	beq.n	800254e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002540:	4b19      	ldr	r3, [pc, #100]	; (80025a8 <HAL_GPIO_Init+0x2d0>)
 8002542:	685a      	ldr	r2, [r3, #4]
 8002544:	4918      	ldr	r1, [pc, #96]	; (80025a8 <HAL_GPIO_Init+0x2d0>)
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	4313      	orrs	r3, r2
 800254a:	604b      	str	r3, [r1, #4]
 800254c:	e006      	b.n	800255c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800254e:	4b16      	ldr	r3, [pc, #88]	; (80025a8 <HAL_GPIO_Init+0x2d0>)
 8002550:	685a      	ldr	r2, [r3, #4]
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	43db      	mvns	r3, r3
 8002556:	4914      	ldr	r1, [pc, #80]	; (80025a8 <HAL_GPIO_Init+0x2d0>)
 8002558:	4013      	ands	r3, r2
 800255a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d021      	beq.n	80025ac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002568:	4b0f      	ldr	r3, [pc, #60]	; (80025a8 <HAL_GPIO_Init+0x2d0>)
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	490e      	ldr	r1, [pc, #56]	; (80025a8 <HAL_GPIO_Init+0x2d0>)
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	4313      	orrs	r3, r2
 8002572:	600b      	str	r3, [r1, #0]
 8002574:	e021      	b.n	80025ba <HAL_GPIO_Init+0x2e2>
 8002576:	bf00      	nop
 8002578:	10320000 	.word	0x10320000
 800257c:	10310000 	.word	0x10310000
 8002580:	10220000 	.word	0x10220000
 8002584:	10210000 	.word	0x10210000
 8002588:	10120000 	.word	0x10120000
 800258c:	10110000 	.word	0x10110000
 8002590:	40021000 	.word	0x40021000
 8002594:	40010000 	.word	0x40010000
 8002598:	40010800 	.word	0x40010800
 800259c:	40010c00 	.word	0x40010c00
 80025a0:	40011000 	.word	0x40011000
 80025a4:	40011400 	.word	0x40011400
 80025a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80025ac:	4b0b      	ldr	r3, [pc, #44]	; (80025dc <HAL_GPIO_Init+0x304>)
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	43db      	mvns	r3, r3
 80025b4:	4909      	ldr	r1, [pc, #36]	; (80025dc <HAL_GPIO_Init+0x304>)
 80025b6:	4013      	ands	r3, r2
 80025b8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80025ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025bc:	3301      	adds	r3, #1
 80025be:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c6:	fa22 f303 	lsr.w	r3, r2, r3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	f47f ae8e 	bne.w	80022ec <HAL_GPIO_Init+0x14>
  }
}
 80025d0:	bf00      	nop
 80025d2:	bf00      	nop
 80025d4:	372c      	adds	r7, #44	; 0x2c
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bc80      	pop	{r7}
 80025da:	4770      	bx	lr
 80025dc:	40010400 	.word	0x40010400

080025e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	460b      	mov	r3, r1
 80025ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	887b      	ldrh	r3, [r7, #2]
 80025f2:	4013      	ands	r3, r2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d002      	beq.n	80025fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025f8:	2301      	movs	r3, #1
 80025fa:	73fb      	strb	r3, [r7, #15]
 80025fc:	e001      	b.n	8002602 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025fe:	2300      	movs	r3, #0
 8002600:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002602:	7bfb      	ldrb	r3, [r7, #15]
}
 8002604:	4618      	mov	r0, r3
 8002606:	3714      	adds	r7, #20
 8002608:	46bd      	mov	sp, r7
 800260a:	bc80      	pop	{r7}
 800260c:	4770      	bx	lr

0800260e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800260e:	b480      	push	{r7}
 8002610:	b083      	sub	sp, #12
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
 8002616:	460b      	mov	r3, r1
 8002618:	807b      	strh	r3, [r7, #2]
 800261a:	4613      	mov	r3, r2
 800261c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800261e:	787b      	ldrb	r3, [r7, #1]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d003      	beq.n	800262c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002624:	887a      	ldrh	r2, [r7, #2]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800262a:	e003      	b.n	8002634 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800262c:	887b      	ldrh	r3, [r7, #2]
 800262e:	041a      	lsls	r2, r3, #16
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	611a      	str	r2, [r3, #16]
}
 8002634:	bf00      	nop
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	bc80      	pop	{r7}
 800263c:	4770      	bx	lr
	...

08002640 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e272      	b.n	8002b38 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	2b00      	cmp	r3, #0
 800265c:	f000 8087 	beq.w	800276e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002660:	4b92      	ldr	r3, [pc, #584]	; (80028ac <HAL_RCC_OscConfig+0x26c>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f003 030c 	and.w	r3, r3, #12
 8002668:	2b04      	cmp	r3, #4
 800266a:	d00c      	beq.n	8002686 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800266c:	4b8f      	ldr	r3, [pc, #572]	; (80028ac <HAL_RCC_OscConfig+0x26c>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f003 030c 	and.w	r3, r3, #12
 8002674:	2b08      	cmp	r3, #8
 8002676:	d112      	bne.n	800269e <HAL_RCC_OscConfig+0x5e>
 8002678:	4b8c      	ldr	r3, [pc, #560]	; (80028ac <HAL_RCC_OscConfig+0x26c>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002684:	d10b      	bne.n	800269e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002686:	4b89      	ldr	r3, [pc, #548]	; (80028ac <HAL_RCC_OscConfig+0x26c>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d06c      	beq.n	800276c <HAL_RCC_OscConfig+0x12c>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d168      	bne.n	800276c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e24c      	b.n	8002b38 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026a6:	d106      	bne.n	80026b6 <HAL_RCC_OscConfig+0x76>
 80026a8:	4b80      	ldr	r3, [pc, #512]	; (80028ac <HAL_RCC_OscConfig+0x26c>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a7f      	ldr	r2, [pc, #508]	; (80028ac <HAL_RCC_OscConfig+0x26c>)
 80026ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026b2:	6013      	str	r3, [r2, #0]
 80026b4:	e02e      	b.n	8002714 <HAL_RCC_OscConfig+0xd4>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d10c      	bne.n	80026d8 <HAL_RCC_OscConfig+0x98>
 80026be:	4b7b      	ldr	r3, [pc, #492]	; (80028ac <HAL_RCC_OscConfig+0x26c>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a7a      	ldr	r2, [pc, #488]	; (80028ac <HAL_RCC_OscConfig+0x26c>)
 80026c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026c8:	6013      	str	r3, [r2, #0]
 80026ca:	4b78      	ldr	r3, [pc, #480]	; (80028ac <HAL_RCC_OscConfig+0x26c>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a77      	ldr	r2, [pc, #476]	; (80028ac <HAL_RCC_OscConfig+0x26c>)
 80026d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026d4:	6013      	str	r3, [r2, #0]
 80026d6:	e01d      	b.n	8002714 <HAL_RCC_OscConfig+0xd4>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026e0:	d10c      	bne.n	80026fc <HAL_RCC_OscConfig+0xbc>
 80026e2:	4b72      	ldr	r3, [pc, #456]	; (80028ac <HAL_RCC_OscConfig+0x26c>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a71      	ldr	r2, [pc, #452]	; (80028ac <HAL_RCC_OscConfig+0x26c>)
 80026e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026ec:	6013      	str	r3, [r2, #0]
 80026ee:	4b6f      	ldr	r3, [pc, #444]	; (80028ac <HAL_RCC_OscConfig+0x26c>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a6e      	ldr	r2, [pc, #440]	; (80028ac <HAL_RCC_OscConfig+0x26c>)
 80026f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026f8:	6013      	str	r3, [r2, #0]
 80026fa:	e00b      	b.n	8002714 <HAL_RCC_OscConfig+0xd4>
 80026fc:	4b6b      	ldr	r3, [pc, #428]	; (80028ac <HAL_RCC_OscConfig+0x26c>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a6a      	ldr	r2, [pc, #424]	; (80028ac <HAL_RCC_OscConfig+0x26c>)
 8002702:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002706:	6013      	str	r3, [r2, #0]
 8002708:	4b68      	ldr	r3, [pc, #416]	; (80028ac <HAL_RCC_OscConfig+0x26c>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a67      	ldr	r2, [pc, #412]	; (80028ac <HAL_RCC_OscConfig+0x26c>)
 800270e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002712:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d013      	beq.n	8002744 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800271c:	f7ff fbee 	bl	8001efc <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002724:	f7ff fbea 	bl	8001efc <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b64      	cmp	r3, #100	; 0x64
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e200      	b.n	8002b38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002736:	4b5d      	ldr	r3, [pc, #372]	; (80028ac <HAL_RCC_OscConfig+0x26c>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d0f0      	beq.n	8002724 <HAL_RCC_OscConfig+0xe4>
 8002742:	e014      	b.n	800276e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002744:	f7ff fbda 	bl	8001efc <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800274a:	e008      	b.n	800275e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800274c:	f7ff fbd6 	bl	8001efc <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b64      	cmp	r3, #100	; 0x64
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e1ec      	b.n	8002b38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800275e:	4b53      	ldr	r3, [pc, #332]	; (80028ac <HAL_RCC_OscConfig+0x26c>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1f0      	bne.n	800274c <HAL_RCC_OscConfig+0x10c>
 800276a:	e000      	b.n	800276e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800276c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d063      	beq.n	8002842 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800277a:	4b4c      	ldr	r3, [pc, #304]	; (80028ac <HAL_RCC_OscConfig+0x26c>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f003 030c 	and.w	r3, r3, #12
 8002782:	2b00      	cmp	r3, #0
 8002784:	d00b      	beq.n	800279e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002786:	4b49      	ldr	r3, [pc, #292]	; (80028ac <HAL_RCC_OscConfig+0x26c>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f003 030c 	and.w	r3, r3, #12
 800278e:	2b08      	cmp	r3, #8
 8002790:	d11c      	bne.n	80027cc <HAL_RCC_OscConfig+0x18c>
 8002792:	4b46      	ldr	r3, [pc, #280]	; (80028ac <HAL_RCC_OscConfig+0x26c>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d116      	bne.n	80027cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800279e:	4b43      	ldr	r3, [pc, #268]	; (80028ac <HAL_RCC_OscConfig+0x26c>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d005      	beq.n	80027b6 <HAL_RCC_OscConfig+0x176>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d001      	beq.n	80027b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e1c0      	b.n	8002b38 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b6:	4b3d      	ldr	r3, [pc, #244]	; (80028ac <HAL_RCC_OscConfig+0x26c>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	4939      	ldr	r1, [pc, #228]	; (80028ac <HAL_RCC_OscConfig+0x26c>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ca:	e03a      	b.n	8002842 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d020      	beq.n	8002816 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027d4:	4b36      	ldr	r3, [pc, #216]	; (80028b0 <HAL_RCC_OscConfig+0x270>)
 80027d6:	2201      	movs	r2, #1
 80027d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027da:	f7ff fb8f 	bl	8001efc <HAL_GetTick>
 80027de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027e0:	e008      	b.n	80027f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027e2:	f7ff fb8b 	bl	8001efc <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d901      	bls.n	80027f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e1a1      	b.n	8002b38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027f4:	4b2d      	ldr	r3, [pc, #180]	; (80028ac <HAL_RCC_OscConfig+0x26c>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0302 	and.w	r3, r3, #2
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d0f0      	beq.n	80027e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002800:	4b2a      	ldr	r3, [pc, #168]	; (80028ac <HAL_RCC_OscConfig+0x26c>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	695b      	ldr	r3, [r3, #20]
 800280c:	00db      	lsls	r3, r3, #3
 800280e:	4927      	ldr	r1, [pc, #156]	; (80028ac <HAL_RCC_OscConfig+0x26c>)
 8002810:	4313      	orrs	r3, r2
 8002812:	600b      	str	r3, [r1, #0]
 8002814:	e015      	b.n	8002842 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002816:	4b26      	ldr	r3, [pc, #152]	; (80028b0 <HAL_RCC_OscConfig+0x270>)
 8002818:	2200      	movs	r2, #0
 800281a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800281c:	f7ff fb6e 	bl	8001efc <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002822:	e008      	b.n	8002836 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002824:	f7ff fb6a 	bl	8001efc <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b02      	cmp	r3, #2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e180      	b.n	8002b38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002836:	4b1d      	ldr	r3, [pc, #116]	; (80028ac <HAL_RCC_OscConfig+0x26c>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1f0      	bne.n	8002824 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0308 	and.w	r3, r3, #8
 800284a:	2b00      	cmp	r3, #0
 800284c:	d03a      	beq.n	80028c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	699b      	ldr	r3, [r3, #24]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d019      	beq.n	800288a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002856:	4b17      	ldr	r3, [pc, #92]	; (80028b4 <HAL_RCC_OscConfig+0x274>)
 8002858:	2201      	movs	r2, #1
 800285a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800285c:	f7ff fb4e 	bl	8001efc <HAL_GetTick>
 8002860:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002862:	e008      	b.n	8002876 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002864:	f7ff fb4a 	bl	8001efc <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b02      	cmp	r3, #2
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e160      	b.n	8002b38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002876:	4b0d      	ldr	r3, [pc, #52]	; (80028ac <HAL_RCC_OscConfig+0x26c>)
 8002878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d0f0      	beq.n	8002864 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002882:	2001      	movs	r0, #1
 8002884:	f000 face 	bl	8002e24 <RCC_Delay>
 8002888:	e01c      	b.n	80028c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800288a:	4b0a      	ldr	r3, [pc, #40]	; (80028b4 <HAL_RCC_OscConfig+0x274>)
 800288c:	2200      	movs	r2, #0
 800288e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002890:	f7ff fb34 	bl	8001efc <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002896:	e00f      	b.n	80028b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002898:	f7ff fb30 	bl	8001efc <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d908      	bls.n	80028b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e146      	b.n	8002b38 <HAL_RCC_OscConfig+0x4f8>
 80028aa:	bf00      	nop
 80028ac:	40021000 	.word	0x40021000
 80028b0:	42420000 	.word	0x42420000
 80028b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028b8:	4b92      	ldr	r3, [pc, #584]	; (8002b04 <HAL_RCC_OscConfig+0x4c4>)
 80028ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028bc:	f003 0302 	and.w	r3, r3, #2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d1e9      	bne.n	8002898 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0304 	and.w	r3, r3, #4
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	f000 80a6 	beq.w	8002a1e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028d2:	2300      	movs	r3, #0
 80028d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028d6:	4b8b      	ldr	r3, [pc, #556]	; (8002b04 <HAL_RCC_OscConfig+0x4c4>)
 80028d8:	69db      	ldr	r3, [r3, #28]
 80028da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d10d      	bne.n	80028fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028e2:	4b88      	ldr	r3, [pc, #544]	; (8002b04 <HAL_RCC_OscConfig+0x4c4>)
 80028e4:	69db      	ldr	r3, [r3, #28]
 80028e6:	4a87      	ldr	r2, [pc, #540]	; (8002b04 <HAL_RCC_OscConfig+0x4c4>)
 80028e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028ec:	61d3      	str	r3, [r2, #28]
 80028ee:	4b85      	ldr	r3, [pc, #532]	; (8002b04 <HAL_RCC_OscConfig+0x4c4>)
 80028f0:	69db      	ldr	r3, [r3, #28]
 80028f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028f6:	60bb      	str	r3, [r7, #8]
 80028f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028fa:	2301      	movs	r3, #1
 80028fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028fe:	4b82      	ldr	r3, [pc, #520]	; (8002b08 <HAL_RCC_OscConfig+0x4c8>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002906:	2b00      	cmp	r3, #0
 8002908:	d118      	bne.n	800293c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800290a:	4b7f      	ldr	r3, [pc, #508]	; (8002b08 <HAL_RCC_OscConfig+0x4c8>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a7e      	ldr	r2, [pc, #504]	; (8002b08 <HAL_RCC_OscConfig+0x4c8>)
 8002910:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002914:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002916:	f7ff faf1 	bl	8001efc <HAL_GetTick>
 800291a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800291c:	e008      	b.n	8002930 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800291e:	f7ff faed 	bl	8001efc <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	2b64      	cmp	r3, #100	; 0x64
 800292a:	d901      	bls.n	8002930 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	e103      	b.n	8002b38 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002930:	4b75      	ldr	r3, [pc, #468]	; (8002b08 <HAL_RCC_OscConfig+0x4c8>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002938:	2b00      	cmp	r3, #0
 800293a:	d0f0      	beq.n	800291e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	2b01      	cmp	r3, #1
 8002942:	d106      	bne.n	8002952 <HAL_RCC_OscConfig+0x312>
 8002944:	4b6f      	ldr	r3, [pc, #444]	; (8002b04 <HAL_RCC_OscConfig+0x4c4>)
 8002946:	6a1b      	ldr	r3, [r3, #32]
 8002948:	4a6e      	ldr	r2, [pc, #440]	; (8002b04 <HAL_RCC_OscConfig+0x4c4>)
 800294a:	f043 0301 	orr.w	r3, r3, #1
 800294e:	6213      	str	r3, [r2, #32]
 8002950:	e02d      	b.n	80029ae <HAL_RCC_OscConfig+0x36e>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d10c      	bne.n	8002974 <HAL_RCC_OscConfig+0x334>
 800295a:	4b6a      	ldr	r3, [pc, #424]	; (8002b04 <HAL_RCC_OscConfig+0x4c4>)
 800295c:	6a1b      	ldr	r3, [r3, #32]
 800295e:	4a69      	ldr	r2, [pc, #420]	; (8002b04 <HAL_RCC_OscConfig+0x4c4>)
 8002960:	f023 0301 	bic.w	r3, r3, #1
 8002964:	6213      	str	r3, [r2, #32]
 8002966:	4b67      	ldr	r3, [pc, #412]	; (8002b04 <HAL_RCC_OscConfig+0x4c4>)
 8002968:	6a1b      	ldr	r3, [r3, #32]
 800296a:	4a66      	ldr	r2, [pc, #408]	; (8002b04 <HAL_RCC_OscConfig+0x4c4>)
 800296c:	f023 0304 	bic.w	r3, r3, #4
 8002970:	6213      	str	r3, [r2, #32]
 8002972:	e01c      	b.n	80029ae <HAL_RCC_OscConfig+0x36e>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	2b05      	cmp	r3, #5
 800297a:	d10c      	bne.n	8002996 <HAL_RCC_OscConfig+0x356>
 800297c:	4b61      	ldr	r3, [pc, #388]	; (8002b04 <HAL_RCC_OscConfig+0x4c4>)
 800297e:	6a1b      	ldr	r3, [r3, #32]
 8002980:	4a60      	ldr	r2, [pc, #384]	; (8002b04 <HAL_RCC_OscConfig+0x4c4>)
 8002982:	f043 0304 	orr.w	r3, r3, #4
 8002986:	6213      	str	r3, [r2, #32]
 8002988:	4b5e      	ldr	r3, [pc, #376]	; (8002b04 <HAL_RCC_OscConfig+0x4c4>)
 800298a:	6a1b      	ldr	r3, [r3, #32]
 800298c:	4a5d      	ldr	r2, [pc, #372]	; (8002b04 <HAL_RCC_OscConfig+0x4c4>)
 800298e:	f043 0301 	orr.w	r3, r3, #1
 8002992:	6213      	str	r3, [r2, #32]
 8002994:	e00b      	b.n	80029ae <HAL_RCC_OscConfig+0x36e>
 8002996:	4b5b      	ldr	r3, [pc, #364]	; (8002b04 <HAL_RCC_OscConfig+0x4c4>)
 8002998:	6a1b      	ldr	r3, [r3, #32]
 800299a:	4a5a      	ldr	r2, [pc, #360]	; (8002b04 <HAL_RCC_OscConfig+0x4c4>)
 800299c:	f023 0301 	bic.w	r3, r3, #1
 80029a0:	6213      	str	r3, [r2, #32]
 80029a2:	4b58      	ldr	r3, [pc, #352]	; (8002b04 <HAL_RCC_OscConfig+0x4c4>)
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	4a57      	ldr	r2, [pc, #348]	; (8002b04 <HAL_RCC_OscConfig+0x4c4>)
 80029a8:	f023 0304 	bic.w	r3, r3, #4
 80029ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d015      	beq.n	80029e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029b6:	f7ff faa1 	bl	8001efc <HAL_GetTick>
 80029ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029bc:	e00a      	b.n	80029d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029be:	f7ff fa9d 	bl	8001efc <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d901      	bls.n	80029d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e0b1      	b.n	8002b38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d4:	4b4b      	ldr	r3, [pc, #300]	; (8002b04 <HAL_RCC_OscConfig+0x4c4>)
 80029d6:	6a1b      	ldr	r3, [r3, #32]
 80029d8:	f003 0302 	and.w	r3, r3, #2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d0ee      	beq.n	80029be <HAL_RCC_OscConfig+0x37e>
 80029e0:	e014      	b.n	8002a0c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029e2:	f7ff fa8b 	bl	8001efc <HAL_GetTick>
 80029e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029e8:	e00a      	b.n	8002a00 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ea:	f7ff fa87 	bl	8001efc <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d901      	bls.n	8002a00 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e09b      	b.n	8002b38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a00:	4b40      	ldr	r3, [pc, #256]	; (8002b04 <HAL_RCC_OscConfig+0x4c4>)
 8002a02:	6a1b      	ldr	r3, [r3, #32]
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1ee      	bne.n	80029ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a0c:	7dfb      	ldrb	r3, [r7, #23]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d105      	bne.n	8002a1e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a12:	4b3c      	ldr	r3, [pc, #240]	; (8002b04 <HAL_RCC_OscConfig+0x4c4>)
 8002a14:	69db      	ldr	r3, [r3, #28]
 8002a16:	4a3b      	ldr	r2, [pc, #236]	; (8002b04 <HAL_RCC_OscConfig+0x4c4>)
 8002a18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a1c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	69db      	ldr	r3, [r3, #28]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f000 8087 	beq.w	8002b36 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a28:	4b36      	ldr	r3, [pc, #216]	; (8002b04 <HAL_RCC_OscConfig+0x4c4>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f003 030c 	and.w	r3, r3, #12
 8002a30:	2b08      	cmp	r3, #8
 8002a32:	d061      	beq.n	8002af8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	69db      	ldr	r3, [r3, #28]
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d146      	bne.n	8002aca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a3c:	4b33      	ldr	r3, [pc, #204]	; (8002b0c <HAL_RCC_OscConfig+0x4cc>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a42:	f7ff fa5b 	bl	8001efc <HAL_GetTick>
 8002a46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a48:	e008      	b.n	8002a5c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a4a:	f7ff fa57 	bl	8001efc <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d901      	bls.n	8002a5c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e06d      	b.n	8002b38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a5c:	4b29      	ldr	r3, [pc, #164]	; (8002b04 <HAL_RCC_OscConfig+0x4c4>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d1f0      	bne.n	8002a4a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a1b      	ldr	r3, [r3, #32]
 8002a6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a70:	d108      	bne.n	8002a84 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a72:	4b24      	ldr	r3, [pc, #144]	; (8002b04 <HAL_RCC_OscConfig+0x4c4>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	4921      	ldr	r1, [pc, #132]	; (8002b04 <HAL_RCC_OscConfig+0x4c4>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a84:	4b1f      	ldr	r3, [pc, #124]	; (8002b04 <HAL_RCC_OscConfig+0x4c4>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a19      	ldr	r1, [r3, #32]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a94:	430b      	orrs	r3, r1
 8002a96:	491b      	ldr	r1, [pc, #108]	; (8002b04 <HAL_RCC_OscConfig+0x4c4>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a9c:	4b1b      	ldr	r3, [pc, #108]	; (8002b0c <HAL_RCC_OscConfig+0x4cc>)
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa2:	f7ff fa2b 	bl	8001efc <HAL_GetTick>
 8002aa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002aa8:	e008      	b.n	8002abc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aaa:	f7ff fa27 	bl	8001efc <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d901      	bls.n	8002abc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e03d      	b.n	8002b38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002abc:	4b11      	ldr	r3, [pc, #68]	; (8002b04 <HAL_RCC_OscConfig+0x4c4>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d0f0      	beq.n	8002aaa <HAL_RCC_OscConfig+0x46a>
 8002ac8:	e035      	b.n	8002b36 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aca:	4b10      	ldr	r3, [pc, #64]	; (8002b0c <HAL_RCC_OscConfig+0x4cc>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad0:	f7ff fa14 	bl	8001efc <HAL_GetTick>
 8002ad4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ad6:	e008      	b.n	8002aea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ad8:	f7ff fa10 	bl	8001efc <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e026      	b.n	8002b38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aea:	4b06      	ldr	r3, [pc, #24]	; (8002b04 <HAL_RCC_OscConfig+0x4c4>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d1f0      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x498>
 8002af6:	e01e      	b.n	8002b36 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	69db      	ldr	r3, [r3, #28]
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d107      	bne.n	8002b10 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e019      	b.n	8002b38 <HAL_RCC_OscConfig+0x4f8>
 8002b04:	40021000 	.word	0x40021000
 8002b08:	40007000 	.word	0x40007000
 8002b0c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b10:	4b0b      	ldr	r3, [pc, #44]	; (8002b40 <HAL_RCC_OscConfig+0x500>)
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a1b      	ldr	r3, [r3, #32]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d106      	bne.n	8002b32 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d001      	beq.n	8002b36 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e000      	b.n	8002b38 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3718      	adds	r7, #24
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	40021000 	.word	0x40021000

08002b44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d101      	bne.n	8002b58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e0d0      	b.n	8002cfa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b58:	4b6a      	ldr	r3, [pc, #424]	; (8002d04 <HAL_RCC_ClockConfig+0x1c0>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0307 	and.w	r3, r3, #7
 8002b60:	683a      	ldr	r2, [r7, #0]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d910      	bls.n	8002b88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b66:	4b67      	ldr	r3, [pc, #412]	; (8002d04 <HAL_RCC_ClockConfig+0x1c0>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f023 0207 	bic.w	r2, r3, #7
 8002b6e:	4965      	ldr	r1, [pc, #404]	; (8002d04 <HAL_RCC_ClockConfig+0x1c0>)
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b76:	4b63      	ldr	r3, [pc, #396]	; (8002d04 <HAL_RCC_ClockConfig+0x1c0>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0307 	and.w	r3, r3, #7
 8002b7e:	683a      	ldr	r2, [r7, #0]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d001      	beq.n	8002b88 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e0b8      	b.n	8002cfa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d020      	beq.n	8002bd6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0304 	and.w	r3, r3, #4
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d005      	beq.n	8002bac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ba0:	4b59      	ldr	r3, [pc, #356]	; (8002d08 <HAL_RCC_ClockConfig+0x1c4>)
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	4a58      	ldr	r2, [pc, #352]	; (8002d08 <HAL_RCC_ClockConfig+0x1c4>)
 8002ba6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002baa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0308 	and.w	r3, r3, #8
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d005      	beq.n	8002bc4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bb8:	4b53      	ldr	r3, [pc, #332]	; (8002d08 <HAL_RCC_ClockConfig+0x1c4>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	4a52      	ldr	r2, [pc, #328]	; (8002d08 <HAL_RCC_ClockConfig+0x1c4>)
 8002bbe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002bc2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bc4:	4b50      	ldr	r3, [pc, #320]	; (8002d08 <HAL_RCC_ClockConfig+0x1c4>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	494d      	ldr	r1, [pc, #308]	; (8002d08 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d040      	beq.n	8002c64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d107      	bne.n	8002bfa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bea:	4b47      	ldr	r3, [pc, #284]	; (8002d08 <HAL_RCC_ClockConfig+0x1c4>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d115      	bne.n	8002c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e07f      	b.n	8002cfa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d107      	bne.n	8002c12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c02:	4b41      	ldr	r3, [pc, #260]	; (8002d08 <HAL_RCC_ClockConfig+0x1c4>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d109      	bne.n	8002c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e073      	b.n	8002cfa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c12:	4b3d      	ldr	r3, [pc, #244]	; (8002d08 <HAL_RCC_ClockConfig+0x1c4>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d101      	bne.n	8002c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e06b      	b.n	8002cfa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c22:	4b39      	ldr	r3, [pc, #228]	; (8002d08 <HAL_RCC_ClockConfig+0x1c4>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f023 0203 	bic.w	r2, r3, #3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	4936      	ldr	r1, [pc, #216]	; (8002d08 <HAL_RCC_ClockConfig+0x1c4>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c34:	f7ff f962 	bl	8001efc <HAL_GetTick>
 8002c38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c3a:	e00a      	b.n	8002c52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c3c:	f7ff f95e 	bl	8001efc <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e053      	b.n	8002cfa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c52:	4b2d      	ldr	r3, [pc, #180]	; (8002d08 <HAL_RCC_ClockConfig+0x1c4>)
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f003 020c 	and.w	r2, r3, #12
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d1eb      	bne.n	8002c3c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c64:	4b27      	ldr	r3, [pc, #156]	; (8002d04 <HAL_RCC_ClockConfig+0x1c0>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0307 	and.w	r3, r3, #7
 8002c6c:	683a      	ldr	r2, [r7, #0]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d210      	bcs.n	8002c94 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c72:	4b24      	ldr	r3, [pc, #144]	; (8002d04 <HAL_RCC_ClockConfig+0x1c0>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f023 0207 	bic.w	r2, r3, #7
 8002c7a:	4922      	ldr	r1, [pc, #136]	; (8002d04 <HAL_RCC_ClockConfig+0x1c0>)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c82:	4b20      	ldr	r3, [pc, #128]	; (8002d04 <HAL_RCC_ClockConfig+0x1c0>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0307 	and.w	r3, r3, #7
 8002c8a:	683a      	ldr	r2, [r7, #0]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d001      	beq.n	8002c94 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e032      	b.n	8002cfa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0304 	and.w	r3, r3, #4
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d008      	beq.n	8002cb2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ca0:	4b19      	ldr	r3, [pc, #100]	; (8002d08 <HAL_RCC_ClockConfig+0x1c4>)
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	4916      	ldr	r1, [pc, #88]	; (8002d08 <HAL_RCC_ClockConfig+0x1c4>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0308 	and.w	r3, r3, #8
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d009      	beq.n	8002cd2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002cbe:	4b12      	ldr	r3, [pc, #72]	; (8002d08 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	490e      	ldr	r1, [pc, #56]	; (8002d08 <HAL_RCC_ClockConfig+0x1c4>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cd2:	f000 f821 	bl	8002d18 <HAL_RCC_GetSysClockFreq>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	4b0b      	ldr	r3, [pc, #44]	; (8002d08 <HAL_RCC_ClockConfig+0x1c4>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	091b      	lsrs	r3, r3, #4
 8002cde:	f003 030f 	and.w	r3, r3, #15
 8002ce2:	490a      	ldr	r1, [pc, #40]	; (8002d0c <HAL_RCC_ClockConfig+0x1c8>)
 8002ce4:	5ccb      	ldrb	r3, [r1, r3]
 8002ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8002cea:	4a09      	ldr	r2, [pc, #36]	; (8002d10 <HAL_RCC_ClockConfig+0x1cc>)
 8002cec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002cee:	4b09      	ldr	r3, [pc, #36]	; (8002d14 <HAL_RCC_ClockConfig+0x1d0>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7ff f8c0 	bl	8001e78 <HAL_InitTick>

  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3710      	adds	r7, #16
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	40022000 	.word	0x40022000
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	0800634c 	.word	0x0800634c
 8002d10:	20000004 	.word	0x20000004
 8002d14:	20000008 	.word	0x20000008

08002d18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b087      	sub	sp, #28
 8002d1c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	60fb      	str	r3, [r7, #12]
 8002d22:	2300      	movs	r3, #0
 8002d24:	60bb      	str	r3, [r7, #8]
 8002d26:	2300      	movs	r3, #0
 8002d28:	617b      	str	r3, [r7, #20]
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d32:	4b1e      	ldr	r3, [pc, #120]	; (8002dac <HAL_RCC_GetSysClockFreq+0x94>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f003 030c 	and.w	r3, r3, #12
 8002d3e:	2b04      	cmp	r3, #4
 8002d40:	d002      	beq.n	8002d48 <HAL_RCC_GetSysClockFreq+0x30>
 8002d42:	2b08      	cmp	r3, #8
 8002d44:	d003      	beq.n	8002d4e <HAL_RCC_GetSysClockFreq+0x36>
 8002d46:	e027      	b.n	8002d98 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d48:	4b19      	ldr	r3, [pc, #100]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d4a:	613b      	str	r3, [r7, #16]
      break;
 8002d4c:	e027      	b.n	8002d9e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	0c9b      	lsrs	r3, r3, #18
 8002d52:	f003 030f 	and.w	r3, r3, #15
 8002d56:	4a17      	ldr	r2, [pc, #92]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002d58:	5cd3      	ldrb	r3, [r2, r3]
 8002d5a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d010      	beq.n	8002d88 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d66:	4b11      	ldr	r3, [pc, #68]	; (8002dac <HAL_RCC_GetSysClockFreq+0x94>)
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	0c5b      	lsrs	r3, r3, #17
 8002d6c:	f003 0301 	and.w	r3, r3, #1
 8002d70:	4a11      	ldr	r2, [pc, #68]	; (8002db8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002d72:	5cd3      	ldrb	r3, [r2, r3]
 8002d74:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a0d      	ldr	r2, [pc, #52]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d7a:	fb03 f202 	mul.w	r2, r3, r2
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d84:	617b      	str	r3, [r7, #20]
 8002d86:	e004      	b.n	8002d92 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4a0c      	ldr	r2, [pc, #48]	; (8002dbc <HAL_RCC_GetSysClockFreq+0xa4>)
 8002d8c:	fb02 f303 	mul.w	r3, r2, r3
 8002d90:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	613b      	str	r3, [r7, #16]
      break;
 8002d96:	e002      	b.n	8002d9e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d98:	4b05      	ldr	r3, [pc, #20]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d9a:	613b      	str	r3, [r7, #16]
      break;
 8002d9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d9e:	693b      	ldr	r3, [r7, #16]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	371c      	adds	r7, #28
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bc80      	pop	{r7}
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	40021000 	.word	0x40021000
 8002db0:	007a1200 	.word	0x007a1200
 8002db4:	08006364 	.word	0x08006364
 8002db8:	08006374 	.word	0x08006374
 8002dbc:	003d0900 	.word	0x003d0900

08002dc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dc4:	4b02      	ldr	r3, [pc, #8]	; (8002dd0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bc80      	pop	{r7}
 8002dce:	4770      	bx	lr
 8002dd0:	20000004 	.word	0x20000004

08002dd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002dd8:	f7ff fff2 	bl	8002dc0 <HAL_RCC_GetHCLKFreq>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	4b05      	ldr	r3, [pc, #20]	; (8002df4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	0a1b      	lsrs	r3, r3, #8
 8002de4:	f003 0307 	and.w	r3, r3, #7
 8002de8:	4903      	ldr	r1, [pc, #12]	; (8002df8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dea:	5ccb      	ldrb	r3, [r1, r3]
 8002dec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	40021000 	.word	0x40021000
 8002df8:	0800635c 	.word	0x0800635c

08002dfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e00:	f7ff ffde 	bl	8002dc0 <HAL_RCC_GetHCLKFreq>
 8002e04:	4602      	mov	r2, r0
 8002e06:	4b05      	ldr	r3, [pc, #20]	; (8002e1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	0adb      	lsrs	r3, r3, #11
 8002e0c:	f003 0307 	and.w	r3, r3, #7
 8002e10:	4903      	ldr	r1, [pc, #12]	; (8002e20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e12:	5ccb      	ldrb	r3, [r1, r3]
 8002e14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	40021000 	.word	0x40021000
 8002e20:	0800635c 	.word	0x0800635c

08002e24 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b085      	sub	sp, #20
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e2c:	4b0a      	ldr	r3, [pc, #40]	; (8002e58 <RCC_Delay+0x34>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a0a      	ldr	r2, [pc, #40]	; (8002e5c <RCC_Delay+0x38>)
 8002e32:	fba2 2303 	umull	r2, r3, r2, r3
 8002e36:	0a5b      	lsrs	r3, r3, #9
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	fb02 f303 	mul.w	r3, r2, r3
 8002e3e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e40:	bf00      	nop
  }
  while (Delay --);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	1e5a      	subs	r2, r3, #1
 8002e46:	60fa      	str	r2, [r7, #12]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d1f9      	bne.n	8002e40 <RCC_Delay+0x1c>
}
 8002e4c:	bf00      	nop
 8002e4e:	bf00      	nop
 8002e50:	3714      	adds	r7, #20
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bc80      	pop	{r7}
 8002e56:	4770      	bx	lr
 8002e58:	20000004 	.word	0x20000004
 8002e5c:	10624dd3 	.word	0x10624dd3

08002e60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d101      	bne.n	8002e72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e041      	b.n	8002ef6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d106      	bne.n	8002e8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f7fe fb0a 	bl	80014a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2202      	movs	r2, #2
 8002e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	3304      	adds	r3, #4
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	4610      	mov	r0, r2
 8002ea0:	f000 fe6c 	bl	8003b7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
	...

08002f00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b085      	sub	sp, #20
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d001      	beq.n	8002f18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e03a      	b.n	8002f8e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2202      	movs	r2, #2
 8002f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68da      	ldr	r2, [r3, #12]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f042 0201 	orr.w	r2, r2, #1
 8002f2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a18      	ldr	r2, [pc, #96]	; (8002f98 <HAL_TIM_Base_Start_IT+0x98>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d00e      	beq.n	8002f58 <HAL_TIM_Base_Start_IT+0x58>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f42:	d009      	beq.n	8002f58 <HAL_TIM_Base_Start_IT+0x58>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a14      	ldr	r2, [pc, #80]	; (8002f9c <HAL_TIM_Base_Start_IT+0x9c>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d004      	beq.n	8002f58 <HAL_TIM_Base_Start_IT+0x58>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a13      	ldr	r2, [pc, #76]	; (8002fa0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d111      	bne.n	8002f7c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f003 0307 	and.w	r3, r3, #7
 8002f62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2b06      	cmp	r3, #6
 8002f68:	d010      	beq.n	8002f8c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f042 0201 	orr.w	r2, r2, #1
 8002f78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f7a:	e007      	b.n	8002f8c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f042 0201 	orr.w	r2, r2, #1
 8002f8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3714      	adds	r7, #20
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bc80      	pop	{r7}
 8002f96:	4770      	bx	lr
 8002f98:	40012c00 	.word	0x40012c00
 8002f9c:	40000400 	.word	0x40000400
 8002fa0:	40000800 	.word	0x40000800

08002fa4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e041      	b.n	800303a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d106      	bne.n	8002fd0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 f839 	bl	8003042 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2202      	movs	r2, #2
 8002fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	3304      	adds	r3, #4
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	4610      	mov	r0, r2
 8002fe4:	f000 fdca 	bl	8003b7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3708      	adds	r7, #8
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003042:	b480      	push	{r7}
 8003044:	b083      	sub	sp, #12
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800304a:	bf00      	nop
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	bc80      	pop	{r7}
 8003052:	4770      	bx	lr

08003054 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d109      	bne.n	8003078 <HAL_TIM_PWM_Start+0x24>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800306a:	b2db      	uxtb	r3, r3
 800306c:	2b01      	cmp	r3, #1
 800306e:	bf14      	ite	ne
 8003070:	2301      	movne	r3, #1
 8003072:	2300      	moveq	r3, #0
 8003074:	b2db      	uxtb	r3, r3
 8003076:	e022      	b.n	80030be <HAL_TIM_PWM_Start+0x6a>
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	2b04      	cmp	r3, #4
 800307c:	d109      	bne.n	8003092 <HAL_TIM_PWM_Start+0x3e>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b01      	cmp	r3, #1
 8003088:	bf14      	ite	ne
 800308a:	2301      	movne	r3, #1
 800308c:	2300      	moveq	r3, #0
 800308e:	b2db      	uxtb	r3, r3
 8003090:	e015      	b.n	80030be <HAL_TIM_PWM_Start+0x6a>
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	2b08      	cmp	r3, #8
 8003096:	d109      	bne.n	80030ac <HAL_TIM_PWM_Start+0x58>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	bf14      	ite	ne
 80030a4:	2301      	movne	r3, #1
 80030a6:	2300      	moveq	r3, #0
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	e008      	b.n	80030be <HAL_TIM_PWM_Start+0x6a>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	bf14      	ite	ne
 80030b8:	2301      	movne	r3, #1
 80030ba:	2300      	moveq	r3, #0
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e05e      	b.n	8003184 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d104      	bne.n	80030d6 <HAL_TIM_PWM_Start+0x82>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2202      	movs	r2, #2
 80030d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030d4:	e013      	b.n	80030fe <HAL_TIM_PWM_Start+0xaa>
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	2b04      	cmp	r3, #4
 80030da:	d104      	bne.n	80030e6 <HAL_TIM_PWM_Start+0x92>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2202      	movs	r2, #2
 80030e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030e4:	e00b      	b.n	80030fe <HAL_TIM_PWM_Start+0xaa>
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	2b08      	cmp	r3, #8
 80030ea:	d104      	bne.n	80030f6 <HAL_TIM_PWM_Start+0xa2>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2202      	movs	r2, #2
 80030f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030f4:	e003      	b.n	80030fe <HAL_TIM_PWM_Start+0xaa>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2202      	movs	r2, #2
 80030fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2201      	movs	r2, #1
 8003104:	6839      	ldr	r1, [r7, #0]
 8003106:	4618      	mov	r0, r3
 8003108:	f001 f8c5 	bl	8004296 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a1e      	ldr	r2, [pc, #120]	; (800318c <HAL_TIM_PWM_Start+0x138>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d107      	bne.n	8003126 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003124:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a18      	ldr	r2, [pc, #96]	; (800318c <HAL_TIM_PWM_Start+0x138>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d00e      	beq.n	800314e <HAL_TIM_PWM_Start+0xfa>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003138:	d009      	beq.n	800314e <HAL_TIM_PWM_Start+0xfa>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a14      	ldr	r2, [pc, #80]	; (8003190 <HAL_TIM_PWM_Start+0x13c>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d004      	beq.n	800314e <HAL_TIM_PWM_Start+0xfa>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a12      	ldr	r2, [pc, #72]	; (8003194 <HAL_TIM_PWM_Start+0x140>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d111      	bne.n	8003172 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f003 0307 	and.w	r3, r3, #7
 8003158:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2b06      	cmp	r3, #6
 800315e:	d010      	beq.n	8003182 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f042 0201 	orr.w	r2, r2, #1
 800316e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003170:	e007      	b.n	8003182 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f042 0201 	orr.w	r2, r2, #1
 8003180:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3710      	adds	r7, #16
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	40012c00 	.word	0x40012c00
 8003190:	40000400 	.word	0x40000400
 8003194:	40000800 	.word	0x40000800

08003198 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e041      	b.n	800322e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d106      	bne.n	80031c4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 f839 	bl	8003236 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2202      	movs	r2, #2
 80031c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	3304      	adds	r3, #4
 80031d4:	4619      	mov	r1, r3
 80031d6:	4610      	mov	r0, r2
 80031d8:	f000 fcd0 	bl	8003b7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}

08003236 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003236:	b480      	push	{r7}
 8003238:	b083      	sub	sp, #12
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800323e:	bf00      	nop
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	bc80      	pop	{r7}
 8003246:	4770      	bx	lr

08003248 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003252:	2300      	movs	r3, #0
 8003254:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d104      	bne.n	8003266 <HAL_TIM_IC_Start_IT+0x1e>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003262:	b2db      	uxtb	r3, r3
 8003264:	e013      	b.n	800328e <HAL_TIM_IC_Start_IT+0x46>
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	2b04      	cmp	r3, #4
 800326a:	d104      	bne.n	8003276 <HAL_TIM_IC_Start_IT+0x2e>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003272:	b2db      	uxtb	r3, r3
 8003274:	e00b      	b.n	800328e <HAL_TIM_IC_Start_IT+0x46>
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	2b08      	cmp	r3, #8
 800327a:	d104      	bne.n	8003286 <HAL_TIM_IC_Start_IT+0x3e>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003282:	b2db      	uxtb	r3, r3
 8003284:	e003      	b.n	800328e <HAL_TIM_IC_Start_IT+0x46>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800328c:	b2db      	uxtb	r3, r3
 800328e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d104      	bne.n	80032a0 <HAL_TIM_IC_Start_IT+0x58>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800329c:	b2db      	uxtb	r3, r3
 800329e:	e013      	b.n	80032c8 <HAL_TIM_IC_Start_IT+0x80>
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	2b04      	cmp	r3, #4
 80032a4:	d104      	bne.n	80032b0 <HAL_TIM_IC_Start_IT+0x68>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	e00b      	b.n	80032c8 <HAL_TIM_IC_Start_IT+0x80>
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	2b08      	cmp	r3, #8
 80032b4:	d104      	bne.n	80032c0 <HAL_TIM_IC_Start_IT+0x78>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	e003      	b.n	80032c8 <HAL_TIM_IC_Start_IT+0x80>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80032ca:	7bbb      	ldrb	r3, [r7, #14]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d102      	bne.n	80032d6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80032d0:	7b7b      	ldrb	r3, [r7, #13]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d001      	beq.n	80032da <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e0b8      	b.n	800344c <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d104      	bne.n	80032ea <HAL_TIM_IC_Start_IT+0xa2>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2202      	movs	r2, #2
 80032e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032e8:	e013      	b.n	8003312 <HAL_TIM_IC_Start_IT+0xca>
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	2b04      	cmp	r3, #4
 80032ee:	d104      	bne.n	80032fa <HAL_TIM_IC_Start_IT+0xb2>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2202      	movs	r2, #2
 80032f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032f8:	e00b      	b.n	8003312 <HAL_TIM_IC_Start_IT+0xca>
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	2b08      	cmp	r3, #8
 80032fe:	d104      	bne.n	800330a <HAL_TIM_IC_Start_IT+0xc2>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2202      	movs	r2, #2
 8003304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003308:	e003      	b.n	8003312 <HAL_TIM_IC_Start_IT+0xca>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2202      	movs	r2, #2
 800330e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d104      	bne.n	8003322 <HAL_TIM_IC_Start_IT+0xda>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2202      	movs	r2, #2
 800331c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003320:	e013      	b.n	800334a <HAL_TIM_IC_Start_IT+0x102>
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	2b04      	cmp	r3, #4
 8003326:	d104      	bne.n	8003332 <HAL_TIM_IC_Start_IT+0xea>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2202      	movs	r2, #2
 800332c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003330:	e00b      	b.n	800334a <HAL_TIM_IC_Start_IT+0x102>
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	2b08      	cmp	r3, #8
 8003336:	d104      	bne.n	8003342 <HAL_TIM_IC_Start_IT+0xfa>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2202      	movs	r2, #2
 800333c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003340:	e003      	b.n	800334a <HAL_TIM_IC_Start_IT+0x102>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2202      	movs	r2, #2
 8003346:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	2b0c      	cmp	r3, #12
 800334e:	d841      	bhi.n	80033d4 <HAL_TIM_IC_Start_IT+0x18c>
 8003350:	a201      	add	r2, pc, #4	; (adr r2, 8003358 <HAL_TIM_IC_Start_IT+0x110>)
 8003352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003356:	bf00      	nop
 8003358:	0800338d 	.word	0x0800338d
 800335c:	080033d5 	.word	0x080033d5
 8003360:	080033d5 	.word	0x080033d5
 8003364:	080033d5 	.word	0x080033d5
 8003368:	0800339f 	.word	0x0800339f
 800336c:	080033d5 	.word	0x080033d5
 8003370:	080033d5 	.word	0x080033d5
 8003374:	080033d5 	.word	0x080033d5
 8003378:	080033b1 	.word	0x080033b1
 800337c:	080033d5 	.word	0x080033d5
 8003380:	080033d5 	.word	0x080033d5
 8003384:	080033d5 	.word	0x080033d5
 8003388:	080033c3 	.word	0x080033c3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68da      	ldr	r2, [r3, #12]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f042 0202 	orr.w	r2, r2, #2
 800339a:	60da      	str	r2, [r3, #12]
      break;
 800339c:	e01d      	b.n	80033da <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68da      	ldr	r2, [r3, #12]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f042 0204 	orr.w	r2, r2, #4
 80033ac:	60da      	str	r2, [r3, #12]
      break;
 80033ae:	e014      	b.n	80033da <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68da      	ldr	r2, [r3, #12]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f042 0208 	orr.w	r2, r2, #8
 80033be:	60da      	str	r2, [r3, #12]
      break;
 80033c0:	e00b      	b.n	80033da <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	68da      	ldr	r2, [r3, #12]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f042 0210 	orr.w	r2, r2, #16
 80033d0:	60da      	str	r2, [r3, #12]
      break;
 80033d2:	e002      	b.n	80033da <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	73fb      	strb	r3, [r7, #15]
      break;
 80033d8:	bf00      	nop
  }

  if (status == HAL_OK)
 80033da:	7bfb      	ldrb	r3, [r7, #15]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d134      	bne.n	800344a <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2201      	movs	r2, #1
 80033e6:	6839      	ldr	r1, [r7, #0]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f000 ff54 	bl	8004296 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a18      	ldr	r2, [pc, #96]	; (8003454 <HAL_TIM_IC_Start_IT+0x20c>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d00e      	beq.n	8003416 <HAL_TIM_IC_Start_IT+0x1ce>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003400:	d009      	beq.n	8003416 <HAL_TIM_IC_Start_IT+0x1ce>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a14      	ldr	r2, [pc, #80]	; (8003458 <HAL_TIM_IC_Start_IT+0x210>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d004      	beq.n	8003416 <HAL_TIM_IC_Start_IT+0x1ce>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a12      	ldr	r2, [pc, #72]	; (800345c <HAL_TIM_IC_Start_IT+0x214>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d111      	bne.n	800343a <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f003 0307 	and.w	r3, r3, #7
 8003420:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	2b06      	cmp	r3, #6
 8003426:	d010      	beq.n	800344a <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f042 0201 	orr.w	r2, r2, #1
 8003436:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003438:	e007      	b.n	800344a <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f042 0201 	orr.w	r2, r2, #1
 8003448:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800344a:	7bfb      	ldrb	r3, [r7, #15]
}
 800344c:	4618      	mov	r0, r3
 800344e:	3710      	adds	r7, #16
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	40012c00 	.word	0x40012c00
 8003458:	40000400 	.word	0x40000400
 800345c:	40000800 	.word	0x40000800

08003460 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b02      	cmp	r3, #2
 8003474:	d122      	bne.n	80034bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	f003 0302 	and.w	r3, r3, #2
 8003480:	2b02      	cmp	r3, #2
 8003482:	d11b      	bne.n	80034bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f06f 0202 	mvn.w	r2, #2
 800348c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2201      	movs	r2, #1
 8003492:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	f003 0303 	and.w	r3, r3, #3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d003      	beq.n	80034aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f7fe fa88 	bl	80019b8 <HAL_TIM_IC_CaptureCallback>
 80034a8:	e005      	b.n	80034b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 fb4a 	bl	8003b44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f000 fb50 	bl	8003b56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	f003 0304 	and.w	r3, r3, #4
 80034c6:	2b04      	cmp	r3, #4
 80034c8:	d122      	bne.n	8003510 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	f003 0304 	and.w	r3, r3, #4
 80034d4:	2b04      	cmp	r3, #4
 80034d6:	d11b      	bne.n	8003510 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f06f 0204 	mvn.w	r2, #4
 80034e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2202      	movs	r2, #2
 80034e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d003      	beq.n	80034fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f7fe fa5e 	bl	80019b8 <HAL_TIM_IC_CaptureCallback>
 80034fc:	e005      	b.n	800350a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 fb20 	bl	8003b44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 fb26 	bl	8003b56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	f003 0308 	and.w	r3, r3, #8
 800351a:	2b08      	cmp	r3, #8
 800351c:	d122      	bne.n	8003564 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	f003 0308 	and.w	r3, r3, #8
 8003528:	2b08      	cmp	r3, #8
 800352a:	d11b      	bne.n	8003564 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f06f 0208 	mvn.w	r2, #8
 8003534:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2204      	movs	r2, #4
 800353a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	69db      	ldr	r3, [r3, #28]
 8003542:	f003 0303 	and.w	r3, r3, #3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d003      	beq.n	8003552 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f7fe fa34 	bl	80019b8 <HAL_TIM_IC_CaptureCallback>
 8003550:	e005      	b.n	800355e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 faf6 	bl	8003b44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f000 fafc 	bl	8003b56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	f003 0310 	and.w	r3, r3, #16
 800356e:	2b10      	cmp	r3, #16
 8003570:	d122      	bne.n	80035b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	f003 0310 	and.w	r3, r3, #16
 800357c:	2b10      	cmp	r3, #16
 800357e:	d11b      	bne.n	80035b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f06f 0210 	mvn.w	r2, #16
 8003588:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2208      	movs	r2, #8
 800358e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	69db      	ldr	r3, [r3, #28]
 8003596:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800359a:	2b00      	cmp	r3, #0
 800359c:	d003      	beq.n	80035a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f7fe fa0a 	bl	80019b8 <HAL_TIM_IC_CaptureCallback>
 80035a4:	e005      	b.n	80035b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 facc 	bl	8003b44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f000 fad2 	bl	8003b56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d10e      	bne.n	80035e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d107      	bne.n	80035e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f06f 0201 	mvn.w	r2, #1
 80035dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f7fd fa48 	bl	8000a74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ee:	2b80      	cmp	r3, #128	; 0x80
 80035f0:	d10e      	bne.n	8003610 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035fc:	2b80      	cmp	r3, #128	; 0x80
 80035fe:	d107      	bne.n	8003610 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 fecf 	bl	80043ae <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800361a:	2b40      	cmp	r3, #64	; 0x40
 800361c:	d10e      	bne.n	800363c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003628:	2b40      	cmp	r3, #64	; 0x40
 800362a:	d107      	bne.n	800363c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003634:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 fa96 	bl	8003b68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	f003 0320 	and.w	r3, r3, #32
 8003646:	2b20      	cmp	r3, #32
 8003648:	d10e      	bne.n	8003668 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	f003 0320 	and.w	r3, r3, #32
 8003654:	2b20      	cmp	r3, #32
 8003656:	d107      	bne.n	8003668 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f06f 0220 	mvn.w	r2, #32
 8003660:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 fe9a 	bl	800439c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003668:	bf00      	nop
 800366a:	3708      	adds	r7, #8
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800367c:	2300      	movs	r3, #0
 800367e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003686:	2b01      	cmp	r3, #1
 8003688:	d101      	bne.n	800368e <HAL_TIM_IC_ConfigChannel+0x1e>
 800368a:	2302      	movs	r3, #2
 800368c:	e088      	b.n	80037a0 <HAL_TIM_IC_ConfigChannel+0x130>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2201      	movs	r2, #1
 8003692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d11b      	bne.n	80036d4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80036ac:	f000 fc50 	bl	8003f50 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	699a      	ldr	r2, [r3, #24]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f022 020c 	bic.w	r2, r2, #12
 80036be:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	6999      	ldr	r1, [r3, #24]
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	689a      	ldr	r2, [r3, #8]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	430a      	orrs	r2, r1
 80036d0:	619a      	str	r2, [r3, #24]
 80036d2:	e060      	b.n	8003796 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b04      	cmp	r3, #4
 80036d8:	d11c      	bne.n	8003714 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80036ea:	f000 fcb9 	bl	8004060 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	699a      	ldr	r2, [r3, #24]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80036fc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	6999      	ldr	r1, [r3, #24]
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	021a      	lsls	r2, r3, #8
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	430a      	orrs	r2, r1
 8003710:	619a      	str	r2, [r3, #24]
 8003712:	e040      	b.n	8003796 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2b08      	cmp	r3, #8
 8003718:	d11b      	bne.n	8003752 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800372a:	f000 fd04 	bl	8004136 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	69da      	ldr	r2, [r3, #28]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f022 020c 	bic.w	r2, r2, #12
 800373c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	69d9      	ldr	r1, [r3, #28]
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	689a      	ldr	r2, [r3, #8]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	430a      	orrs	r2, r1
 800374e:	61da      	str	r2, [r3, #28]
 8003750:	e021      	b.n	8003796 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2b0c      	cmp	r3, #12
 8003756:	d11c      	bne.n	8003792 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003768:	f000 fd20 	bl	80041ac <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	69da      	ldr	r2, [r3, #28]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800377a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	69d9      	ldr	r1, [r3, #28]
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	021a      	lsls	r2, r3, #8
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	430a      	orrs	r2, r1
 800378e:	61da      	str	r2, [r3, #28]
 8003790:	e001      	b.n	8003796 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800379e:	7dfb      	ldrb	r3, [r7, #23]
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3718      	adds	r7, #24
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b086      	sub	sp, #24
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037b4:	2300      	movs	r3, #0
 80037b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d101      	bne.n	80037c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80037c2:	2302      	movs	r3, #2
 80037c4:	e0ae      	b.n	8003924 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2201      	movs	r2, #1
 80037ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2b0c      	cmp	r3, #12
 80037d2:	f200 809f 	bhi.w	8003914 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80037d6:	a201      	add	r2, pc, #4	; (adr r2, 80037dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80037d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037dc:	08003811 	.word	0x08003811
 80037e0:	08003915 	.word	0x08003915
 80037e4:	08003915 	.word	0x08003915
 80037e8:	08003915 	.word	0x08003915
 80037ec:	08003851 	.word	0x08003851
 80037f0:	08003915 	.word	0x08003915
 80037f4:	08003915 	.word	0x08003915
 80037f8:	08003915 	.word	0x08003915
 80037fc:	08003893 	.word	0x08003893
 8003800:	08003915 	.word	0x08003915
 8003804:	08003915 	.word	0x08003915
 8003808:	08003915 	.word	0x08003915
 800380c:	080038d3 	.word	0x080038d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68b9      	ldr	r1, [r7, #8]
 8003816:	4618      	mov	r0, r3
 8003818:	f000 fa12 	bl	8003c40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	699a      	ldr	r2, [r3, #24]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f042 0208 	orr.w	r2, r2, #8
 800382a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	699a      	ldr	r2, [r3, #24]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f022 0204 	bic.w	r2, r2, #4
 800383a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	6999      	ldr	r1, [r3, #24]
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	691a      	ldr	r2, [r3, #16]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	430a      	orrs	r2, r1
 800384c:	619a      	str	r2, [r3, #24]
      break;
 800384e:	e064      	b.n	800391a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68b9      	ldr	r1, [r7, #8]
 8003856:	4618      	mov	r0, r3
 8003858:	f000 fa58 	bl	8003d0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	699a      	ldr	r2, [r3, #24]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800386a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	699a      	ldr	r2, [r3, #24]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800387a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	6999      	ldr	r1, [r3, #24]
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	021a      	lsls	r2, r3, #8
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	430a      	orrs	r2, r1
 800388e:	619a      	str	r2, [r3, #24]
      break;
 8003890:	e043      	b.n	800391a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68b9      	ldr	r1, [r7, #8]
 8003898:	4618      	mov	r0, r3
 800389a:	f000 faa1 	bl	8003de0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	69da      	ldr	r2, [r3, #28]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f042 0208 	orr.w	r2, r2, #8
 80038ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	69da      	ldr	r2, [r3, #28]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 0204 	bic.w	r2, r2, #4
 80038bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	69d9      	ldr	r1, [r3, #28]
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	691a      	ldr	r2, [r3, #16]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	430a      	orrs	r2, r1
 80038ce:	61da      	str	r2, [r3, #28]
      break;
 80038d0:	e023      	b.n	800391a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	68b9      	ldr	r1, [r7, #8]
 80038d8:	4618      	mov	r0, r3
 80038da:	f000 faeb 	bl	8003eb4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	69da      	ldr	r2, [r3, #28]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	69da      	ldr	r2, [r3, #28]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	69d9      	ldr	r1, [r3, #28]
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	021a      	lsls	r2, r3, #8
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	430a      	orrs	r2, r1
 8003910:	61da      	str	r2, [r3, #28]
      break;
 8003912:	e002      	b.n	800391a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	75fb      	strb	r3, [r7, #23]
      break;
 8003918:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003922:	7dfb      	ldrb	r3, [r7, #23]
}
 8003924:	4618      	mov	r0, r3
 8003926:	3718      	adds	r7, #24
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003936:	2300      	movs	r3, #0
 8003938:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003940:	2b01      	cmp	r3, #1
 8003942:	d101      	bne.n	8003948 <HAL_TIM_ConfigClockSource+0x1c>
 8003944:	2302      	movs	r3, #2
 8003946:	e0b4      	b.n	8003ab2 <HAL_TIM_ConfigClockSource+0x186>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2202      	movs	r2, #2
 8003954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003966:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800396e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68ba      	ldr	r2, [r7, #8]
 8003976:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003980:	d03e      	beq.n	8003a00 <HAL_TIM_ConfigClockSource+0xd4>
 8003982:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003986:	f200 8087 	bhi.w	8003a98 <HAL_TIM_ConfigClockSource+0x16c>
 800398a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800398e:	f000 8086 	beq.w	8003a9e <HAL_TIM_ConfigClockSource+0x172>
 8003992:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003996:	d87f      	bhi.n	8003a98 <HAL_TIM_ConfigClockSource+0x16c>
 8003998:	2b70      	cmp	r3, #112	; 0x70
 800399a:	d01a      	beq.n	80039d2 <HAL_TIM_ConfigClockSource+0xa6>
 800399c:	2b70      	cmp	r3, #112	; 0x70
 800399e:	d87b      	bhi.n	8003a98 <HAL_TIM_ConfigClockSource+0x16c>
 80039a0:	2b60      	cmp	r3, #96	; 0x60
 80039a2:	d050      	beq.n	8003a46 <HAL_TIM_ConfigClockSource+0x11a>
 80039a4:	2b60      	cmp	r3, #96	; 0x60
 80039a6:	d877      	bhi.n	8003a98 <HAL_TIM_ConfigClockSource+0x16c>
 80039a8:	2b50      	cmp	r3, #80	; 0x50
 80039aa:	d03c      	beq.n	8003a26 <HAL_TIM_ConfigClockSource+0xfa>
 80039ac:	2b50      	cmp	r3, #80	; 0x50
 80039ae:	d873      	bhi.n	8003a98 <HAL_TIM_ConfigClockSource+0x16c>
 80039b0:	2b40      	cmp	r3, #64	; 0x40
 80039b2:	d058      	beq.n	8003a66 <HAL_TIM_ConfigClockSource+0x13a>
 80039b4:	2b40      	cmp	r3, #64	; 0x40
 80039b6:	d86f      	bhi.n	8003a98 <HAL_TIM_ConfigClockSource+0x16c>
 80039b8:	2b30      	cmp	r3, #48	; 0x30
 80039ba:	d064      	beq.n	8003a86 <HAL_TIM_ConfigClockSource+0x15a>
 80039bc:	2b30      	cmp	r3, #48	; 0x30
 80039be:	d86b      	bhi.n	8003a98 <HAL_TIM_ConfigClockSource+0x16c>
 80039c0:	2b20      	cmp	r3, #32
 80039c2:	d060      	beq.n	8003a86 <HAL_TIM_ConfigClockSource+0x15a>
 80039c4:	2b20      	cmp	r3, #32
 80039c6:	d867      	bhi.n	8003a98 <HAL_TIM_ConfigClockSource+0x16c>
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d05c      	beq.n	8003a86 <HAL_TIM_ConfigClockSource+0x15a>
 80039cc:	2b10      	cmp	r3, #16
 80039ce:	d05a      	beq.n	8003a86 <HAL_TIM_ConfigClockSource+0x15a>
 80039d0:	e062      	b.n	8003a98 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80039e2:	f000 fc39 	bl	8004258 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80039f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68ba      	ldr	r2, [r7, #8]
 80039fc:	609a      	str	r2, [r3, #8]
      break;
 80039fe:	e04f      	b.n	8003aa0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a10:	f000 fc22 	bl	8004258 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	689a      	ldr	r2, [r3, #8]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a22:	609a      	str	r2, [r3, #8]
      break;
 8003a24:	e03c      	b.n	8003aa0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a32:	461a      	mov	r2, r3
 8003a34:	f000 fae6 	bl	8004004 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2150      	movs	r1, #80	; 0x50
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f000 fbf0 	bl	8004224 <TIM_ITRx_SetConfig>
      break;
 8003a44:	e02c      	b.n	8003aa0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a52:	461a      	mov	r2, r3
 8003a54:	f000 fb40 	bl	80040d8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2160      	movs	r1, #96	; 0x60
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f000 fbe0 	bl	8004224 <TIM_ITRx_SetConfig>
      break;
 8003a64:	e01c      	b.n	8003aa0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a72:	461a      	mov	r2, r3
 8003a74:	f000 fac6 	bl	8004004 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2140      	movs	r1, #64	; 0x40
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f000 fbd0 	bl	8004224 <TIM_ITRx_SetConfig>
      break;
 8003a84:	e00c      	b.n	8003aa0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4619      	mov	r1, r3
 8003a90:	4610      	mov	r0, r2
 8003a92:	f000 fbc7 	bl	8004224 <TIM_ITRx_SetConfig>
      break;
 8003a96:	e003      	b.n	8003aa0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a9c:	e000      	b.n	8003aa0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003a9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3710      	adds	r7, #16
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
	...

08003abc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	2b0c      	cmp	r3, #12
 8003ace:	d831      	bhi.n	8003b34 <HAL_TIM_ReadCapturedValue+0x78>
 8003ad0:	a201      	add	r2, pc, #4	; (adr r2, 8003ad8 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ad6:	bf00      	nop
 8003ad8:	08003b0d 	.word	0x08003b0d
 8003adc:	08003b35 	.word	0x08003b35
 8003ae0:	08003b35 	.word	0x08003b35
 8003ae4:	08003b35 	.word	0x08003b35
 8003ae8:	08003b17 	.word	0x08003b17
 8003aec:	08003b35 	.word	0x08003b35
 8003af0:	08003b35 	.word	0x08003b35
 8003af4:	08003b35 	.word	0x08003b35
 8003af8:	08003b21 	.word	0x08003b21
 8003afc:	08003b35 	.word	0x08003b35
 8003b00:	08003b35 	.word	0x08003b35
 8003b04:	08003b35 	.word	0x08003b35
 8003b08:	08003b2b 	.word	0x08003b2b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b12:	60fb      	str	r3, [r7, #12]

      break;
 8003b14:	e00f      	b.n	8003b36 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b1c:	60fb      	str	r3, [r7, #12]

      break;
 8003b1e:	e00a      	b.n	8003b36 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b26:	60fb      	str	r3, [r7, #12]

      break;
 8003b28:	e005      	b.n	8003b36 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b30:	60fb      	str	r3, [r7, #12]

      break;
 8003b32:	e000      	b.n	8003b36 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003b34:	bf00      	nop
  }

  return tmpreg;
 8003b36:	68fb      	ldr	r3, [r7, #12]
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3714      	adds	r7, #20
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bc80      	pop	{r7}
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop

08003b44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b4c:	bf00      	nop
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bc80      	pop	{r7}
 8003b54:	4770      	bx	lr

08003b56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b56:	b480      	push	{r7}
 8003b58:	b083      	sub	sp, #12
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b5e:	bf00      	nop
 8003b60:	370c      	adds	r7, #12
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bc80      	pop	{r7}
 8003b66:	4770      	bx	lr

08003b68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b70:	bf00      	nop
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bc80      	pop	{r7}
 8003b78:	4770      	bx	lr
	...

08003b7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b085      	sub	sp, #20
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a29      	ldr	r2, [pc, #164]	; (8003c34 <TIM_Base_SetConfig+0xb8>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d00b      	beq.n	8003bac <TIM_Base_SetConfig+0x30>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b9a:	d007      	beq.n	8003bac <TIM_Base_SetConfig+0x30>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4a26      	ldr	r2, [pc, #152]	; (8003c38 <TIM_Base_SetConfig+0xbc>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d003      	beq.n	8003bac <TIM_Base_SetConfig+0x30>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a25      	ldr	r2, [pc, #148]	; (8003c3c <TIM_Base_SetConfig+0xc0>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d108      	bne.n	8003bbe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	68fa      	ldr	r2, [r7, #12]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a1c      	ldr	r2, [pc, #112]	; (8003c34 <TIM_Base_SetConfig+0xb8>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d00b      	beq.n	8003bde <TIM_Base_SetConfig+0x62>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bcc:	d007      	beq.n	8003bde <TIM_Base_SetConfig+0x62>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a19      	ldr	r2, [pc, #100]	; (8003c38 <TIM_Base_SetConfig+0xbc>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d003      	beq.n	8003bde <TIM_Base_SetConfig+0x62>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a18      	ldr	r2, [pc, #96]	; (8003c3c <TIM_Base_SetConfig+0xc0>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d108      	bne.n	8003bf0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003be4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	68fa      	ldr	r2, [r7, #12]
 8003c02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	689a      	ldr	r2, [r3, #8]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a07      	ldr	r2, [pc, #28]	; (8003c34 <TIM_Base_SetConfig+0xb8>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d103      	bne.n	8003c24 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	691a      	ldr	r2, [r3, #16]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	615a      	str	r2, [r3, #20]
}
 8003c2a:	bf00      	nop
 8003c2c:	3714      	adds	r7, #20
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bc80      	pop	{r7}
 8003c32:	4770      	bx	lr
 8003c34:	40012c00 	.word	0x40012c00
 8003c38:	40000400 	.word	0x40000400
 8003c3c:	40000800 	.word	0x40000800

08003c40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b087      	sub	sp, #28
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a1b      	ldr	r3, [r3, #32]
 8003c54:	f023 0201 	bic.w	r2, r3, #1
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f023 0303 	bic.w	r3, r3, #3
 8003c76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68fa      	ldr	r2, [r7, #12]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	f023 0302 	bic.w	r3, r3, #2
 8003c88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	697a      	ldr	r2, [r7, #20]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a1c      	ldr	r2, [pc, #112]	; (8003d08 <TIM_OC1_SetConfig+0xc8>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d10c      	bne.n	8003cb6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	f023 0308 	bic.w	r3, r3, #8
 8003ca2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	697a      	ldr	r2, [r7, #20]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	f023 0304 	bic.w	r3, r3, #4
 8003cb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a13      	ldr	r2, [pc, #76]	; (8003d08 <TIM_OC1_SetConfig+0xc8>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d111      	bne.n	8003ce2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ccc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	695b      	ldr	r3, [r3, #20]
 8003cd2:	693a      	ldr	r2, [r7, #16]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	699b      	ldr	r3, [r3, #24]
 8003cdc:	693a      	ldr	r2, [r7, #16]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	693a      	ldr	r2, [r7, #16]
 8003ce6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	68fa      	ldr	r2, [r7, #12]
 8003cec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	685a      	ldr	r2, [r3, #4]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	697a      	ldr	r2, [r7, #20]
 8003cfa:	621a      	str	r2, [r3, #32]
}
 8003cfc:	bf00      	nop
 8003cfe:	371c      	adds	r7, #28
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bc80      	pop	{r7}
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	40012c00 	.word	0x40012c00

08003d0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b087      	sub	sp, #28
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a1b      	ldr	r3, [r3, #32]
 8003d1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6a1b      	ldr	r3, [r3, #32]
 8003d20:	f023 0210 	bic.w	r2, r3, #16
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	021b      	lsls	r3, r3, #8
 8003d4a:	68fa      	ldr	r2, [r7, #12]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	f023 0320 	bic.w	r3, r3, #32
 8003d56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	011b      	lsls	r3, r3, #4
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4a1d      	ldr	r2, [pc, #116]	; (8003ddc <TIM_OC2_SetConfig+0xd0>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d10d      	bne.n	8003d88 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	011b      	lsls	r3, r3, #4
 8003d7a:	697a      	ldr	r2, [r7, #20]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d86:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a14      	ldr	r2, [pc, #80]	; (8003ddc <TIM_OC2_SetConfig+0xd0>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d113      	bne.n	8003db8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	695b      	ldr	r3, [r3, #20]
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	693a      	ldr	r2, [r7, #16]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	699b      	ldr	r3, [r3, #24]
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	685a      	ldr	r2, [r3, #4]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	697a      	ldr	r2, [r7, #20]
 8003dd0:	621a      	str	r2, [r3, #32]
}
 8003dd2:	bf00      	nop
 8003dd4:	371c      	adds	r7, #28
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bc80      	pop	{r7}
 8003dda:	4770      	bx	lr
 8003ddc:	40012c00 	.word	0x40012c00

08003de0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b087      	sub	sp, #28
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a1b      	ldr	r3, [r3, #32]
 8003dee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a1b      	ldr	r3, [r3, #32]
 8003df4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	69db      	ldr	r3, [r3, #28]
 8003e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f023 0303 	bic.w	r3, r3, #3
 8003e16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	021b      	lsls	r3, r3, #8
 8003e30:	697a      	ldr	r2, [r7, #20]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a1d      	ldr	r2, [pc, #116]	; (8003eb0 <TIM_OC3_SetConfig+0xd0>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d10d      	bne.n	8003e5a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	021b      	lsls	r3, r3, #8
 8003e4c:	697a      	ldr	r2, [r7, #20]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a14      	ldr	r2, [pc, #80]	; (8003eb0 <TIM_OC3_SetConfig+0xd0>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d113      	bne.n	8003e8a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	695b      	ldr	r3, [r3, #20]
 8003e76:	011b      	lsls	r3, r3, #4
 8003e78:	693a      	ldr	r2, [r7, #16]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	699b      	ldr	r3, [r3, #24]
 8003e82:	011b      	lsls	r3, r3, #4
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	693a      	ldr	r2, [r7, #16]
 8003e8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	685a      	ldr	r2, [r3, #4]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	697a      	ldr	r2, [r7, #20]
 8003ea2:	621a      	str	r2, [r3, #32]
}
 8003ea4:	bf00      	nop
 8003ea6:	371c      	adds	r7, #28
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bc80      	pop	{r7}
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	40012c00 	.word	0x40012c00

08003eb4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b087      	sub	sp, #28
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a1b      	ldr	r3, [r3, #32]
 8003ec2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a1b      	ldr	r3, [r3, #32]
 8003ec8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	69db      	ldr	r3, [r3, #28]
 8003eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ee2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	021b      	lsls	r3, r3, #8
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003efe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	031b      	lsls	r3, r3, #12
 8003f06:	693a      	ldr	r2, [r7, #16]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a0f      	ldr	r2, [pc, #60]	; (8003f4c <TIM_OC4_SetConfig+0x98>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d109      	bne.n	8003f28 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	695b      	ldr	r3, [r3, #20]
 8003f20:	019b      	lsls	r3, r3, #6
 8003f22:	697a      	ldr	r2, [r7, #20]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	697a      	ldr	r2, [r7, #20]
 8003f2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	68fa      	ldr	r2, [r7, #12]
 8003f32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	685a      	ldr	r2, [r3, #4]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	693a      	ldr	r2, [r7, #16]
 8003f40:	621a      	str	r2, [r3, #32]
}
 8003f42:	bf00      	nop
 8003f44:	371c      	adds	r7, #28
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bc80      	pop	{r7}
 8003f4a:	4770      	bx	lr
 8003f4c:	40012c00 	.word	0x40012c00

08003f50 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b087      	sub	sp, #28
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	607a      	str	r2, [r7, #4]
 8003f5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6a1b      	ldr	r3, [r3, #32]
 8003f62:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6a1b      	ldr	r3, [r3, #32]
 8003f68:	f023 0201 	bic.w	r2, r3, #1
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	4a1f      	ldr	r2, [pc, #124]	; (8003ff8 <TIM_TI1_SetConfig+0xa8>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d00b      	beq.n	8003f96 <TIM_TI1_SetConfig+0x46>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f84:	d007      	beq.n	8003f96 <TIM_TI1_SetConfig+0x46>
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	4a1c      	ldr	r2, [pc, #112]	; (8003ffc <TIM_TI1_SetConfig+0xac>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d003      	beq.n	8003f96 <TIM_TI1_SetConfig+0x46>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	4a1b      	ldr	r2, [pc, #108]	; (8004000 <TIM_TI1_SetConfig+0xb0>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d101      	bne.n	8003f9a <TIM_TI1_SetConfig+0x4a>
 8003f96:	2301      	movs	r3, #1
 8003f98:	e000      	b.n	8003f9c <TIM_TI1_SetConfig+0x4c>
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d008      	beq.n	8003fb2 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	f023 0303 	bic.w	r3, r3, #3
 8003fa6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003fa8:	697a      	ldr	r2, [r7, #20]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	617b      	str	r3, [r7, #20]
 8003fb0:	e003      	b.n	8003fba <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	f043 0301 	orr.w	r3, r3, #1
 8003fb8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fc0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	011b      	lsls	r3, r3, #4
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	697a      	ldr	r2, [r7, #20]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	f023 030a 	bic.w	r3, r3, #10
 8003fd4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	f003 030a 	and.w	r3, r3, #10
 8003fdc:	693a      	ldr	r2, [r7, #16]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	697a      	ldr	r2, [r7, #20]
 8003fe6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	693a      	ldr	r2, [r7, #16]
 8003fec:	621a      	str	r2, [r3, #32]
}
 8003fee:	bf00      	nop
 8003ff0:	371c      	adds	r7, #28
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bc80      	pop	{r7}
 8003ff6:	4770      	bx	lr
 8003ff8:	40012c00 	.word	0x40012c00
 8003ffc:	40000400 	.word	0x40000400
 8004000:	40000800 	.word	0x40000800

08004004 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004004:	b480      	push	{r7}
 8004006:	b087      	sub	sp, #28
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6a1b      	ldr	r3, [r3, #32]
 8004014:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6a1b      	ldr	r3, [r3, #32]
 800401a:	f023 0201 	bic.w	r2, r3, #1
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800402e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	011b      	lsls	r3, r3, #4
 8004034:	693a      	ldr	r2, [r7, #16]
 8004036:	4313      	orrs	r3, r2
 8004038:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	f023 030a 	bic.w	r3, r3, #10
 8004040:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004042:	697a      	ldr	r2, [r7, #20]
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	4313      	orrs	r3, r2
 8004048:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	621a      	str	r2, [r3, #32]
}
 8004056:	bf00      	nop
 8004058:	371c      	adds	r7, #28
 800405a:	46bd      	mov	sp, r7
 800405c:	bc80      	pop	{r7}
 800405e:	4770      	bx	lr

08004060 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004060:	b480      	push	{r7}
 8004062:	b087      	sub	sp, #28
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	607a      	str	r2, [r7, #4]
 800406c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6a1b      	ldr	r3, [r3, #32]
 8004078:	f023 0210 	bic.w	r2, r3, #16
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	699b      	ldr	r3, [r3, #24]
 8004084:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800408c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	021b      	lsls	r3, r3, #8
 8004092:	693a      	ldr	r2, [r7, #16]
 8004094:	4313      	orrs	r3, r2
 8004096:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800409e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	031b      	lsls	r3, r3, #12
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	693a      	ldr	r2, [r7, #16]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040b2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	011b      	lsls	r3, r3, #4
 80040b8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80040bc:	697a      	ldr	r2, [r7, #20]
 80040be:	4313      	orrs	r3, r2
 80040c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	693a      	ldr	r2, [r7, #16]
 80040c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	697a      	ldr	r2, [r7, #20]
 80040cc:	621a      	str	r2, [r3, #32]
}
 80040ce:	bf00      	nop
 80040d0:	371c      	adds	r7, #28
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bc80      	pop	{r7}
 80040d6:	4770      	bx	lr

080040d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040d8:	b480      	push	{r7}
 80040da:	b087      	sub	sp, #28
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6a1b      	ldr	r3, [r3, #32]
 80040e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	f023 0210 	bic.w	r2, r3, #16
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004102:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	031b      	lsls	r3, r3, #12
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	4313      	orrs	r3, r2
 800410c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004114:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	011b      	lsls	r3, r3, #4
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	4313      	orrs	r3, r2
 800411e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	697a      	ldr	r2, [r7, #20]
 800412a:	621a      	str	r2, [r3, #32]
}
 800412c:	bf00      	nop
 800412e:	371c      	adds	r7, #28
 8004130:	46bd      	mov	sp, r7
 8004132:	bc80      	pop	{r7}
 8004134:	4770      	bx	lr

08004136 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004136:	b480      	push	{r7}
 8004138:	b087      	sub	sp, #28
 800413a:	af00      	add	r7, sp, #0
 800413c:	60f8      	str	r0, [r7, #12]
 800413e:	60b9      	str	r1, [r7, #8]
 8004140:	607a      	str	r2, [r7, #4]
 8004142:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6a1b      	ldr	r3, [r3, #32]
 8004148:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	69db      	ldr	r3, [r3, #28]
 800415a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	f023 0303 	bic.w	r3, r3, #3
 8004162:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004164:	693a      	ldr	r2, [r7, #16]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4313      	orrs	r3, r2
 800416a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004172:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	011b      	lsls	r3, r3, #4
 8004178:	b2db      	uxtb	r3, r3
 800417a:	693a      	ldr	r2, [r7, #16]
 800417c:	4313      	orrs	r3, r2
 800417e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004186:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	021b      	lsls	r3, r3, #8
 800418c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004190:	697a      	ldr	r2, [r7, #20]
 8004192:	4313      	orrs	r3, r2
 8004194:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	693a      	ldr	r2, [r7, #16]
 800419a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	697a      	ldr	r2, [r7, #20]
 80041a0:	621a      	str	r2, [r3, #32]
}
 80041a2:	bf00      	nop
 80041a4:	371c      	adds	r7, #28
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bc80      	pop	{r7}
 80041aa:	4770      	bx	lr

080041ac <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b087      	sub	sp, #28
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	60b9      	str	r1, [r7, #8]
 80041b6:	607a      	str	r2, [r7, #4]
 80041b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6a1b      	ldr	r3, [r3, #32]
 80041be:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6a1b      	ldr	r3, [r3, #32]
 80041c4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	69db      	ldr	r3, [r3, #28]
 80041d0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041d8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	021b      	lsls	r3, r3, #8
 80041de:	693a      	ldr	r2, [r7, #16]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041ea:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	031b      	lsls	r3, r3, #12
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	693a      	ldr	r2, [r7, #16]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041fe:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	031b      	lsls	r3, r3, #12
 8004204:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004208:	697a      	ldr	r2, [r7, #20]
 800420a:	4313      	orrs	r3, r2
 800420c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	693a      	ldr	r2, [r7, #16]
 8004212:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	697a      	ldr	r2, [r7, #20]
 8004218:	621a      	str	r2, [r3, #32]
}
 800421a:	bf00      	nop
 800421c:	371c      	adds	r7, #28
 800421e:	46bd      	mov	sp, r7
 8004220:	bc80      	pop	{r7}
 8004222:	4770      	bx	lr

08004224 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004224:	b480      	push	{r7}
 8004226:	b085      	sub	sp, #20
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800423a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800423c:	683a      	ldr	r2, [r7, #0]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	4313      	orrs	r3, r2
 8004242:	f043 0307 	orr.w	r3, r3, #7
 8004246:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	68fa      	ldr	r2, [r7, #12]
 800424c:	609a      	str	r2, [r3, #8]
}
 800424e:	bf00      	nop
 8004250:	3714      	adds	r7, #20
 8004252:	46bd      	mov	sp, r7
 8004254:	bc80      	pop	{r7}
 8004256:	4770      	bx	lr

08004258 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004258:	b480      	push	{r7}
 800425a:	b087      	sub	sp, #28
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	607a      	str	r2, [r7, #4]
 8004264:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004272:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	021a      	lsls	r2, r3, #8
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	431a      	orrs	r2, r3
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	4313      	orrs	r3, r2
 8004280:	697a      	ldr	r2, [r7, #20]
 8004282:	4313      	orrs	r3, r2
 8004284:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	697a      	ldr	r2, [r7, #20]
 800428a:	609a      	str	r2, [r3, #8]
}
 800428c:	bf00      	nop
 800428e:	371c      	adds	r7, #28
 8004290:	46bd      	mov	sp, r7
 8004292:	bc80      	pop	{r7}
 8004294:	4770      	bx	lr

08004296 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004296:	b480      	push	{r7}
 8004298:	b087      	sub	sp, #28
 800429a:	af00      	add	r7, sp, #0
 800429c:	60f8      	str	r0, [r7, #12]
 800429e:	60b9      	str	r1, [r7, #8]
 80042a0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	f003 031f 	and.w	r3, r3, #31
 80042a8:	2201      	movs	r2, #1
 80042aa:	fa02 f303 	lsl.w	r3, r2, r3
 80042ae:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6a1a      	ldr	r2, [r3, #32]
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	43db      	mvns	r3, r3
 80042b8:	401a      	ands	r2, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6a1a      	ldr	r2, [r3, #32]
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	f003 031f 	and.w	r3, r3, #31
 80042c8:	6879      	ldr	r1, [r7, #4]
 80042ca:	fa01 f303 	lsl.w	r3, r1, r3
 80042ce:	431a      	orrs	r2, r3
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	621a      	str	r2, [r3, #32]
}
 80042d4:	bf00      	nop
 80042d6:	371c      	adds	r7, #28
 80042d8:	46bd      	mov	sp, r7
 80042da:	bc80      	pop	{r7}
 80042dc:	4770      	bx	lr
	...

080042e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d101      	bne.n	80042f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042f4:	2302      	movs	r3, #2
 80042f6:	e046      	b.n	8004386 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2202      	movs	r2, #2
 8004304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800431e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68fa      	ldr	r2, [r7, #12]
 8004326:	4313      	orrs	r3, r2
 8004328:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a16      	ldr	r2, [pc, #88]	; (8004390 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d00e      	beq.n	800435a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004344:	d009      	beq.n	800435a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a12      	ldr	r2, [pc, #72]	; (8004394 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d004      	beq.n	800435a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a10      	ldr	r2, [pc, #64]	; (8004398 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d10c      	bne.n	8004374 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004360:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	68ba      	ldr	r2, [r7, #8]
 8004368:	4313      	orrs	r3, r2
 800436a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68ba      	ldr	r2, [r7, #8]
 8004372:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3714      	adds	r7, #20
 800438a:	46bd      	mov	sp, r7
 800438c:	bc80      	pop	{r7}
 800438e:	4770      	bx	lr
 8004390:	40012c00 	.word	0x40012c00
 8004394:	40000400 	.word	0x40000400
 8004398:	40000800 	.word	0x40000800

0800439c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043a4:	bf00      	nop
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bc80      	pop	{r7}
 80043ac:	4770      	bx	lr

080043ae <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043ae:	b480      	push	{r7}
 80043b0:	b083      	sub	sp, #12
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043b6:	bf00      	nop
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bc80      	pop	{r7}
 80043be:	4770      	bx	lr

080043c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d101      	bne.n	80043d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e042      	b.n	8004458 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d106      	bne.n	80043ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f7fd f920 	bl	800162c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2224      	movs	r2, #36	; 0x24
 80043f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68da      	ldr	r2, [r3, #12]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004402:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f000 fdc5 	bl	8004f94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	691a      	ldr	r2, [r3, #16]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004418:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	695a      	ldr	r2, [r3, #20]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004428:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68da      	ldr	r2, [r3, #12]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004438:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2220      	movs	r2, #32
 8004444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2220      	movs	r2, #32
 800444c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004456:	2300      	movs	r3, #0
}
 8004458:	4618      	mov	r0, r3
 800445a:	3708      	adds	r7, #8
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b08a      	sub	sp, #40	; 0x28
 8004464:	af02      	add	r7, sp, #8
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	603b      	str	r3, [r7, #0]
 800446c:	4613      	mov	r3, r2
 800446e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004470:	2300      	movs	r3, #0
 8004472:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800447a:	b2db      	uxtb	r3, r3
 800447c:	2b20      	cmp	r3, #32
 800447e:	d16d      	bne.n	800455c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d002      	beq.n	800448c <HAL_UART_Transmit+0x2c>
 8004486:	88fb      	ldrh	r3, [r7, #6]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d101      	bne.n	8004490 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e066      	b.n	800455e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2200      	movs	r2, #0
 8004494:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2221      	movs	r2, #33	; 0x21
 800449a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800449e:	f7fd fd2d 	bl	8001efc <HAL_GetTick>
 80044a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	88fa      	ldrh	r2, [r7, #6]
 80044a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	88fa      	ldrh	r2, [r7, #6]
 80044ae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044b8:	d108      	bne.n	80044cc <HAL_UART_Transmit+0x6c>
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d104      	bne.n	80044cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80044c2:	2300      	movs	r3, #0
 80044c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	61bb      	str	r3, [r7, #24]
 80044ca:	e003      	b.n	80044d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044d0:	2300      	movs	r3, #0
 80044d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80044d4:	e02a      	b.n	800452c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	9300      	str	r3, [sp, #0]
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	2200      	movs	r2, #0
 80044de:	2180      	movs	r1, #128	; 0x80
 80044e0:	68f8      	ldr	r0, [r7, #12]
 80044e2:	f000 fb14 	bl	8004b0e <UART_WaitOnFlagUntilTimeout>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d001      	beq.n	80044f0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	e036      	b.n	800455e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d10b      	bne.n	800450e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	881b      	ldrh	r3, [r3, #0]
 80044fa:	461a      	mov	r2, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004504:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	3302      	adds	r3, #2
 800450a:	61bb      	str	r3, [r7, #24]
 800450c:	e007      	b.n	800451e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	781a      	ldrb	r2, [r3, #0]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	3301      	adds	r3, #1
 800451c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004522:	b29b      	uxth	r3, r3
 8004524:	3b01      	subs	r3, #1
 8004526:	b29a      	uxth	r2, r3
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004530:	b29b      	uxth	r3, r3
 8004532:	2b00      	cmp	r3, #0
 8004534:	d1cf      	bne.n	80044d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	9300      	str	r3, [sp, #0]
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	2200      	movs	r2, #0
 800453e:	2140      	movs	r1, #64	; 0x40
 8004540:	68f8      	ldr	r0, [r7, #12]
 8004542:	f000 fae4 	bl	8004b0e <UART_WaitOnFlagUntilTimeout>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d001      	beq.n	8004550 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e006      	b.n	800455e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2220      	movs	r2, #32
 8004554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004558:	2300      	movs	r3, #0
 800455a:	e000      	b.n	800455e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800455c:	2302      	movs	r3, #2
  }
}
 800455e:	4618      	mov	r0, r3
 8004560:	3720      	adds	r7, #32
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}

08004566 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004566:	b580      	push	{r7, lr}
 8004568:	b084      	sub	sp, #16
 800456a:	af00      	add	r7, sp, #0
 800456c:	60f8      	str	r0, [r7, #12]
 800456e:	60b9      	str	r1, [r7, #8]
 8004570:	4613      	mov	r3, r2
 8004572:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800457a:	b2db      	uxtb	r3, r3
 800457c:	2b20      	cmp	r3, #32
 800457e:	d112      	bne.n	80045a6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d002      	beq.n	800458c <HAL_UART_Receive_IT+0x26>
 8004586:	88fb      	ldrh	r3, [r7, #6]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d101      	bne.n	8004590 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e00b      	b.n	80045a8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2200      	movs	r2, #0
 8004594:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004596:	88fb      	ldrh	r3, [r7, #6]
 8004598:	461a      	mov	r2, r3
 800459a:	68b9      	ldr	r1, [r7, #8]
 800459c:	68f8      	ldr	r0, [r7, #12]
 800459e:	f000 fb24 	bl	8004bea <UART_Start_Receive_IT>
 80045a2:	4603      	mov	r3, r0
 80045a4:	e000      	b.n	80045a8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80045a6:	2302      	movs	r3, #2
  }
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3710      	adds	r7, #16
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b0ba      	sub	sp, #232	; 0xe8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80045d6:	2300      	movs	r3, #0
 80045d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80045dc:	2300      	movs	r3, #0
 80045de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80045e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045e6:	f003 030f 	and.w	r3, r3, #15
 80045ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80045ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d10f      	bne.n	8004616 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045fa:	f003 0320 	and.w	r3, r3, #32
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d009      	beq.n	8004616 <HAL_UART_IRQHandler+0x66>
 8004602:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004606:	f003 0320 	and.w	r3, r3, #32
 800460a:	2b00      	cmp	r3, #0
 800460c:	d003      	beq.n	8004616 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 fc01 	bl	8004e16 <UART_Receive_IT>
      return;
 8004614:	e25b      	b.n	8004ace <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004616:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800461a:	2b00      	cmp	r3, #0
 800461c:	f000 80de 	beq.w	80047dc <HAL_UART_IRQHandler+0x22c>
 8004620:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004624:	f003 0301 	and.w	r3, r3, #1
 8004628:	2b00      	cmp	r3, #0
 800462a:	d106      	bne.n	800463a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800462c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004630:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004634:	2b00      	cmp	r3, #0
 8004636:	f000 80d1 	beq.w	80047dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800463a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800463e:	f003 0301 	and.w	r3, r3, #1
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00b      	beq.n	800465e <HAL_UART_IRQHandler+0xae>
 8004646:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800464a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800464e:	2b00      	cmp	r3, #0
 8004650:	d005      	beq.n	800465e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004656:	f043 0201 	orr.w	r2, r3, #1
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800465e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004662:	f003 0304 	and.w	r3, r3, #4
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00b      	beq.n	8004682 <HAL_UART_IRQHandler+0xd2>
 800466a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	2b00      	cmp	r3, #0
 8004674:	d005      	beq.n	8004682 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800467a:	f043 0202 	orr.w	r2, r3, #2
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004686:	f003 0302 	and.w	r3, r3, #2
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00b      	beq.n	80046a6 <HAL_UART_IRQHandler+0xf6>
 800468e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	2b00      	cmp	r3, #0
 8004698:	d005      	beq.n	80046a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800469e:	f043 0204 	orr.w	r2, r3, #4
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80046a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046aa:	f003 0308 	and.w	r3, r3, #8
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d011      	beq.n	80046d6 <HAL_UART_IRQHandler+0x126>
 80046b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046b6:	f003 0320 	and.w	r3, r3, #32
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d105      	bne.n	80046ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80046be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046c2:	f003 0301 	and.w	r3, r3, #1
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d005      	beq.n	80046d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ce:	f043 0208 	orr.w	r2, r3, #8
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046da:	2b00      	cmp	r3, #0
 80046dc:	f000 81f2 	beq.w	8004ac4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046e4:	f003 0320 	and.w	r3, r3, #32
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d008      	beq.n	80046fe <HAL_UART_IRQHandler+0x14e>
 80046ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046f0:	f003 0320 	and.w	r3, r3, #32
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d002      	beq.n	80046fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f000 fb8c 	bl	8004e16 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	695b      	ldr	r3, [r3, #20]
 8004704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004708:	2b00      	cmp	r3, #0
 800470a:	bf14      	ite	ne
 800470c:	2301      	movne	r3, #1
 800470e:	2300      	moveq	r3, #0
 8004710:	b2db      	uxtb	r3, r3
 8004712:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800471a:	f003 0308 	and.w	r3, r3, #8
 800471e:	2b00      	cmp	r3, #0
 8004720:	d103      	bne.n	800472a <HAL_UART_IRQHandler+0x17a>
 8004722:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004726:	2b00      	cmp	r3, #0
 8004728:	d04f      	beq.n	80047ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 fa96 	bl	8004c5c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800473a:	2b00      	cmp	r3, #0
 800473c:	d041      	beq.n	80047c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	3314      	adds	r3, #20
 8004744:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004748:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800474c:	e853 3f00 	ldrex	r3, [r3]
 8004750:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004754:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004758:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800475c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	3314      	adds	r3, #20
 8004766:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800476a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800476e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004772:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004776:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800477a:	e841 2300 	strex	r3, r2, [r1]
 800477e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004782:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d1d9      	bne.n	800473e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800478e:	2b00      	cmp	r3, #0
 8004790:	d013      	beq.n	80047ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004796:	4a7e      	ldr	r2, [pc, #504]	; (8004990 <HAL_UART_IRQHandler+0x3e0>)
 8004798:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800479e:	4618      	mov	r0, r3
 80047a0:	f7fd fd22 	bl	80021e8 <HAL_DMA_Abort_IT>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d016      	beq.n	80047d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80047b4:	4610      	mov	r0, r2
 80047b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047b8:	e00e      	b.n	80047d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 f993 	bl	8004ae6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047c0:	e00a      	b.n	80047d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 f98f 	bl	8004ae6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047c8:	e006      	b.n	80047d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f000 f98b 	bl	8004ae6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80047d6:	e175      	b.n	8004ac4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047d8:	bf00      	nop
    return;
 80047da:	e173      	b.n	8004ac4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	f040 814f 	bne.w	8004a84 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80047e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047ea:	f003 0310 	and.w	r3, r3, #16
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	f000 8148 	beq.w	8004a84 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80047f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047f8:	f003 0310 	and.w	r3, r3, #16
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	f000 8141 	beq.w	8004a84 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004802:	2300      	movs	r3, #0
 8004804:	60bb      	str	r3, [r7, #8]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	60bb      	str	r3, [r7, #8]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	60bb      	str	r3, [r7, #8]
 8004816:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	695b      	ldr	r3, [r3, #20]
 800481e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004822:	2b00      	cmp	r3, #0
 8004824:	f000 80b6 	beq.w	8004994 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004834:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004838:	2b00      	cmp	r3, #0
 800483a:	f000 8145 	beq.w	8004ac8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004842:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004846:	429a      	cmp	r2, r3
 8004848:	f080 813e 	bcs.w	8004ac8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004852:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004858:	699b      	ldr	r3, [r3, #24]
 800485a:	2b20      	cmp	r3, #32
 800485c:	f000 8088 	beq.w	8004970 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	330c      	adds	r3, #12
 8004866:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800486a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800486e:	e853 3f00 	ldrex	r3, [r3]
 8004872:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004876:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800487a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800487e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	330c      	adds	r3, #12
 8004888:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800488c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004890:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004894:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004898:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800489c:	e841 2300 	strex	r3, r2, [r1]
 80048a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80048a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d1d9      	bne.n	8004860 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	3314      	adds	r3, #20
 80048b2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048b6:	e853 3f00 	ldrex	r3, [r3]
 80048ba:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80048bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048be:	f023 0301 	bic.w	r3, r3, #1
 80048c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	3314      	adds	r3, #20
 80048cc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80048d0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80048d4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80048d8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80048dc:	e841 2300 	strex	r3, r2, [r1]
 80048e0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80048e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d1e1      	bne.n	80048ac <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	3314      	adds	r3, #20
 80048ee:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048f2:	e853 3f00 	ldrex	r3, [r3]
 80048f6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80048f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	3314      	adds	r3, #20
 8004908:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800490c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800490e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004910:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004912:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004914:	e841 2300 	strex	r3, r2, [r1]
 8004918:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800491a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800491c:	2b00      	cmp	r3, #0
 800491e:	d1e3      	bne.n	80048e8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2220      	movs	r2, #32
 8004924:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	330c      	adds	r3, #12
 8004934:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004936:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004938:	e853 3f00 	ldrex	r3, [r3]
 800493c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800493e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004940:	f023 0310 	bic.w	r3, r3, #16
 8004944:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	330c      	adds	r3, #12
 800494e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004952:	65ba      	str	r2, [r7, #88]	; 0x58
 8004954:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004956:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004958:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800495a:	e841 2300 	strex	r3, r2, [r1]
 800495e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004960:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1e3      	bne.n	800492e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800496a:	4618      	mov	r0, r3
 800496c:	f7fd fc01 	bl	8002172 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2202      	movs	r2, #2
 8004974:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800497e:	b29b      	uxth	r3, r3
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	b29b      	uxth	r3, r3
 8004984:	4619      	mov	r1, r3
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 f8b6 	bl	8004af8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800498c:	e09c      	b.n	8004ac8 <HAL_UART_IRQHandler+0x518>
 800498e:	bf00      	nop
 8004990:	08004d21 	.word	0x08004d21
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800499c:	b29b      	uxth	r3, r3
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	f000 808e 	beq.w	8004acc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80049b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	f000 8089 	beq.w	8004acc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	330c      	adds	r3, #12
 80049c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c4:	e853 3f00 	ldrex	r3, [r3]
 80049c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80049ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	330c      	adds	r3, #12
 80049da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80049de:	647a      	str	r2, [r7, #68]	; 0x44
 80049e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80049e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049e6:	e841 2300 	strex	r3, r2, [r1]
 80049ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80049ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1e3      	bne.n	80049ba <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	3314      	adds	r3, #20
 80049f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fc:	e853 3f00 	ldrex	r3, [r3]
 8004a00:	623b      	str	r3, [r7, #32]
   return(result);
 8004a02:	6a3b      	ldr	r3, [r7, #32]
 8004a04:	f023 0301 	bic.w	r3, r3, #1
 8004a08:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	3314      	adds	r3, #20
 8004a12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004a16:	633a      	str	r2, [r7, #48]	; 0x30
 8004a18:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a1e:	e841 2300 	strex	r3, r2, [r1]
 8004a22:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d1e3      	bne.n	80049f2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2220      	movs	r2, #32
 8004a2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	330c      	adds	r3, #12
 8004a3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	e853 3f00 	ldrex	r3, [r3]
 8004a46:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f023 0310 	bic.w	r3, r3, #16
 8004a4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	330c      	adds	r3, #12
 8004a58:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004a5c:	61fa      	str	r2, [r7, #28]
 8004a5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a60:	69b9      	ldr	r1, [r7, #24]
 8004a62:	69fa      	ldr	r2, [r7, #28]
 8004a64:	e841 2300 	strex	r3, r2, [r1]
 8004a68:	617b      	str	r3, [r7, #20]
   return(result);
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d1e3      	bne.n	8004a38 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2202      	movs	r2, #2
 8004a74:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a76:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f000 f83b 	bl	8004af8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a82:	e023      	b.n	8004acc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004a84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d009      	beq.n	8004aa4 <HAL_UART_IRQHandler+0x4f4>
 8004a90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d003      	beq.n	8004aa4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f000 f953 	bl	8004d48 <UART_Transmit_IT>
    return;
 8004aa2:	e014      	b.n	8004ace <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004aa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d00e      	beq.n	8004ace <HAL_UART_IRQHandler+0x51e>
 8004ab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d008      	beq.n	8004ace <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f000 f992 	bl	8004de6 <UART_EndTransmit_IT>
    return;
 8004ac2:	e004      	b.n	8004ace <HAL_UART_IRQHandler+0x51e>
    return;
 8004ac4:	bf00      	nop
 8004ac6:	e002      	b.n	8004ace <HAL_UART_IRQHandler+0x51e>
      return;
 8004ac8:	bf00      	nop
 8004aca:	e000      	b.n	8004ace <HAL_UART_IRQHandler+0x51e>
      return;
 8004acc:	bf00      	nop
  }
}
 8004ace:	37e8      	adds	r7, #232	; 0xe8
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004adc:	bf00      	nop
 8004ade:	370c      	adds	r7, #12
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bc80      	pop	{r7}
 8004ae4:	4770      	bx	lr

08004ae6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ae6:	b480      	push	{r7}
 8004ae8:	b083      	sub	sp, #12
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004aee:	bf00      	nop
 8004af0:	370c      	adds	r7, #12
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bc80      	pop	{r7}
 8004af6:	4770      	bx	lr

08004af8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	460b      	mov	r3, r1
 8004b02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b04:	bf00      	nop
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bc80      	pop	{r7}
 8004b0c:	4770      	bx	lr

08004b0e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004b0e:	b580      	push	{r7, lr}
 8004b10:	b090      	sub	sp, #64	; 0x40
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	60f8      	str	r0, [r7, #12]
 8004b16:	60b9      	str	r1, [r7, #8]
 8004b18:	603b      	str	r3, [r7, #0]
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b1e:	e050      	b.n	8004bc2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b26:	d04c      	beq.n	8004bc2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004b28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d007      	beq.n	8004b3e <UART_WaitOnFlagUntilTimeout+0x30>
 8004b2e:	f7fd f9e5 	bl	8001efc <HAL_GetTick>
 8004b32:	4602      	mov	r2, r0
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d241      	bcs.n	8004bc2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	330c      	adds	r3, #12
 8004b44:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b48:	e853 3f00 	ldrex	r3, [r3]
 8004b4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b50:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	330c      	adds	r3, #12
 8004b5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b5e:	637a      	str	r2, [r7, #52]	; 0x34
 8004b60:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b66:	e841 2300 	strex	r3, r2, [r1]
 8004b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d1e5      	bne.n	8004b3e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	3314      	adds	r3, #20
 8004b78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	e853 3f00 	ldrex	r3, [r3]
 8004b80:	613b      	str	r3, [r7, #16]
   return(result);
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	f023 0301 	bic.w	r3, r3, #1
 8004b88:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	3314      	adds	r3, #20
 8004b90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b92:	623a      	str	r2, [r7, #32]
 8004b94:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b96:	69f9      	ldr	r1, [r7, #28]
 8004b98:	6a3a      	ldr	r2, [r7, #32]
 8004b9a:	e841 2300 	strex	r3, r2, [r1]
 8004b9e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d1e5      	bne.n	8004b72 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2220      	movs	r2, #32
 8004baa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2220      	movs	r2, #32
 8004bb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e00f      	b.n	8004be2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	4013      	ands	r3, r2
 8004bcc:	68ba      	ldr	r2, [r7, #8]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	bf0c      	ite	eq
 8004bd2:	2301      	moveq	r3, #1
 8004bd4:	2300      	movne	r3, #0
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	461a      	mov	r2, r3
 8004bda:	79fb      	ldrb	r3, [r7, #7]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d09f      	beq.n	8004b20 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3740      	adds	r7, #64	; 0x40
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}

08004bea <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004bea:	b480      	push	{r7}
 8004bec:	b085      	sub	sp, #20
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	60f8      	str	r0, [r7, #12]
 8004bf2:	60b9      	str	r1, [r7, #8]
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	68ba      	ldr	r2, [r7, #8]
 8004bfc:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	88fa      	ldrh	r2, [r7, #6]
 8004c02:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	88fa      	ldrh	r2, [r7, #6]
 8004c08:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2222      	movs	r2, #34	; 0x22
 8004c14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d007      	beq.n	8004c30 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68da      	ldr	r2, [r3, #12]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c2e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	695a      	ldr	r2, [r3, #20]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f042 0201 	orr.w	r2, r2, #1
 8004c3e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68da      	ldr	r2, [r3, #12]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f042 0220 	orr.w	r2, r2, #32
 8004c4e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3714      	adds	r7, #20
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bc80      	pop	{r7}
 8004c5a:	4770      	bx	lr

08004c5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b095      	sub	sp, #84	; 0x54
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	330c      	adds	r3, #12
 8004c6a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c6e:	e853 3f00 	ldrex	r3, [r3]
 8004c72:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c76:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	330c      	adds	r3, #12
 8004c82:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c84:	643a      	str	r2, [r7, #64]	; 0x40
 8004c86:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c88:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004c8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c8c:	e841 2300 	strex	r3, r2, [r1]
 8004c90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d1e5      	bne.n	8004c64 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	3314      	adds	r3, #20
 8004c9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca0:	6a3b      	ldr	r3, [r7, #32]
 8004ca2:	e853 3f00 	ldrex	r3, [r3]
 8004ca6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	f023 0301 	bic.w	r3, r3, #1
 8004cae:	64bb      	str	r3, [r7, #72]	; 0x48
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	3314      	adds	r3, #20
 8004cb6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cb8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004cba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cc0:	e841 2300 	strex	r3, r2, [r1]
 8004cc4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d1e5      	bne.n	8004c98 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d119      	bne.n	8004d08 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	330c      	adds	r3, #12
 8004cda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	e853 3f00 	ldrex	r3, [r3]
 8004ce2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	f023 0310 	bic.w	r3, r3, #16
 8004cea:	647b      	str	r3, [r7, #68]	; 0x44
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	330c      	adds	r3, #12
 8004cf2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004cf4:	61ba      	str	r2, [r7, #24]
 8004cf6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf8:	6979      	ldr	r1, [r7, #20]
 8004cfa:	69ba      	ldr	r2, [r7, #24]
 8004cfc:	e841 2300 	strex	r3, r2, [r1]
 8004d00:	613b      	str	r3, [r7, #16]
   return(result);
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d1e5      	bne.n	8004cd4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2220      	movs	r2, #32
 8004d0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004d16:	bf00      	nop
 8004d18:	3754      	adds	r7, #84	; 0x54
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bc80      	pop	{r7}
 8004d1e:	4770      	bx	lr

08004d20 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2200      	movs	r2, #0
 8004d32:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2200      	movs	r2, #0
 8004d38:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d3a:	68f8      	ldr	r0, [r7, #12]
 8004d3c:	f7ff fed3 	bl	8004ae6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d40:	bf00      	nop
 8004d42:	3710      	adds	r7, #16
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	2b21      	cmp	r3, #33	; 0x21
 8004d5a:	d13e      	bne.n	8004dda <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d64:	d114      	bne.n	8004d90 <UART_Transmit_IT+0x48>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d110      	bne.n	8004d90 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	881b      	ldrh	r3, [r3, #0]
 8004d78:	461a      	mov	r2, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d82:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a1b      	ldr	r3, [r3, #32]
 8004d88:	1c9a      	adds	r2, r3, #2
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	621a      	str	r2, [r3, #32]
 8004d8e:	e008      	b.n	8004da2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6a1b      	ldr	r3, [r3, #32]
 8004d94:	1c59      	adds	r1, r3, #1
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	6211      	str	r1, [r2, #32]
 8004d9a:	781a      	ldrb	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	3b01      	subs	r3, #1
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	4619      	mov	r1, r3
 8004db0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d10f      	bne.n	8004dd6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	68da      	ldr	r2, [r3, #12]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004dc4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	68da      	ldr	r2, [r3, #12]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004dd4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	e000      	b.n	8004ddc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004dda:	2302      	movs	r3, #2
  }
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3714      	adds	r7, #20
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bc80      	pop	{r7}
 8004de4:	4770      	bx	lr

08004de6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004de6:	b580      	push	{r7, lr}
 8004de8:	b082      	sub	sp, #8
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68da      	ldr	r2, [r3, #12]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dfc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2220      	movs	r2, #32
 8004e02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f7ff fe64 	bl	8004ad4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3708      	adds	r7, #8
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}

08004e16 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004e16:	b580      	push	{r7, lr}
 8004e18:	b08c      	sub	sp, #48	; 0x30
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	2b22      	cmp	r3, #34	; 0x22
 8004e28:	f040 80ae 	bne.w	8004f88 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e34:	d117      	bne.n	8004e66 <UART_Receive_IT+0x50>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d113      	bne.n	8004e66 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e46:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e54:	b29a      	uxth	r2, r3
 8004e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e58:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e5e:	1c9a      	adds	r2, r3, #2
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	629a      	str	r2, [r3, #40]	; 0x28
 8004e64:	e026      	b.n	8004eb4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e78:	d007      	beq.n	8004e8a <UART_Receive_IT+0x74>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d10a      	bne.n	8004e98 <UART_Receive_IT+0x82>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	691b      	ldr	r3, [r3, #16]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d106      	bne.n	8004e98 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	b2da      	uxtb	r2, r3
 8004e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e94:	701a      	strb	r2, [r3, #0]
 8004e96:	e008      	b.n	8004eaa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ea4:	b2da      	uxtb	r2, r3
 8004ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eae:	1c5a      	adds	r2, r3, #1
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d15d      	bne.n	8004f84 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68da      	ldr	r2, [r3, #12]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f022 0220 	bic.w	r2, r2, #32
 8004ed6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68da      	ldr	r2, [r3, #12]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ee6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	695a      	ldr	r2, [r3, #20]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f022 0201 	bic.w	r2, r2, #1
 8004ef6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2220      	movs	r2, #32
 8004efc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d135      	bne.n	8004f7a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	330c      	adds	r3, #12
 8004f1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	e853 3f00 	ldrex	r3, [r3]
 8004f22:	613b      	str	r3, [r7, #16]
   return(result);
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	f023 0310 	bic.w	r3, r3, #16
 8004f2a:	627b      	str	r3, [r7, #36]	; 0x24
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	330c      	adds	r3, #12
 8004f32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f34:	623a      	str	r2, [r7, #32]
 8004f36:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f38:	69f9      	ldr	r1, [r7, #28]
 8004f3a:	6a3a      	ldr	r2, [r7, #32]
 8004f3c:	e841 2300 	strex	r3, r2, [r1]
 8004f40:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f42:	69bb      	ldr	r3, [r7, #24]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d1e5      	bne.n	8004f14 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0310 	and.w	r3, r3, #16
 8004f52:	2b10      	cmp	r3, #16
 8004f54:	d10a      	bne.n	8004f6c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f56:	2300      	movs	r3, #0
 8004f58:	60fb      	str	r3, [r7, #12]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	60fb      	str	r3, [r7, #12]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	60fb      	str	r3, [r7, #12]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f70:	4619      	mov	r1, r3
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f7ff fdc0 	bl	8004af8 <HAL_UARTEx_RxEventCallback>
 8004f78:	e002      	b.n	8004f80 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f7fb fd2c 	bl	80009d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004f80:	2300      	movs	r3, #0
 8004f82:	e002      	b.n	8004f8a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004f84:	2300      	movs	r3, #0
 8004f86:	e000      	b.n	8004f8a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004f88:	2302      	movs	r3, #2
  }
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3730      	adds	r7, #48	; 0x30
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
	...

08004f94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	68da      	ldr	r2, [r3, #12]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	689a      	ldr	r2, [r3, #8]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	431a      	orrs	r2, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	695b      	ldr	r3, [r3, #20]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004fce:	f023 030c 	bic.w	r3, r3, #12
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	6812      	ldr	r2, [r2, #0]
 8004fd6:	68b9      	ldr	r1, [r7, #8]
 8004fd8:	430b      	orrs	r3, r1
 8004fda:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	695b      	ldr	r3, [r3, #20]
 8004fe2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	699a      	ldr	r2, [r3, #24]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	430a      	orrs	r2, r1
 8004ff0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a2c      	ldr	r2, [pc, #176]	; (80050a8 <UART_SetConfig+0x114>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d103      	bne.n	8005004 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004ffc:	f7fd fefe 	bl	8002dfc <HAL_RCC_GetPCLK2Freq>
 8005000:	60f8      	str	r0, [r7, #12]
 8005002:	e002      	b.n	800500a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005004:	f7fd fee6 	bl	8002dd4 <HAL_RCC_GetPCLK1Freq>
 8005008:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800500a:	68fa      	ldr	r2, [r7, #12]
 800500c:	4613      	mov	r3, r2
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	4413      	add	r3, r2
 8005012:	009a      	lsls	r2, r3, #2
 8005014:	441a      	add	r2, r3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005020:	4a22      	ldr	r2, [pc, #136]	; (80050ac <UART_SetConfig+0x118>)
 8005022:	fba2 2303 	umull	r2, r3, r2, r3
 8005026:	095b      	lsrs	r3, r3, #5
 8005028:	0119      	lsls	r1, r3, #4
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	4613      	mov	r3, r2
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	4413      	add	r3, r2
 8005032:	009a      	lsls	r2, r3, #2
 8005034:	441a      	add	r2, r3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005040:	4b1a      	ldr	r3, [pc, #104]	; (80050ac <UART_SetConfig+0x118>)
 8005042:	fba3 0302 	umull	r0, r3, r3, r2
 8005046:	095b      	lsrs	r3, r3, #5
 8005048:	2064      	movs	r0, #100	; 0x64
 800504a:	fb00 f303 	mul.w	r3, r0, r3
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	011b      	lsls	r3, r3, #4
 8005052:	3332      	adds	r3, #50	; 0x32
 8005054:	4a15      	ldr	r2, [pc, #84]	; (80050ac <UART_SetConfig+0x118>)
 8005056:	fba2 2303 	umull	r2, r3, r2, r3
 800505a:	095b      	lsrs	r3, r3, #5
 800505c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005060:	4419      	add	r1, r3
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	4613      	mov	r3, r2
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	4413      	add	r3, r2
 800506a:	009a      	lsls	r2, r3, #2
 800506c:	441a      	add	r2, r3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	fbb2 f2f3 	udiv	r2, r2, r3
 8005078:	4b0c      	ldr	r3, [pc, #48]	; (80050ac <UART_SetConfig+0x118>)
 800507a:	fba3 0302 	umull	r0, r3, r3, r2
 800507e:	095b      	lsrs	r3, r3, #5
 8005080:	2064      	movs	r0, #100	; 0x64
 8005082:	fb00 f303 	mul.w	r3, r0, r3
 8005086:	1ad3      	subs	r3, r2, r3
 8005088:	011b      	lsls	r3, r3, #4
 800508a:	3332      	adds	r3, #50	; 0x32
 800508c:	4a07      	ldr	r2, [pc, #28]	; (80050ac <UART_SetConfig+0x118>)
 800508e:	fba2 2303 	umull	r2, r3, r2, r3
 8005092:	095b      	lsrs	r3, r3, #5
 8005094:	f003 020f 	and.w	r2, r3, #15
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	440a      	add	r2, r1
 800509e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80050a0:	bf00      	nop
 80050a2:	3710      	adds	r7, #16
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	40013800 	.word	0x40013800
 80050ac:	51eb851f 	.word	0x51eb851f

080050b0 <std>:
 80050b0:	2300      	movs	r3, #0
 80050b2:	b510      	push	{r4, lr}
 80050b4:	4604      	mov	r4, r0
 80050b6:	e9c0 3300 	strd	r3, r3, [r0]
 80050ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80050be:	6083      	str	r3, [r0, #8]
 80050c0:	8181      	strh	r1, [r0, #12]
 80050c2:	6643      	str	r3, [r0, #100]	; 0x64
 80050c4:	81c2      	strh	r2, [r0, #14]
 80050c6:	6183      	str	r3, [r0, #24]
 80050c8:	4619      	mov	r1, r3
 80050ca:	2208      	movs	r2, #8
 80050cc:	305c      	adds	r0, #92	; 0x5c
 80050ce:	f000 f926 	bl	800531e <memset>
 80050d2:	4b0d      	ldr	r3, [pc, #52]	; (8005108 <std+0x58>)
 80050d4:	6224      	str	r4, [r4, #32]
 80050d6:	6263      	str	r3, [r4, #36]	; 0x24
 80050d8:	4b0c      	ldr	r3, [pc, #48]	; (800510c <std+0x5c>)
 80050da:	62a3      	str	r3, [r4, #40]	; 0x28
 80050dc:	4b0c      	ldr	r3, [pc, #48]	; (8005110 <std+0x60>)
 80050de:	62e3      	str	r3, [r4, #44]	; 0x2c
 80050e0:	4b0c      	ldr	r3, [pc, #48]	; (8005114 <std+0x64>)
 80050e2:	6323      	str	r3, [r4, #48]	; 0x30
 80050e4:	4b0c      	ldr	r3, [pc, #48]	; (8005118 <std+0x68>)
 80050e6:	429c      	cmp	r4, r3
 80050e8:	d006      	beq.n	80050f8 <std+0x48>
 80050ea:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80050ee:	4294      	cmp	r4, r2
 80050f0:	d002      	beq.n	80050f8 <std+0x48>
 80050f2:	33d0      	adds	r3, #208	; 0xd0
 80050f4:	429c      	cmp	r4, r3
 80050f6:	d105      	bne.n	8005104 <std+0x54>
 80050f8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80050fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005100:	f000 b986 	b.w	8005410 <__retarget_lock_init_recursive>
 8005104:	bd10      	pop	{r4, pc}
 8005106:	bf00      	nop
 8005108:	08005299 	.word	0x08005299
 800510c:	080052bb 	.word	0x080052bb
 8005110:	080052f3 	.word	0x080052f3
 8005114:	08005317 	.word	0x08005317
 8005118:	2000035c 	.word	0x2000035c

0800511c <stdio_exit_handler>:
 800511c:	4a02      	ldr	r2, [pc, #8]	; (8005128 <stdio_exit_handler+0xc>)
 800511e:	4903      	ldr	r1, [pc, #12]	; (800512c <stdio_exit_handler+0x10>)
 8005120:	4803      	ldr	r0, [pc, #12]	; (8005130 <stdio_exit_handler+0x14>)
 8005122:	f000 b869 	b.w	80051f8 <_fwalk_sglue>
 8005126:	bf00      	nop
 8005128:	20000010 	.word	0x20000010
 800512c:	08005f61 	.word	0x08005f61
 8005130:	2000001c 	.word	0x2000001c

08005134 <cleanup_stdio>:
 8005134:	6841      	ldr	r1, [r0, #4]
 8005136:	4b0c      	ldr	r3, [pc, #48]	; (8005168 <cleanup_stdio+0x34>)
 8005138:	b510      	push	{r4, lr}
 800513a:	4299      	cmp	r1, r3
 800513c:	4604      	mov	r4, r0
 800513e:	d001      	beq.n	8005144 <cleanup_stdio+0x10>
 8005140:	f000 ff0e 	bl	8005f60 <_fflush_r>
 8005144:	68a1      	ldr	r1, [r4, #8]
 8005146:	4b09      	ldr	r3, [pc, #36]	; (800516c <cleanup_stdio+0x38>)
 8005148:	4299      	cmp	r1, r3
 800514a:	d002      	beq.n	8005152 <cleanup_stdio+0x1e>
 800514c:	4620      	mov	r0, r4
 800514e:	f000 ff07 	bl	8005f60 <_fflush_r>
 8005152:	68e1      	ldr	r1, [r4, #12]
 8005154:	4b06      	ldr	r3, [pc, #24]	; (8005170 <cleanup_stdio+0x3c>)
 8005156:	4299      	cmp	r1, r3
 8005158:	d004      	beq.n	8005164 <cleanup_stdio+0x30>
 800515a:	4620      	mov	r0, r4
 800515c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005160:	f000 befe 	b.w	8005f60 <_fflush_r>
 8005164:	bd10      	pop	{r4, pc}
 8005166:	bf00      	nop
 8005168:	2000035c 	.word	0x2000035c
 800516c:	200003c4 	.word	0x200003c4
 8005170:	2000042c 	.word	0x2000042c

08005174 <global_stdio_init.part.0>:
 8005174:	b510      	push	{r4, lr}
 8005176:	4b0b      	ldr	r3, [pc, #44]	; (80051a4 <global_stdio_init.part.0+0x30>)
 8005178:	4c0b      	ldr	r4, [pc, #44]	; (80051a8 <global_stdio_init.part.0+0x34>)
 800517a:	4a0c      	ldr	r2, [pc, #48]	; (80051ac <global_stdio_init.part.0+0x38>)
 800517c:	4620      	mov	r0, r4
 800517e:	601a      	str	r2, [r3, #0]
 8005180:	2104      	movs	r1, #4
 8005182:	2200      	movs	r2, #0
 8005184:	f7ff ff94 	bl	80050b0 <std>
 8005188:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800518c:	2201      	movs	r2, #1
 800518e:	2109      	movs	r1, #9
 8005190:	f7ff ff8e 	bl	80050b0 <std>
 8005194:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005198:	2202      	movs	r2, #2
 800519a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800519e:	2112      	movs	r1, #18
 80051a0:	f7ff bf86 	b.w	80050b0 <std>
 80051a4:	20000494 	.word	0x20000494
 80051a8:	2000035c 	.word	0x2000035c
 80051ac:	0800511d 	.word	0x0800511d

080051b0 <__sfp_lock_acquire>:
 80051b0:	4801      	ldr	r0, [pc, #4]	; (80051b8 <__sfp_lock_acquire+0x8>)
 80051b2:	f000 b92e 	b.w	8005412 <__retarget_lock_acquire_recursive>
 80051b6:	bf00      	nop
 80051b8:	2000049d 	.word	0x2000049d

080051bc <__sfp_lock_release>:
 80051bc:	4801      	ldr	r0, [pc, #4]	; (80051c4 <__sfp_lock_release+0x8>)
 80051be:	f000 b929 	b.w	8005414 <__retarget_lock_release_recursive>
 80051c2:	bf00      	nop
 80051c4:	2000049d 	.word	0x2000049d

080051c8 <__sinit>:
 80051c8:	b510      	push	{r4, lr}
 80051ca:	4604      	mov	r4, r0
 80051cc:	f7ff fff0 	bl	80051b0 <__sfp_lock_acquire>
 80051d0:	6a23      	ldr	r3, [r4, #32]
 80051d2:	b11b      	cbz	r3, 80051dc <__sinit+0x14>
 80051d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051d8:	f7ff bff0 	b.w	80051bc <__sfp_lock_release>
 80051dc:	4b04      	ldr	r3, [pc, #16]	; (80051f0 <__sinit+0x28>)
 80051de:	6223      	str	r3, [r4, #32]
 80051e0:	4b04      	ldr	r3, [pc, #16]	; (80051f4 <__sinit+0x2c>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d1f5      	bne.n	80051d4 <__sinit+0xc>
 80051e8:	f7ff ffc4 	bl	8005174 <global_stdio_init.part.0>
 80051ec:	e7f2      	b.n	80051d4 <__sinit+0xc>
 80051ee:	bf00      	nop
 80051f0:	08005135 	.word	0x08005135
 80051f4:	20000494 	.word	0x20000494

080051f8 <_fwalk_sglue>:
 80051f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051fc:	4607      	mov	r7, r0
 80051fe:	4688      	mov	r8, r1
 8005200:	4614      	mov	r4, r2
 8005202:	2600      	movs	r6, #0
 8005204:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005208:	f1b9 0901 	subs.w	r9, r9, #1
 800520c:	d505      	bpl.n	800521a <_fwalk_sglue+0x22>
 800520e:	6824      	ldr	r4, [r4, #0]
 8005210:	2c00      	cmp	r4, #0
 8005212:	d1f7      	bne.n	8005204 <_fwalk_sglue+0xc>
 8005214:	4630      	mov	r0, r6
 8005216:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800521a:	89ab      	ldrh	r3, [r5, #12]
 800521c:	2b01      	cmp	r3, #1
 800521e:	d907      	bls.n	8005230 <_fwalk_sglue+0x38>
 8005220:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005224:	3301      	adds	r3, #1
 8005226:	d003      	beq.n	8005230 <_fwalk_sglue+0x38>
 8005228:	4629      	mov	r1, r5
 800522a:	4638      	mov	r0, r7
 800522c:	47c0      	blx	r8
 800522e:	4306      	orrs	r6, r0
 8005230:	3568      	adds	r5, #104	; 0x68
 8005232:	e7e9      	b.n	8005208 <_fwalk_sglue+0x10>

08005234 <iprintf>:
 8005234:	b40f      	push	{r0, r1, r2, r3}
 8005236:	b507      	push	{r0, r1, r2, lr}
 8005238:	4906      	ldr	r1, [pc, #24]	; (8005254 <iprintf+0x20>)
 800523a:	ab04      	add	r3, sp, #16
 800523c:	6808      	ldr	r0, [r1, #0]
 800523e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005242:	6881      	ldr	r1, [r0, #8]
 8005244:	9301      	str	r3, [sp, #4]
 8005246:	f000 fb5b 	bl	8005900 <_vfiprintf_r>
 800524a:	b003      	add	sp, #12
 800524c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005250:	b004      	add	sp, #16
 8005252:	4770      	bx	lr
 8005254:	20000068 	.word	0x20000068

08005258 <siprintf>:
 8005258:	b40e      	push	{r1, r2, r3}
 800525a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800525e:	b500      	push	{lr}
 8005260:	b09c      	sub	sp, #112	; 0x70
 8005262:	ab1d      	add	r3, sp, #116	; 0x74
 8005264:	9002      	str	r0, [sp, #8]
 8005266:	9006      	str	r0, [sp, #24]
 8005268:	9107      	str	r1, [sp, #28]
 800526a:	9104      	str	r1, [sp, #16]
 800526c:	4808      	ldr	r0, [pc, #32]	; (8005290 <siprintf+0x38>)
 800526e:	4909      	ldr	r1, [pc, #36]	; (8005294 <siprintf+0x3c>)
 8005270:	f853 2b04 	ldr.w	r2, [r3], #4
 8005274:	9105      	str	r1, [sp, #20]
 8005276:	6800      	ldr	r0, [r0, #0]
 8005278:	a902      	add	r1, sp, #8
 800527a:	9301      	str	r3, [sp, #4]
 800527c:	f000 fa1a 	bl	80056b4 <_svfiprintf_r>
 8005280:	2200      	movs	r2, #0
 8005282:	9b02      	ldr	r3, [sp, #8]
 8005284:	701a      	strb	r2, [r3, #0]
 8005286:	b01c      	add	sp, #112	; 0x70
 8005288:	f85d eb04 	ldr.w	lr, [sp], #4
 800528c:	b003      	add	sp, #12
 800528e:	4770      	bx	lr
 8005290:	20000068 	.word	0x20000068
 8005294:	ffff0208 	.word	0xffff0208

08005298 <__sread>:
 8005298:	b510      	push	{r4, lr}
 800529a:	460c      	mov	r4, r1
 800529c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052a0:	f000 f868 	bl	8005374 <_read_r>
 80052a4:	2800      	cmp	r0, #0
 80052a6:	bfab      	itete	ge
 80052a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80052aa:	89a3      	ldrhlt	r3, [r4, #12]
 80052ac:	181b      	addge	r3, r3, r0
 80052ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80052b2:	bfac      	ite	ge
 80052b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80052b6:	81a3      	strhlt	r3, [r4, #12]
 80052b8:	bd10      	pop	{r4, pc}

080052ba <__swrite>:
 80052ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052be:	461f      	mov	r7, r3
 80052c0:	898b      	ldrh	r3, [r1, #12]
 80052c2:	4605      	mov	r5, r0
 80052c4:	05db      	lsls	r3, r3, #23
 80052c6:	460c      	mov	r4, r1
 80052c8:	4616      	mov	r6, r2
 80052ca:	d505      	bpl.n	80052d8 <__swrite+0x1e>
 80052cc:	2302      	movs	r3, #2
 80052ce:	2200      	movs	r2, #0
 80052d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052d4:	f000 f83c 	bl	8005350 <_lseek_r>
 80052d8:	89a3      	ldrh	r3, [r4, #12]
 80052da:	4632      	mov	r2, r6
 80052dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052e0:	81a3      	strh	r3, [r4, #12]
 80052e2:	4628      	mov	r0, r5
 80052e4:	463b      	mov	r3, r7
 80052e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052ee:	f000 b853 	b.w	8005398 <_write_r>

080052f2 <__sseek>:
 80052f2:	b510      	push	{r4, lr}
 80052f4:	460c      	mov	r4, r1
 80052f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052fa:	f000 f829 	bl	8005350 <_lseek_r>
 80052fe:	1c43      	adds	r3, r0, #1
 8005300:	89a3      	ldrh	r3, [r4, #12]
 8005302:	bf15      	itete	ne
 8005304:	6560      	strne	r0, [r4, #84]	; 0x54
 8005306:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800530a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800530e:	81a3      	strheq	r3, [r4, #12]
 8005310:	bf18      	it	ne
 8005312:	81a3      	strhne	r3, [r4, #12]
 8005314:	bd10      	pop	{r4, pc}

08005316 <__sclose>:
 8005316:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800531a:	f000 b809 	b.w	8005330 <_close_r>

0800531e <memset>:
 800531e:	4603      	mov	r3, r0
 8005320:	4402      	add	r2, r0
 8005322:	4293      	cmp	r3, r2
 8005324:	d100      	bne.n	8005328 <memset+0xa>
 8005326:	4770      	bx	lr
 8005328:	f803 1b01 	strb.w	r1, [r3], #1
 800532c:	e7f9      	b.n	8005322 <memset+0x4>
	...

08005330 <_close_r>:
 8005330:	b538      	push	{r3, r4, r5, lr}
 8005332:	2300      	movs	r3, #0
 8005334:	4d05      	ldr	r5, [pc, #20]	; (800534c <_close_r+0x1c>)
 8005336:	4604      	mov	r4, r0
 8005338:	4608      	mov	r0, r1
 800533a:	602b      	str	r3, [r5, #0]
 800533c:	f7fc fa8b 	bl	8001856 <_close>
 8005340:	1c43      	adds	r3, r0, #1
 8005342:	d102      	bne.n	800534a <_close_r+0x1a>
 8005344:	682b      	ldr	r3, [r5, #0]
 8005346:	b103      	cbz	r3, 800534a <_close_r+0x1a>
 8005348:	6023      	str	r3, [r4, #0]
 800534a:	bd38      	pop	{r3, r4, r5, pc}
 800534c:	20000498 	.word	0x20000498

08005350 <_lseek_r>:
 8005350:	b538      	push	{r3, r4, r5, lr}
 8005352:	4604      	mov	r4, r0
 8005354:	4608      	mov	r0, r1
 8005356:	4611      	mov	r1, r2
 8005358:	2200      	movs	r2, #0
 800535a:	4d05      	ldr	r5, [pc, #20]	; (8005370 <_lseek_r+0x20>)
 800535c:	602a      	str	r2, [r5, #0]
 800535e:	461a      	mov	r2, r3
 8005360:	f7fc fa9d 	bl	800189e <_lseek>
 8005364:	1c43      	adds	r3, r0, #1
 8005366:	d102      	bne.n	800536e <_lseek_r+0x1e>
 8005368:	682b      	ldr	r3, [r5, #0]
 800536a:	b103      	cbz	r3, 800536e <_lseek_r+0x1e>
 800536c:	6023      	str	r3, [r4, #0]
 800536e:	bd38      	pop	{r3, r4, r5, pc}
 8005370:	20000498 	.word	0x20000498

08005374 <_read_r>:
 8005374:	b538      	push	{r3, r4, r5, lr}
 8005376:	4604      	mov	r4, r0
 8005378:	4608      	mov	r0, r1
 800537a:	4611      	mov	r1, r2
 800537c:	2200      	movs	r2, #0
 800537e:	4d05      	ldr	r5, [pc, #20]	; (8005394 <_read_r+0x20>)
 8005380:	602a      	str	r2, [r5, #0]
 8005382:	461a      	mov	r2, r3
 8005384:	f7fc fa2e 	bl	80017e4 <_read>
 8005388:	1c43      	adds	r3, r0, #1
 800538a:	d102      	bne.n	8005392 <_read_r+0x1e>
 800538c:	682b      	ldr	r3, [r5, #0]
 800538e:	b103      	cbz	r3, 8005392 <_read_r+0x1e>
 8005390:	6023      	str	r3, [r4, #0]
 8005392:	bd38      	pop	{r3, r4, r5, pc}
 8005394:	20000498 	.word	0x20000498

08005398 <_write_r>:
 8005398:	b538      	push	{r3, r4, r5, lr}
 800539a:	4604      	mov	r4, r0
 800539c:	4608      	mov	r0, r1
 800539e:	4611      	mov	r1, r2
 80053a0:	2200      	movs	r2, #0
 80053a2:	4d05      	ldr	r5, [pc, #20]	; (80053b8 <_write_r+0x20>)
 80053a4:	602a      	str	r2, [r5, #0]
 80053a6:	461a      	mov	r2, r3
 80053a8:	f7fc fa39 	bl	800181e <_write>
 80053ac:	1c43      	adds	r3, r0, #1
 80053ae:	d102      	bne.n	80053b6 <_write_r+0x1e>
 80053b0:	682b      	ldr	r3, [r5, #0]
 80053b2:	b103      	cbz	r3, 80053b6 <_write_r+0x1e>
 80053b4:	6023      	str	r3, [r4, #0]
 80053b6:	bd38      	pop	{r3, r4, r5, pc}
 80053b8:	20000498 	.word	0x20000498

080053bc <__errno>:
 80053bc:	4b01      	ldr	r3, [pc, #4]	; (80053c4 <__errno+0x8>)
 80053be:	6818      	ldr	r0, [r3, #0]
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop
 80053c4:	20000068 	.word	0x20000068

080053c8 <__libc_init_array>:
 80053c8:	b570      	push	{r4, r5, r6, lr}
 80053ca:	2600      	movs	r6, #0
 80053cc:	4d0c      	ldr	r5, [pc, #48]	; (8005400 <__libc_init_array+0x38>)
 80053ce:	4c0d      	ldr	r4, [pc, #52]	; (8005404 <__libc_init_array+0x3c>)
 80053d0:	1b64      	subs	r4, r4, r5
 80053d2:	10a4      	asrs	r4, r4, #2
 80053d4:	42a6      	cmp	r6, r4
 80053d6:	d109      	bne.n	80053ec <__libc_init_array+0x24>
 80053d8:	f000 ff80 	bl	80062dc <_init>
 80053dc:	2600      	movs	r6, #0
 80053de:	4d0a      	ldr	r5, [pc, #40]	; (8005408 <__libc_init_array+0x40>)
 80053e0:	4c0a      	ldr	r4, [pc, #40]	; (800540c <__libc_init_array+0x44>)
 80053e2:	1b64      	subs	r4, r4, r5
 80053e4:	10a4      	asrs	r4, r4, #2
 80053e6:	42a6      	cmp	r6, r4
 80053e8:	d105      	bne.n	80053f6 <__libc_init_array+0x2e>
 80053ea:	bd70      	pop	{r4, r5, r6, pc}
 80053ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80053f0:	4798      	blx	r3
 80053f2:	3601      	adds	r6, #1
 80053f4:	e7ee      	b.n	80053d4 <__libc_init_array+0xc>
 80053f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80053fa:	4798      	blx	r3
 80053fc:	3601      	adds	r6, #1
 80053fe:	e7f2      	b.n	80053e6 <__libc_init_array+0x1e>
 8005400:	080063ac 	.word	0x080063ac
 8005404:	080063ac 	.word	0x080063ac
 8005408:	080063ac 	.word	0x080063ac
 800540c:	080063b0 	.word	0x080063b0

08005410 <__retarget_lock_init_recursive>:
 8005410:	4770      	bx	lr

08005412 <__retarget_lock_acquire_recursive>:
 8005412:	4770      	bx	lr

08005414 <__retarget_lock_release_recursive>:
 8005414:	4770      	bx	lr
	...

08005418 <_free_r>:
 8005418:	b538      	push	{r3, r4, r5, lr}
 800541a:	4605      	mov	r5, r0
 800541c:	2900      	cmp	r1, #0
 800541e:	d040      	beq.n	80054a2 <_free_r+0x8a>
 8005420:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005424:	1f0c      	subs	r4, r1, #4
 8005426:	2b00      	cmp	r3, #0
 8005428:	bfb8      	it	lt
 800542a:	18e4      	addlt	r4, r4, r3
 800542c:	f000 f8dc 	bl	80055e8 <__malloc_lock>
 8005430:	4a1c      	ldr	r2, [pc, #112]	; (80054a4 <_free_r+0x8c>)
 8005432:	6813      	ldr	r3, [r2, #0]
 8005434:	b933      	cbnz	r3, 8005444 <_free_r+0x2c>
 8005436:	6063      	str	r3, [r4, #4]
 8005438:	6014      	str	r4, [r2, #0]
 800543a:	4628      	mov	r0, r5
 800543c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005440:	f000 b8d8 	b.w	80055f4 <__malloc_unlock>
 8005444:	42a3      	cmp	r3, r4
 8005446:	d908      	bls.n	800545a <_free_r+0x42>
 8005448:	6820      	ldr	r0, [r4, #0]
 800544a:	1821      	adds	r1, r4, r0
 800544c:	428b      	cmp	r3, r1
 800544e:	bf01      	itttt	eq
 8005450:	6819      	ldreq	r1, [r3, #0]
 8005452:	685b      	ldreq	r3, [r3, #4]
 8005454:	1809      	addeq	r1, r1, r0
 8005456:	6021      	streq	r1, [r4, #0]
 8005458:	e7ed      	b.n	8005436 <_free_r+0x1e>
 800545a:	461a      	mov	r2, r3
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	b10b      	cbz	r3, 8005464 <_free_r+0x4c>
 8005460:	42a3      	cmp	r3, r4
 8005462:	d9fa      	bls.n	800545a <_free_r+0x42>
 8005464:	6811      	ldr	r1, [r2, #0]
 8005466:	1850      	adds	r0, r2, r1
 8005468:	42a0      	cmp	r0, r4
 800546a:	d10b      	bne.n	8005484 <_free_r+0x6c>
 800546c:	6820      	ldr	r0, [r4, #0]
 800546e:	4401      	add	r1, r0
 8005470:	1850      	adds	r0, r2, r1
 8005472:	4283      	cmp	r3, r0
 8005474:	6011      	str	r1, [r2, #0]
 8005476:	d1e0      	bne.n	800543a <_free_r+0x22>
 8005478:	6818      	ldr	r0, [r3, #0]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	4408      	add	r0, r1
 800547e:	6010      	str	r0, [r2, #0]
 8005480:	6053      	str	r3, [r2, #4]
 8005482:	e7da      	b.n	800543a <_free_r+0x22>
 8005484:	d902      	bls.n	800548c <_free_r+0x74>
 8005486:	230c      	movs	r3, #12
 8005488:	602b      	str	r3, [r5, #0]
 800548a:	e7d6      	b.n	800543a <_free_r+0x22>
 800548c:	6820      	ldr	r0, [r4, #0]
 800548e:	1821      	adds	r1, r4, r0
 8005490:	428b      	cmp	r3, r1
 8005492:	bf01      	itttt	eq
 8005494:	6819      	ldreq	r1, [r3, #0]
 8005496:	685b      	ldreq	r3, [r3, #4]
 8005498:	1809      	addeq	r1, r1, r0
 800549a:	6021      	streq	r1, [r4, #0]
 800549c:	6063      	str	r3, [r4, #4]
 800549e:	6054      	str	r4, [r2, #4]
 80054a0:	e7cb      	b.n	800543a <_free_r+0x22>
 80054a2:	bd38      	pop	{r3, r4, r5, pc}
 80054a4:	200004a0 	.word	0x200004a0

080054a8 <sbrk_aligned>:
 80054a8:	b570      	push	{r4, r5, r6, lr}
 80054aa:	4e0e      	ldr	r6, [pc, #56]	; (80054e4 <sbrk_aligned+0x3c>)
 80054ac:	460c      	mov	r4, r1
 80054ae:	6831      	ldr	r1, [r6, #0]
 80054b0:	4605      	mov	r5, r0
 80054b2:	b911      	cbnz	r1, 80054ba <sbrk_aligned+0x12>
 80054b4:	f000 fe2c 	bl	8006110 <_sbrk_r>
 80054b8:	6030      	str	r0, [r6, #0]
 80054ba:	4621      	mov	r1, r4
 80054bc:	4628      	mov	r0, r5
 80054be:	f000 fe27 	bl	8006110 <_sbrk_r>
 80054c2:	1c43      	adds	r3, r0, #1
 80054c4:	d00a      	beq.n	80054dc <sbrk_aligned+0x34>
 80054c6:	1cc4      	adds	r4, r0, #3
 80054c8:	f024 0403 	bic.w	r4, r4, #3
 80054cc:	42a0      	cmp	r0, r4
 80054ce:	d007      	beq.n	80054e0 <sbrk_aligned+0x38>
 80054d0:	1a21      	subs	r1, r4, r0
 80054d2:	4628      	mov	r0, r5
 80054d4:	f000 fe1c 	bl	8006110 <_sbrk_r>
 80054d8:	3001      	adds	r0, #1
 80054da:	d101      	bne.n	80054e0 <sbrk_aligned+0x38>
 80054dc:	f04f 34ff 	mov.w	r4, #4294967295
 80054e0:	4620      	mov	r0, r4
 80054e2:	bd70      	pop	{r4, r5, r6, pc}
 80054e4:	200004a4 	.word	0x200004a4

080054e8 <_malloc_r>:
 80054e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054ec:	1ccd      	adds	r5, r1, #3
 80054ee:	f025 0503 	bic.w	r5, r5, #3
 80054f2:	3508      	adds	r5, #8
 80054f4:	2d0c      	cmp	r5, #12
 80054f6:	bf38      	it	cc
 80054f8:	250c      	movcc	r5, #12
 80054fa:	2d00      	cmp	r5, #0
 80054fc:	4607      	mov	r7, r0
 80054fe:	db01      	blt.n	8005504 <_malloc_r+0x1c>
 8005500:	42a9      	cmp	r1, r5
 8005502:	d905      	bls.n	8005510 <_malloc_r+0x28>
 8005504:	230c      	movs	r3, #12
 8005506:	2600      	movs	r6, #0
 8005508:	603b      	str	r3, [r7, #0]
 800550a:	4630      	mov	r0, r6
 800550c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005510:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80055e4 <_malloc_r+0xfc>
 8005514:	f000 f868 	bl	80055e8 <__malloc_lock>
 8005518:	f8d8 3000 	ldr.w	r3, [r8]
 800551c:	461c      	mov	r4, r3
 800551e:	bb5c      	cbnz	r4, 8005578 <_malloc_r+0x90>
 8005520:	4629      	mov	r1, r5
 8005522:	4638      	mov	r0, r7
 8005524:	f7ff ffc0 	bl	80054a8 <sbrk_aligned>
 8005528:	1c43      	adds	r3, r0, #1
 800552a:	4604      	mov	r4, r0
 800552c:	d155      	bne.n	80055da <_malloc_r+0xf2>
 800552e:	f8d8 4000 	ldr.w	r4, [r8]
 8005532:	4626      	mov	r6, r4
 8005534:	2e00      	cmp	r6, #0
 8005536:	d145      	bne.n	80055c4 <_malloc_r+0xdc>
 8005538:	2c00      	cmp	r4, #0
 800553a:	d048      	beq.n	80055ce <_malloc_r+0xe6>
 800553c:	6823      	ldr	r3, [r4, #0]
 800553e:	4631      	mov	r1, r6
 8005540:	4638      	mov	r0, r7
 8005542:	eb04 0903 	add.w	r9, r4, r3
 8005546:	f000 fde3 	bl	8006110 <_sbrk_r>
 800554a:	4581      	cmp	r9, r0
 800554c:	d13f      	bne.n	80055ce <_malloc_r+0xe6>
 800554e:	6821      	ldr	r1, [r4, #0]
 8005550:	4638      	mov	r0, r7
 8005552:	1a6d      	subs	r5, r5, r1
 8005554:	4629      	mov	r1, r5
 8005556:	f7ff ffa7 	bl	80054a8 <sbrk_aligned>
 800555a:	3001      	adds	r0, #1
 800555c:	d037      	beq.n	80055ce <_malloc_r+0xe6>
 800555e:	6823      	ldr	r3, [r4, #0]
 8005560:	442b      	add	r3, r5
 8005562:	6023      	str	r3, [r4, #0]
 8005564:	f8d8 3000 	ldr.w	r3, [r8]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d038      	beq.n	80055de <_malloc_r+0xf6>
 800556c:	685a      	ldr	r2, [r3, #4]
 800556e:	42a2      	cmp	r2, r4
 8005570:	d12b      	bne.n	80055ca <_malloc_r+0xe2>
 8005572:	2200      	movs	r2, #0
 8005574:	605a      	str	r2, [r3, #4]
 8005576:	e00f      	b.n	8005598 <_malloc_r+0xb0>
 8005578:	6822      	ldr	r2, [r4, #0]
 800557a:	1b52      	subs	r2, r2, r5
 800557c:	d41f      	bmi.n	80055be <_malloc_r+0xd6>
 800557e:	2a0b      	cmp	r2, #11
 8005580:	d917      	bls.n	80055b2 <_malloc_r+0xca>
 8005582:	1961      	adds	r1, r4, r5
 8005584:	42a3      	cmp	r3, r4
 8005586:	6025      	str	r5, [r4, #0]
 8005588:	bf18      	it	ne
 800558a:	6059      	strne	r1, [r3, #4]
 800558c:	6863      	ldr	r3, [r4, #4]
 800558e:	bf08      	it	eq
 8005590:	f8c8 1000 	streq.w	r1, [r8]
 8005594:	5162      	str	r2, [r4, r5]
 8005596:	604b      	str	r3, [r1, #4]
 8005598:	4638      	mov	r0, r7
 800559a:	f104 060b 	add.w	r6, r4, #11
 800559e:	f000 f829 	bl	80055f4 <__malloc_unlock>
 80055a2:	f026 0607 	bic.w	r6, r6, #7
 80055a6:	1d23      	adds	r3, r4, #4
 80055a8:	1af2      	subs	r2, r6, r3
 80055aa:	d0ae      	beq.n	800550a <_malloc_r+0x22>
 80055ac:	1b9b      	subs	r3, r3, r6
 80055ae:	50a3      	str	r3, [r4, r2]
 80055b0:	e7ab      	b.n	800550a <_malloc_r+0x22>
 80055b2:	42a3      	cmp	r3, r4
 80055b4:	6862      	ldr	r2, [r4, #4]
 80055b6:	d1dd      	bne.n	8005574 <_malloc_r+0x8c>
 80055b8:	f8c8 2000 	str.w	r2, [r8]
 80055bc:	e7ec      	b.n	8005598 <_malloc_r+0xb0>
 80055be:	4623      	mov	r3, r4
 80055c0:	6864      	ldr	r4, [r4, #4]
 80055c2:	e7ac      	b.n	800551e <_malloc_r+0x36>
 80055c4:	4634      	mov	r4, r6
 80055c6:	6876      	ldr	r6, [r6, #4]
 80055c8:	e7b4      	b.n	8005534 <_malloc_r+0x4c>
 80055ca:	4613      	mov	r3, r2
 80055cc:	e7cc      	b.n	8005568 <_malloc_r+0x80>
 80055ce:	230c      	movs	r3, #12
 80055d0:	4638      	mov	r0, r7
 80055d2:	603b      	str	r3, [r7, #0]
 80055d4:	f000 f80e 	bl	80055f4 <__malloc_unlock>
 80055d8:	e797      	b.n	800550a <_malloc_r+0x22>
 80055da:	6025      	str	r5, [r4, #0]
 80055dc:	e7dc      	b.n	8005598 <_malloc_r+0xb0>
 80055de:	605b      	str	r3, [r3, #4]
 80055e0:	deff      	udf	#255	; 0xff
 80055e2:	bf00      	nop
 80055e4:	200004a0 	.word	0x200004a0

080055e8 <__malloc_lock>:
 80055e8:	4801      	ldr	r0, [pc, #4]	; (80055f0 <__malloc_lock+0x8>)
 80055ea:	f7ff bf12 	b.w	8005412 <__retarget_lock_acquire_recursive>
 80055ee:	bf00      	nop
 80055f0:	2000049c 	.word	0x2000049c

080055f4 <__malloc_unlock>:
 80055f4:	4801      	ldr	r0, [pc, #4]	; (80055fc <__malloc_unlock+0x8>)
 80055f6:	f7ff bf0d 	b.w	8005414 <__retarget_lock_release_recursive>
 80055fa:	bf00      	nop
 80055fc:	2000049c 	.word	0x2000049c

08005600 <__ssputs_r>:
 8005600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005604:	461f      	mov	r7, r3
 8005606:	688e      	ldr	r6, [r1, #8]
 8005608:	4682      	mov	sl, r0
 800560a:	42be      	cmp	r6, r7
 800560c:	460c      	mov	r4, r1
 800560e:	4690      	mov	r8, r2
 8005610:	680b      	ldr	r3, [r1, #0]
 8005612:	d82c      	bhi.n	800566e <__ssputs_r+0x6e>
 8005614:	898a      	ldrh	r2, [r1, #12]
 8005616:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800561a:	d026      	beq.n	800566a <__ssputs_r+0x6a>
 800561c:	6965      	ldr	r5, [r4, #20]
 800561e:	6909      	ldr	r1, [r1, #16]
 8005620:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005624:	eba3 0901 	sub.w	r9, r3, r1
 8005628:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800562c:	1c7b      	adds	r3, r7, #1
 800562e:	444b      	add	r3, r9
 8005630:	106d      	asrs	r5, r5, #1
 8005632:	429d      	cmp	r5, r3
 8005634:	bf38      	it	cc
 8005636:	461d      	movcc	r5, r3
 8005638:	0553      	lsls	r3, r2, #21
 800563a:	d527      	bpl.n	800568c <__ssputs_r+0x8c>
 800563c:	4629      	mov	r1, r5
 800563e:	f7ff ff53 	bl	80054e8 <_malloc_r>
 8005642:	4606      	mov	r6, r0
 8005644:	b360      	cbz	r0, 80056a0 <__ssputs_r+0xa0>
 8005646:	464a      	mov	r2, r9
 8005648:	6921      	ldr	r1, [r4, #16]
 800564a:	f000 fd7f 	bl	800614c <memcpy>
 800564e:	89a3      	ldrh	r3, [r4, #12]
 8005650:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005658:	81a3      	strh	r3, [r4, #12]
 800565a:	6126      	str	r6, [r4, #16]
 800565c:	444e      	add	r6, r9
 800565e:	6026      	str	r6, [r4, #0]
 8005660:	463e      	mov	r6, r7
 8005662:	6165      	str	r5, [r4, #20]
 8005664:	eba5 0509 	sub.w	r5, r5, r9
 8005668:	60a5      	str	r5, [r4, #8]
 800566a:	42be      	cmp	r6, r7
 800566c:	d900      	bls.n	8005670 <__ssputs_r+0x70>
 800566e:	463e      	mov	r6, r7
 8005670:	4632      	mov	r2, r6
 8005672:	4641      	mov	r1, r8
 8005674:	6820      	ldr	r0, [r4, #0]
 8005676:	f000 fd31 	bl	80060dc <memmove>
 800567a:	2000      	movs	r0, #0
 800567c:	68a3      	ldr	r3, [r4, #8]
 800567e:	1b9b      	subs	r3, r3, r6
 8005680:	60a3      	str	r3, [r4, #8]
 8005682:	6823      	ldr	r3, [r4, #0]
 8005684:	4433      	add	r3, r6
 8005686:	6023      	str	r3, [r4, #0]
 8005688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800568c:	462a      	mov	r2, r5
 800568e:	f000 fd6b 	bl	8006168 <_realloc_r>
 8005692:	4606      	mov	r6, r0
 8005694:	2800      	cmp	r0, #0
 8005696:	d1e0      	bne.n	800565a <__ssputs_r+0x5a>
 8005698:	4650      	mov	r0, sl
 800569a:	6921      	ldr	r1, [r4, #16]
 800569c:	f7ff febc 	bl	8005418 <_free_r>
 80056a0:	230c      	movs	r3, #12
 80056a2:	f8ca 3000 	str.w	r3, [sl]
 80056a6:	89a3      	ldrh	r3, [r4, #12]
 80056a8:	f04f 30ff 	mov.w	r0, #4294967295
 80056ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056b0:	81a3      	strh	r3, [r4, #12]
 80056b2:	e7e9      	b.n	8005688 <__ssputs_r+0x88>

080056b4 <_svfiprintf_r>:
 80056b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056b8:	4698      	mov	r8, r3
 80056ba:	898b      	ldrh	r3, [r1, #12]
 80056bc:	4607      	mov	r7, r0
 80056be:	061b      	lsls	r3, r3, #24
 80056c0:	460d      	mov	r5, r1
 80056c2:	4614      	mov	r4, r2
 80056c4:	b09d      	sub	sp, #116	; 0x74
 80056c6:	d50e      	bpl.n	80056e6 <_svfiprintf_r+0x32>
 80056c8:	690b      	ldr	r3, [r1, #16]
 80056ca:	b963      	cbnz	r3, 80056e6 <_svfiprintf_r+0x32>
 80056cc:	2140      	movs	r1, #64	; 0x40
 80056ce:	f7ff ff0b 	bl	80054e8 <_malloc_r>
 80056d2:	6028      	str	r0, [r5, #0]
 80056d4:	6128      	str	r0, [r5, #16]
 80056d6:	b920      	cbnz	r0, 80056e2 <_svfiprintf_r+0x2e>
 80056d8:	230c      	movs	r3, #12
 80056da:	603b      	str	r3, [r7, #0]
 80056dc:	f04f 30ff 	mov.w	r0, #4294967295
 80056e0:	e0d0      	b.n	8005884 <_svfiprintf_r+0x1d0>
 80056e2:	2340      	movs	r3, #64	; 0x40
 80056e4:	616b      	str	r3, [r5, #20]
 80056e6:	2300      	movs	r3, #0
 80056e8:	9309      	str	r3, [sp, #36]	; 0x24
 80056ea:	2320      	movs	r3, #32
 80056ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80056f0:	2330      	movs	r3, #48	; 0x30
 80056f2:	f04f 0901 	mov.w	r9, #1
 80056f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80056fa:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800589c <_svfiprintf_r+0x1e8>
 80056fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005702:	4623      	mov	r3, r4
 8005704:	469a      	mov	sl, r3
 8005706:	f813 2b01 	ldrb.w	r2, [r3], #1
 800570a:	b10a      	cbz	r2, 8005710 <_svfiprintf_r+0x5c>
 800570c:	2a25      	cmp	r2, #37	; 0x25
 800570e:	d1f9      	bne.n	8005704 <_svfiprintf_r+0x50>
 8005710:	ebba 0b04 	subs.w	fp, sl, r4
 8005714:	d00b      	beq.n	800572e <_svfiprintf_r+0x7a>
 8005716:	465b      	mov	r3, fp
 8005718:	4622      	mov	r2, r4
 800571a:	4629      	mov	r1, r5
 800571c:	4638      	mov	r0, r7
 800571e:	f7ff ff6f 	bl	8005600 <__ssputs_r>
 8005722:	3001      	adds	r0, #1
 8005724:	f000 80a9 	beq.w	800587a <_svfiprintf_r+0x1c6>
 8005728:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800572a:	445a      	add	r2, fp
 800572c:	9209      	str	r2, [sp, #36]	; 0x24
 800572e:	f89a 3000 	ldrb.w	r3, [sl]
 8005732:	2b00      	cmp	r3, #0
 8005734:	f000 80a1 	beq.w	800587a <_svfiprintf_r+0x1c6>
 8005738:	2300      	movs	r3, #0
 800573a:	f04f 32ff 	mov.w	r2, #4294967295
 800573e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005742:	f10a 0a01 	add.w	sl, sl, #1
 8005746:	9304      	str	r3, [sp, #16]
 8005748:	9307      	str	r3, [sp, #28]
 800574a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800574e:	931a      	str	r3, [sp, #104]	; 0x68
 8005750:	4654      	mov	r4, sl
 8005752:	2205      	movs	r2, #5
 8005754:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005758:	4850      	ldr	r0, [pc, #320]	; (800589c <_svfiprintf_r+0x1e8>)
 800575a:	f000 fce9 	bl	8006130 <memchr>
 800575e:	9a04      	ldr	r2, [sp, #16]
 8005760:	b9d8      	cbnz	r0, 800579a <_svfiprintf_r+0xe6>
 8005762:	06d0      	lsls	r0, r2, #27
 8005764:	bf44      	itt	mi
 8005766:	2320      	movmi	r3, #32
 8005768:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800576c:	0711      	lsls	r1, r2, #28
 800576e:	bf44      	itt	mi
 8005770:	232b      	movmi	r3, #43	; 0x2b
 8005772:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005776:	f89a 3000 	ldrb.w	r3, [sl]
 800577a:	2b2a      	cmp	r3, #42	; 0x2a
 800577c:	d015      	beq.n	80057aa <_svfiprintf_r+0xf6>
 800577e:	4654      	mov	r4, sl
 8005780:	2000      	movs	r0, #0
 8005782:	f04f 0c0a 	mov.w	ip, #10
 8005786:	9a07      	ldr	r2, [sp, #28]
 8005788:	4621      	mov	r1, r4
 800578a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800578e:	3b30      	subs	r3, #48	; 0x30
 8005790:	2b09      	cmp	r3, #9
 8005792:	d94d      	bls.n	8005830 <_svfiprintf_r+0x17c>
 8005794:	b1b0      	cbz	r0, 80057c4 <_svfiprintf_r+0x110>
 8005796:	9207      	str	r2, [sp, #28]
 8005798:	e014      	b.n	80057c4 <_svfiprintf_r+0x110>
 800579a:	eba0 0308 	sub.w	r3, r0, r8
 800579e:	fa09 f303 	lsl.w	r3, r9, r3
 80057a2:	4313      	orrs	r3, r2
 80057a4:	46a2      	mov	sl, r4
 80057a6:	9304      	str	r3, [sp, #16]
 80057a8:	e7d2      	b.n	8005750 <_svfiprintf_r+0x9c>
 80057aa:	9b03      	ldr	r3, [sp, #12]
 80057ac:	1d19      	adds	r1, r3, #4
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	9103      	str	r1, [sp, #12]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	bfbb      	ittet	lt
 80057b6:	425b      	neglt	r3, r3
 80057b8:	f042 0202 	orrlt.w	r2, r2, #2
 80057bc:	9307      	strge	r3, [sp, #28]
 80057be:	9307      	strlt	r3, [sp, #28]
 80057c0:	bfb8      	it	lt
 80057c2:	9204      	strlt	r2, [sp, #16]
 80057c4:	7823      	ldrb	r3, [r4, #0]
 80057c6:	2b2e      	cmp	r3, #46	; 0x2e
 80057c8:	d10c      	bne.n	80057e4 <_svfiprintf_r+0x130>
 80057ca:	7863      	ldrb	r3, [r4, #1]
 80057cc:	2b2a      	cmp	r3, #42	; 0x2a
 80057ce:	d134      	bne.n	800583a <_svfiprintf_r+0x186>
 80057d0:	9b03      	ldr	r3, [sp, #12]
 80057d2:	3402      	adds	r4, #2
 80057d4:	1d1a      	adds	r2, r3, #4
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	9203      	str	r2, [sp, #12]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	bfb8      	it	lt
 80057de:	f04f 33ff 	movlt.w	r3, #4294967295
 80057e2:	9305      	str	r3, [sp, #20]
 80057e4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80058a0 <_svfiprintf_r+0x1ec>
 80057e8:	2203      	movs	r2, #3
 80057ea:	4650      	mov	r0, sl
 80057ec:	7821      	ldrb	r1, [r4, #0]
 80057ee:	f000 fc9f 	bl	8006130 <memchr>
 80057f2:	b138      	cbz	r0, 8005804 <_svfiprintf_r+0x150>
 80057f4:	2240      	movs	r2, #64	; 0x40
 80057f6:	9b04      	ldr	r3, [sp, #16]
 80057f8:	eba0 000a 	sub.w	r0, r0, sl
 80057fc:	4082      	lsls	r2, r0
 80057fe:	4313      	orrs	r3, r2
 8005800:	3401      	adds	r4, #1
 8005802:	9304      	str	r3, [sp, #16]
 8005804:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005808:	2206      	movs	r2, #6
 800580a:	4826      	ldr	r0, [pc, #152]	; (80058a4 <_svfiprintf_r+0x1f0>)
 800580c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005810:	f000 fc8e 	bl	8006130 <memchr>
 8005814:	2800      	cmp	r0, #0
 8005816:	d038      	beq.n	800588a <_svfiprintf_r+0x1d6>
 8005818:	4b23      	ldr	r3, [pc, #140]	; (80058a8 <_svfiprintf_r+0x1f4>)
 800581a:	bb1b      	cbnz	r3, 8005864 <_svfiprintf_r+0x1b0>
 800581c:	9b03      	ldr	r3, [sp, #12]
 800581e:	3307      	adds	r3, #7
 8005820:	f023 0307 	bic.w	r3, r3, #7
 8005824:	3308      	adds	r3, #8
 8005826:	9303      	str	r3, [sp, #12]
 8005828:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800582a:	4433      	add	r3, r6
 800582c:	9309      	str	r3, [sp, #36]	; 0x24
 800582e:	e768      	b.n	8005702 <_svfiprintf_r+0x4e>
 8005830:	460c      	mov	r4, r1
 8005832:	2001      	movs	r0, #1
 8005834:	fb0c 3202 	mla	r2, ip, r2, r3
 8005838:	e7a6      	b.n	8005788 <_svfiprintf_r+0xd4>
 800583a:	2300      	movs	r3, #0
 800583c:	f04f 0c0a 	mov.w	ip, #10
 8005840:	4619      	mov	r1, r3
 8005842:	3401      	adds	r4, #1
 8005844:	9305      	str	r3, [sp, #20]
 8005846:	4620      	mov	r0, r4
 8005848:	f810 2b01 	ldrb.w	r2, [r0], #1
 800584c:	3a30      	subs	r2, #48	; 0x30
 800584e:	2a09      	cmp	r2, #9
 8005850:	d903      	bls.n	800585a <_svfiprintf_r+0x1a6>
 8005852:	2b00      	cmp	r3, #0
 8005854:	d0c6      	beq.n	80057e4 <_svfiprintf_r+0x130>
 8005856:	9105      	str	r1, [sp, #20]
 8005858:	e7c4      	b.n	80057e4 <_svfiprintf_r+0x130>
 800585a:	4604      	mov	r4, r0
 800585c:	2301      	movs	r3, #1
 800585e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005862:	e7f0      	b.n	8005846 <_svfiprintf_r+0x192>
 8005864:	ab03      	add	r3, sp, #12
 8005866:	9300      	str	r3, [sp, #0]
 8005868:	462a      	mov	r2, r5
 800586a:	4638      	mov	r0, r7
 800586c:	4b0f      	ldr	r3, [pc, #60]	; (80058ac <_svfiprintf_r+0x1f8>)
 800586e:	a904      	add	r1, sp, #16
 8005870:	f3af 8000 	nop.w
 8005874:	1c42      	adds	r2, r0, #1
 8005876:	4606      	mov	r6, r0
 8005878:	d1d6      	bne.n	8005828 <_svfiprintf_r+0x174>
 800587a:	89ab      	ldrh	r3, [r5, #12]
 800587c:	065b      	lsls	r3, r3, #25
 800587e:	f53f af2d 	bmi.w	80056dc <_svfiprintf_r+0x28>
 8005882:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005884:	b01d      	add	sp, #116	; 0x74
 8005886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800588a:	ab03      	add	r3, sp, #12
 800588c:	9300      	str	r3, [sp, #0]
 800588e:	462a      	mov	r2, r5
 8005890:	4638      	mov	r0, r7
 8005892:	4b06      	ldr	r3, [pc, #24]	; (80058ac <_svfiprintf_r+0x1f8>)
 8005894:	a904      	add	r1, sp, #16
 8005896:	f000 f9bf 	bl	8005c18 <_printf_i>
 800589a:	e7eb      	b.n	8005874 <_svfiprintf_r+0x1c0>
 800589c:	08006376 	.word	0x08006376
 80058a0:	0800637c 	.word	0x0800637c
 80058a4:	08006380 	.word	0x08006380
 80058a8:	00000000 	.word	0x00000000
 80058ac:	08005601 	.word	0x08005601

080058b0 <__sfputc_r>:
 80058b0:	6893      	ldr	r3, [r2, #8]
 80058b2:	b410      	push	{r4}
 80058b4:	3b01      	subs	r3, #1
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	6093      	str	r3, [r2, #8]
 80058ba:	da07      	bge.n	80058cc <__sfputc_r+0x1c>
 80058bc:	6994      	ldr	r4, [r2, #24]
 80058be:	42a3      	cmp	r3, r4
 80058c0:	db01      	blt.n	80058c6 <__sfputc_r+0x16>
 80058c2:	290a      	cmp	r1, #10
 80058c4:	d102      	bne.n	80058cc <__sfputc_r+0x1c>
 80058c6:	bc10      	pop	{r4}
 80058c8:	f000 bb72 	b.w	8005fb0 <__swbuf_r>
 80058cc:	6813      	ldr	r3, [r2, #0]
 80058ce:	1c58      	adds	r0, r3, #1
 80058d0:	6010      	str	r0, [r2, #0]
 80058d2:	7019      	strb	r1, [r3, #0]
 80058d4:	4608      	mov	r0, r1
 80058d6:	bc10      	pop	{r4}
 80058d8:	4770      	bx	lr

080058da <__sfputs_r>:
 80058da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058dc:	4606      	mov	r6, r0
 80058de:	460f      	mov	r7, r1
 80058e0:	4614      	mov	r4, r2
 80058e2:	18d5      	adds	r5, r2, r3
 80058e4:	42ac      	cmp	r4, r5
 80058e6:	d101      	bne.n	80058ec <__sfputs_r+0x12>
 80058e8:	2000      	movs	r0, #0
 80058ea:	e007      	b.n	80058fc <__sfputs_r+0x22>
 80058ec:	463a      	mov	r2, r7
 80058ee:	4630      	mov	r0, r6
 80058f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058f4:	f7ff ffdc 	bl	80058b0 <__sfputc_r>
 80058f8:	1c43      	adds	r3, r0, #1
 80058fa:	d1f3      	bne.n	80058e4 <__sfputs_r+0xa>
 80058fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005900 <_vfiprintf_r>:
 8005900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005904:	460d      	mov	r5, r1
 8005906:	4614      	mov	r4, r2
 8005908:	4698      	mov	r8, r3
 800590a:	4606      	mov	r6, r0
 800590c:	b09d      	sub	sp, #116	; 0x74
 800590e:	b118      	cbz	r0, 8005918 <_vfiprintf_r+0x18>
 8005910:	6a03      	ldr	r3, [r0, #32]
 8005912:	b90b      	cbnz	r3, 8005918 <_vfiprintf_r+0x18>
 8005914:	f7ff fc58 	bl	80051c8 <__sinit>
 8005918:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800591a:	07d9      	lsls	r1, r3, #31
 800591c:	d405      	bmi.n	800592a <_vfiprintf_r+0x2a>
 800591e:	89ab      	ldrh	r3, [r5, #12]
 8005920:	059a      	lsls	r2, r3, #22
 8005922:	d402      	bmi.n	800592a <_vfiprintf_r+0x2a>
 8005924:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005926:	f7ff fd74 	bl	8005412 <__retarget_lock_acquire_recursive>
 800592a:	89ab      	ldrh	r3, [r5, #12]
 800592c:	071b      	lsls	r3, r3, #28
 800592e:	d501      	bpl.n	8005934 <_vfiprintf_r+0x34>
 8005930:	692b      	ldr	r3, [r5, #16]
 8005932:	b99b      	cbnz	r3, 800595c <_vfiprintf_r+0x5c>
 8005934:	4629      	mov	r1, r5
 8005936:	4630      	mov	r0, r6
 8005938:	f000 fb78 	bl	800602c <__swsetup_r>
 800593c:	b170      	cbz	r0, 800595c <_vfiprintf_r+0x5c>
 800593e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005940:	07dc      	lsls	r4, r3, #31
 8005942:	d504      	bpl.n	800594e <_vfiprintf_r+0x4e>
 8005944:	f04f 30ff 	mov.w	r0, #4294967295
 8005948:	b01d      	add	sp, #116	; 0x74
 800594a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800594e:	89ab      	ldrh	r3, [r5, #12]
 8005950:	0598      	lsls	r0, r3, #22
 8005952:	d4f7      	bmi.n	8005944 <_vfiprintf_r+0x44>
 8005954:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005956:	f7ff fd5d 	bl	8005414 <__retarget_lock_release_recursive>
 800595a:	e7f3      	b.n	8005944 <_vfiprintf_r+0x44>
 800595c:	2300      	movs	r3, #0
 800595e:	9309      	str	r3, [sp, #36]	; 0x24
 8005960:	2320      	movs	r3, #32
 8005962:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005966:	2330      	movs	r3, #48	; 0x30
 8005968:	f04f 0901 	mov.w	r9, #1
 800596c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005970:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8005b20 <_vfiprintf_r+0x220>
 8005974:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005978:	4623      	mov	r3, r4
 800597a:	469a      	mov	sl, r3
 800597c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005980:	b10a      	cbz	r2, 8005986 <_vfiprintf_r+0x86>
 8005982:	2a25      	cmp	r2, #37	; 0x25
 8005984:	d1f9      	bne.n	800597a <_vfiprintf_r+0x7a>
 8005986:	ebba 0b04 	subs.w	fp, sl, r4
 800598a:	d00b      	beq.n	80059a4 <_vfiprintf_r+0xa4>
 800598c:	465b      	mov	r3, fp
 800598e:	4622      	mov	r2, r4
 8005990:	4629      	mov	r1, r5
 8005992:	4630      	mov	r0, r6
 8005994:	f7ff ffa1 	bl	80058da <__sfputs_r>
 8005998:	3001      	adds	r0, #1
 800599a:	f000 80a9 	beq.w	8005af0 <_vfiprintf_r+0x1f0>
 800599e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059a0:	445a      	add	r2, fp
 80059a2:	9209      	str	r2, [sp, #36]	; 0x24
 80059a4:	f89a 3000 	ldrb.w	r3, [sl]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	f000 80a1 	beq.w	8005af0 <_vfiprintf_r+0x1f0>
 80059ae:	2300      	movs	r3, #0
 80059b0:	f04f 32ff 	mov.w	r2, #4294967295
 80059b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80059b8:	f10a 0a01 	add.w	sl, sl, #1
 80059bc:	9304      	str	r3, [sp, #16]
 80059be:	9307      	str	r3, [sp, #28]
 80059c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80059c4:	931a      	str	r3, [sp, #104]	; 0x68
 80059c6:	4654      	mov	r4, sl
 80059c8:	2205      	movs	r2, #5
 80059ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059ce:	4854      	ldr	r0, [pc, #336]	; (8005b20 <_vfiprintf_r+0x220>)
 80059d0:	f000 fbae 	bl	8006130 <memchr>
 80059d4:	9a04      	ldr	r2, [sp, #16]
 80059d6:	b9d8      	cbnz	r0, 8005a10 <_vfiprintf_r+0x110>
 80059d8:	06d1      	lsls	r1, r2, #27
 80059da:	bf44      	itt	mi
 80059dc:	2320      	movmi	r3, #32
 80059de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059e2:	0713      	lsls	r3, r2, #28
 80059e4:	bf44      	itt	mi
 80059e6:	232b      	movmi	r3, #43	; 0x2b
 80059e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059ec:	f89a 3000 	ldrb.w	r3, [sl]
 80059f0:	2b2a      	cmp	r3, #42	; 0x2a
 80059f2:	d015      	beq.n	8005a20 <_vfiprintf_r+0x120>
 80059f4:	4654      	mov	r4, sl
 80059f6:	2000      	movs	r0, #0
 80059f8:	f04f 0c0a 	mov.w	ip, #10
 80059fc:	9a07      	ldr	r2, [sp, #28]
 80059fe:	4621      	mov	r1, r4
 8005a00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a04:	3b30      	subs	r3, #48	; 0x30
 8005a06:	2b09      	cmp	r3, #9
 8005a08:	d94d      	bls.n	8005aa6 <_vfiprintf_r+0x1a6>
 8005a0a:	b1b0      	cbz	r0, 8005a3a <_vfiprintf_r+0x13a>
 8005a0c:	9207      	str	r2, [sp, #28]
 8005a0e:	e014      	b.n	8005a3a <_vfiprintf_r+0x13a>
 8005a10:	eba0 0308 	sub.w	r3, r0, r8
 8005a14:	fa09 f303 	lsl.w	r3, r9, r3
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	46a2      	mov	sl, r4
 8005a1c:	9304      	str	r3, [sp, #16]
 8005a1e:	e7d2      	b.n	80059c6 <_vfiprintf_r+0xc6>
 8005a20:	9b03      	ldr	r3, [sp, #12]
 8005a22:	1d19      	adds	r1, r3, #4
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	9103      	str	r1, [sp, #12]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	bfbb      	ittet	lt
 8005a2c:	425b      	neglt	r3, r3
 8005a2e:	f042 0202 	orrlt.w	r2, r2, #2
 8005a32:	9307      	strge	r3, [sp, #28]
 8005a34:	9307      	strlt	r3, [sp, #28]
 8005a36:	bfb8      	it	lt
 8005a38:	9204      	strlt	r2, [sp, #16]
 8005a3a:	7823      	ldrb	r3, [r4, #0]
 8005a3c:	2b2e      	cmp	r3, #46	; 0x2e
 8005a3e:	d10c      	bne.n	8005a5a <_vfiprintf_r+0x15a>
 8005a40:	7863      	ldrb	r3, [r4, #1]
 8005a42:	2b2a      	cmp	r3, #42	; 0x2a
 8005a44:	d134      	bne.n	8005ab0 <_vfiprintf_r+0x1b0>
 8005a46:	9b03      	ldr	r3, [sp, #12]
 8005a48:	3402      	adds	r4, #2
 8005a4a:	1d1a      	adds	r2, r3, #4
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	9203      	str	r2, [sp, #12]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	bfb8      	it	lt
 8005a54:	f04f 33ff 	movlt.w	r3, #4294967295
 8005a58:	9305      	str	r3, [sp, #20]
 8005a5a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005b24 <_vfiprintf_r+0x224>
 8005a5e:	2203      	movs	r2, #3
 8005a60:	4650      	mov	r0, sl
 8005a62:	7821      	ldrb	r1, [r4, #0]
 8005a64:	f000 fb64 	bl	8006130 <memchr>
 8005a68:	b138      	cbz	r0, 8005a7a <_vfiprintf_r+0x17a>
 8005a6a:	2240      	movs	r2, #64	; 0x40
 8005a6c:	9b04      	ldr	r3, [sp, #16]
 8005a6e:	eba0 000a 	sub.w	r0, r0, sl
 8005a72:	4082      	lsls	r2, r0
 8005a74:	4313      	orrs	r3, r2
 8005a76:	3401      	adds	r4, #1
 8005a78:	9304      	str	r3, [sp, #16]
 8005a7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a7e:	2206      	movs	r2, #6
 8005a80:	4829      	ldr	r0, [pc, #164]	; (8005b28 <_vfiprintf_r+0x228>)
 8005a82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a86:	f000 fb53 	bl	8006130 <memchr>
 8005a8a:	2800      	cmp	r0, #0
 8005a8c:	d03f      	beq.n	8005b0e <_vfiprintf_r+0x20e>
 8005a8e:	4b27      	ldr	r3, [pc, #156]	; (8005b2c <_vfiprintf_r+0x22c>)
 8005a90:	bb1b      	cbnz	r3, 8005ada <_vfiprintf_r+0x1da>
 8005a92:	9b03      	ldr	r3, [sp, #12]
 8005a94:	3307      	adds	r3, #7
 8005a96:	f023 0307 	bic.w	r3, r3, #7
 8005a9a:	3308      	adds	r3, #8
 8005a9c:	9303      	str	r3, [sp, #12]
 8005a9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005aa0:	443b      	add	r3, r7
 8005aa2:	9309      	str	r3, [sp, #36]	; 0x24
 8005aa4:	e768      	b.n	8005978 <_vfiprintf_r+0x78>
 8005aa6:	460c      	mov	r4, r1
 8005aa8:	2001      	movs	r0, #1
 8005aaa:	fb0c 3202 	mla	r2, ip, r2, r3
 8005aae:	e7a6      	b.n	80059fe <_vfiprintf_r+0xfe>
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	f04f 0c0a 	mov.w	ip, #10
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	3401      	adds	r4, #1
 8005aba:	9305      	str	r3, [sp, #20]
 8005abc:	4620      	mov	r0, r4
 8005abe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ac2:	3a30      	subs	r2, #48	; 0x30
 8005ac4:	2a09      	cmp	r2, #9
 8005ac6:	d903      	bls.n	8005ad0 <_vfiprintf_r+0x1d0>
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d0c6      	beq.n	8005a5a <_vfiprintf_r+0x15a>
 8005acc:	9105      	str	r1, [sp, #20]
 8005ace:	e7c4      	b.n	8005a5a <_vfiprintf_r+0x15a>
 8005ad0:	4604      	mov	r4, r0
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ad8:	e7f0      	b.n	8005abc <_vfiprintf_r+0x1bc>
 8005ada:	ab03      	add	r3, sp, #12
 8005adc:	9300      	str	r3, [sp, #0]
 8005ade:	462a      	mov	r2, r5
 8005ae0:	4630      	mov	r0, r6
 8005ae2:	4b13      	ldr	r3, [pc, #76]	; (8005b30 <_vfiprintf_r+0x230>)
 8005ae4:	a904      	add	r1, sp, #16
 8005ae6:	f3af 8000 	nop.w
 8005aea:	4607      	mov	r7, r0
 8005aec:	1c78      	adds	r0, r7, #1
 8005aee:	d1d6      	bne.n	8005a9e <_vfiprintf_r+0x19e>
 8005af0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005af2:	07d9      	lsls	r1, r3, #31
 8005af4:	d405      	bmi.n	8005b02 <_vfiprintf_r+0x202>
 8005af6:	89ab      	ldrh	r3, [r5, #12]
 8005af8:	059a      	lsls	r2, r3, #22
 8005afa:	d402      	bmi.n	8005b02 <_vfiprintf_r+0x202>
 8005afc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005afe:	f7ff fc89 	bl	8005414 <__retarget_lock_release_recursive>
 8005b02:	89ab      	ldrh	r3, [r5, #12]
 8005b04:	065b      	lsls	r3, r3, #25
 8005b06:	f53f af1d 	bmi.w	8005944 <_vfiprintf_r+0x44>
 8005b0a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b0c:	e71c      	b.n	8005948 <_vfiprintf_r+0x48>
 8005b0e:	ab03      	add	r3, sp, #12
 8005b10:	9300      	str	r3, [sp, #0]
 8005b12:	462a      	mov	r2, r5
 8005b14:	4630      	mov	r0, r6
 8005b16:	4b06      	ldr	r3, [pc, #24]	; (8005b30 <_vfiprintf_r+0x230>)
 8005b18:	a904      	add	r1, sp, #16
 8005b1a:	f000 f87d 	bl	8005c18 <_printf_i>
 8005b1e:	e7e4      	b.n	8005aea <_vfiprintf_r+0x1ea>
 8005b20:	08006376 	.word	0x08006376
 8005b24:	0800637c 	.word	0x0800637c
 8005b28:	08006380 	.word	0x08006380
 8005b2c:	00000000 	.word	0x00000000
 8005b30:	080058db 	.word	0x080058db

08005b34 <_printf_common>:
 8005b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b38:	4616      	mov	r6, r2
 8005b3a:	4699      	mov	r9, r3
 8005b3c:	688a      	ldr	r2, [r1, #8]
 8005b3e:	690b      	ldr	r3, [r1, #16]
 8005b40:	4607      	mov	r7, r0
 8005b42:	4293      	cmp	r3, r2
 8005b44:	bfb8      	it	lt
 8005b46:	4613      	movlt	r3, r2
 8005b48:	6033      	str	r3, [r6, #0]
 8005b4a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b4e:	460c      	mov	r4, r1
 8005b50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b54:	b10a      	cbz	r2, 8005b5a <_printf_common+0x26>
 8005b56:	3301      	adds	r3, #1
 8005b58:	6033      	str	r3, [r6, #0]
 8005b5a:	6823      	ldr	r3, [r4, #0]
 8005b5c:	0699      	lsls	r1, r3, #26
 8005b5e:	bf42      	ittt	mi
 8005b60:	6833      	ldrmi	r3, [r6, #0]
 8005b62:	3302      	addmi	r3, #2
 8005b64:	6033      	strmi	r3, [r6, #0]
 8005b66:	6825      	ldr	r5, [r4, #0]
 8005b68:	f015 0506 	ands.w	r5, r5, #6
 8005b6c:	d106      	bne.n	8005b7c <_printf_common+0x48>
 8005b6e:	f104 0a19 	add.w	sl, r4, #25
 8005b72:	68e3      	ldr	r3, [r4, #12]
 8005b74:	6832      	ldr	r2, [r6, #0]
 8005b76:	1a9b      	subs	r3, r3, r2
 8005b78:	42ab      	cmp	r3, r5
 8005b7a:	dc2b      	bgt.n	8005bd4 <_printf_common+0xa0>
 8005b7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b80:	1e13      	subs	r3, r2, #0
 8005b82:	6822      	ldr	r2, [r4, #0]
 8005b84:	bf18      	it	ne
 8005b86:	2301      	movne	r3, #1
 8005b88:	0692      	lsls	r2, r2, #26
 8005b8a:	d430      	bmi.n	8005bee <_printf_common+0xba>
 8005b8c:	4649      	mov	r1, r9
 8005b8e:	4638      	mov	r0, r7
 8005b90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b94:	47c0      	blx	r8
 8005b96:	3001      	adds	r0, #1
 8005b98:	d023      	beq.n	8005be2 <_printf_common+0xae>
 8005b9a:	6823      	ldr	r3, [r4, #0]
 8005b9c:	6922      	ldr	r2, [r4, #16]
 8005b9e:	f003 0306 	and.w	r3, r3, #6
 8005ba2:	2b04      	cmp	r3, #4
 8005ba4:	bf14      	ite	ne
 8005ba6:	2500      	movne	r5, #0
 8005ba8:	6833      	ldreq	r3, [r6, #0]
 8005baa:	f04f 0600 	mov.w	r6, #0
 8005bae:	bf08      	it	eq
 8005bb0:	68e5      	ldreq	r5, [r4, #12]
 8005bb2:	f104 041a 	add.w	r4, r4, #26
 8005bb6:	bf08      	it	eq
 8005bb8:	1aed      	subeq	r5, r5, r3
 8005bba:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005bbe:	bf08      	it	eq
 8005bc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	bfc4      	itt	gt
 8005bc8:	1a9b      	subgt	r3, r3, r2
 8005bca:	18ed      	addgt	r5, r5, r3
 8005bcc:	42b5      	cmp	r5, r6
 8005bce:	d11a      	bne.n	8005c06 <_printf_common+0xd2>
 8005bd0:	2000      	movs	r0, #0
 8005bd2:	e008      	b.n	8005be6 <_printf_common+0xb2>
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	4652      	mov	r2, sl
 8005bd8:	4649      	mov	r1, r9
 8005bda:	4638      	mov	r0, r7
 8005bdc:	47c0      	blx	r8
 8005bde:	3001      	adds	r0, #1
 8005be0:	d103      	bne.n	8005bea <_printf_common+0xb6>
 8005be2:	f04f 30ff 	mov.w	r0, #4294967295
 8005be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bea:	3501      	adds	r5, #1
 8005bec:	e7c1      	b.n	8005b72 <_printf_common+0x3e>
 8005bee:	2030      	movs	r0, #48	; 0x30
 8005bf0:	18e1      	adds	r1, r4, r3
 8005bf2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005bf6:	1c5a      	adds	r2, r3, #1
 8005bf8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005bfc:	4422      	add	r2, r4
 8005bfe:	3302      	adds	r3, #2
 8005c00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c04:	e7c2      	b.n	8005b8c <_printf_common+0x58>
 8005c06:	2301      	movs	r3, #1
 8005c08:	4622      	mov	r2, r4
 8005c0a:	4649      	mov	r1, r9
 8005c0c:	4638      	mov	r0, r7
 8005c0e:	47c0      	blx	r8
 8005c10:	3001      	adds	r0, #1
 8005c12:	d0e6      	beq.n	8005be2 <_printf_common+0xae>
 8005c14:	3601      	adds	r6, #1
 8005c16:	e7d9      	b.n	8005bcc <_printf_common+0x98>

08005c18 <_printf_i>:
 8005c18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c1c:	7e0f      	ldrb	r7, [r1, #24]
 8005c1e:	4691      	mov	r9, r2
 8005c20:	2f78      	cmp	r7, #120	; 0x78
 8005c22:	4680      	mov	r8, r0
 8005c24:	460c      	mov	r4, r1
 8005c26:	469a      	mov	sl, r3
 8005c28:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005c2a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005c2e:	d807      	bhi.n	8005c40 <_printf_i+0x28>
 8005c30:	2f62      	cmp	r7, #98	; 0x62
 8005c32:	d80a      	bhi.n	8005c4a <_printf_i+0x32>
 8005c34:	2f00      	cmp	r7, #0
 8005c36:	f000 80d5 	beq.w	8005de4 <_printf_i+0x1cc>
 8005c3a:	2f58      	cmp	r7, #88	; 0x58
 8005c3c:	f000 80c1 	beq.w	8005dc2 <_printf_i+0x1aa>
 8005c40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c48:	e03a      	b.n	8005cc0 <_printf_i+0xa8>
 8005c4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c4e:	2b15      	cmp	r3, #21
 8005c50:	d8f6      	bhi.n	8005c40 <_printf_i+0x28>
 8005c52:	a101      	add	r1, pc, #4	; (adr r1, 8005c58 <_printf_i+0x40>)
 8005c54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c58:	08005cb1 	.word	0x08005cb1
 8005c5c:	08005cc5 	.word	0x08005cc5
 8005c60:	08005c41 	.word	0x08005c41
 8005c64:	08005c41 	.word	0x08005c41
 8005c68:	08005c41 	.word	0x08005c41
 8005c6c:	08005c41 	.word	0x08005c41
 8005c70:	08005cc5 	.word	0x08005cc5
 8005c74:	08005c41 	.word	0x08005c41
 8005c78:	08005c41 	.word	0x08005c41
 8005c7c:	08005c41 	.word	0x08005c41
 8005c80:	08005c41 	.word	0x08005c41
 8005c84:	08005dcb 	.word	0x08005dcb
 8005c88:	08005cf1 	.word	0x08005cf1
 8005c8c:	08005d85 	.word	0x08005d85
 8005c90:	08005c41 	.word	0x08005c41
 8005c94:	08005c41 	.word	0x08005c41
 8005c98:	08005ded 	.word	0x08005ded
 8005c9c:	08005c41 	.word	0x08005c41
 8005ca0:	08005cf1 	.word	0x08005cf1
 8005ca4:	08005c41 	.word	0x08005c41
 8005ca8:	08005c41 	.word	0x08005c41
 8005cac:	08005d8d 	.word	0x08005d8d
 8005cb0:	682b      	ldr	r3, [r5, #0]
 8005cb2:	1d1a      	adds	r2, r3, #4
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	602a      	str	r2, [r5, #0]
 8005cb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e0a0      	b.n	8005e06 <_printf_i+0x1ee>
 8005cc4:	6820      	ldr	r0, [r4, #0]
 8005cc6:	682b      	ldr	r3, [r5, #0]
 8005cc8:	0607      	lsls	r7, r0, #24
 8005cca:	f103 0104 	add.w	r1, r3, #4
 8005cce:	6029      	str	r1, [r5, #0]
 8005cd0:	d501      	bpl.n	8005cd6 <_printf_i+0xbe>
 8005cd2:	681e      	ldr	r6, [r3, #0]
 8005cd4:	e003      	b.n	8005cde <_printf_i+0xc6>
 8005cd6:	0646      	lsls	r6, r0, #25
 8005cd8:	d5fb      	bpl.n	8005cd2 <_printf_i+0xba>
 8005cda:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005cde:	2e00      	cmp	r6, #0
 8005ce0:	da03      	bge.n	8005cea <_printf_i+0xd2>
 8005ce2:	232d      	movs	r3, #45	; 0x2d
 8005ce4:	4276      	negs	r6, r6
 8005ce6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cea:	230a      	movs	r3, #10
 8005cec:	4859      	ldr	r0, [pc, #356]	; (8005e54 <_printf_i+0x23c>)
 8005cee:	e012      	b.n	8005d16 <_printf_i+0xfe>
 8005cf0:	682b      	ldr	r3, [r5, #0]
 8005cf2:	6820      	ldr	r0, [r4, #0]
 8005cf4:	1d19      	adds	r1, r3, #4
 8005cf6:	6029      	str	r1, [r5, #0]
 8005cf8:	0605      	lsls	r5, r0, #24
 8005cfa:	d501      	bpl.n	8005d00 <_printf_i+0xe8>
 8005cfc:	681e      	ldr	r6, [r3, #0]
 8005cfe:	e002      	b.n	8005d06 <_printf_i+0xee>
 8005d00:	0641      	lsls	r1, r0, #25
 8005d02:	d5fb      	bpl.n	8005cfc <_printf_i+0xe4>
 8005d04:	881e      	ldrh	r6, [r3, #0]
 8005d06:	2f6f      	cmp	r7, #111	; 0x6f
 8005d08:	bf0c      	ite	eq
 8005d0a:	2308      	moveq	r3, #8
 8005d0c:	230a      	movne	r3, #10
 8005d0e:	4851      	ldr	r0, [pc, #324]	; (8005e54 <_printf_i+0x23c>)
 8005d10:	2100      	movs	r1, #0
 8005d12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d16:	6865      	ldr	r5, [r4, #4]
 8005d18:	2d00      	cmp	r5, #0
 8005d1a:	bfa8      	it	ge
 8005d1c:	6821      	ldrge	r1, [r4, #0]
 8005d1e:	60a5      	str	r5, [r4, #8]
 8005d20:	bfa4      	itt	ge
 8005d22:	f021 0104 	bicge.w	r1, r1, #4
 8005d26:	6021      	strge	r1, [r4, #0]
 8005d28:	b90e      	cbnz	r6, 8005d2e <_printf_i+0x116>
 8005d2a:	2d00      	cmp	r5, #0
 8005d2c:	d04b      	beq.n	8005dc6 <_printf_i+0x1ae>
 8005d2e:	4615      	mov	r5, r2
 8005d30:	fbb6 f1f3 	udiv	r1, r6, r3
 8005d34:	fb03 6711 	mls	r7, r3, r1, r6
 8005d38:	5dc7      	ldrb	r7, [r0, r7]
 8005d3a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005d3e:	4637      	mov	r7, r6
 8005d40:	42bb      	cmp	r3, r7
 8005d42:	460e      	mov	r6, r1
 8005d44:	d9f4      	bls.n	8005d30 <_printf_i+0x118>
 8005d46:	2b08      	cmp	r3, #8
 8005d48:	d10b      	bne.n	8005d62 <_printf_i+0x14a>
 8005d4a:	6823      	ldr	r3, [r4, #0]
 8005d4c:	07de      	lsls	r6, r3, #31
 8005d4e:	d508      	bpl.n	8005d62 <_printf_i+0x14a>
 8005d50:	6923      	ldr	r3, [r4, #16]
 8005d52:	6861      	ldr	r1, [r4, #4]
 8005d54:	4299      	cmp	r1, r3
 8005d56:	bfde      	ittt	le
 8005d58:	2330      	movle	r3, #48	; 0x30
 8005d5a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d5e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005d62:	1b52      	subs	r2, r2, r5
 8005d64:	6122      	str	r2, [r4, #16]
 8005d66:	464b      	mov	r3, r9
 8005d68:	4621      	mov	r1, r4
 8005d6a:	4640      	mov	r0, r8
 8005d6c:	f8cd a000 	str.w	sl, [sp]
 8005d70:	aa03      	add	r2, sp, #12
 8005d72:	f7ff fedf 	bl	8005b34 <_printf_common>
 8005d76:	3001      	adds	r0, #1
 8005d78:	d14a      	bne.n	8005e10 <_printf_i+0x1f8>
 8005d7a:	f04f 30ff 	mov.w	r0, #4294967295
 8005d7e:	b004      	add	sp, #16
 8005d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d84:	6823      	ldr	r3, [r4, #0]
 8005d86:	f043 0320 	orr.w	r3, r3, #32
 8005d8a:	6023      	str	r3, [r4, #0]
 8005d8c:	2778      	movs	r7, #120	; 0x78
 8005d8e:	4832      	ldr	r0, [pc, #200]	; (8005e58 <_printf_i+0x240>)
 8005d90:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005d94:	6823      	ldr	r3, [r4, #0]
 8005d96:	6829      	ldr	r1, [r5, #0]
 8005d98:	061f      	lsls	r7, r3, #24
 8005d9a:	f851 6b04 	ldr.w	r6, [r1], #4
 8005d9e:	d402      	bmi.n	8005da6 <_printf_i+0x18e>
 8005da0:	065f      	lsls	r7, r3, #25
 8005da2:	bf48      	it	mi
 8005da4:	b2b6      	uxthmi	r6, r6
 8005da6:	07df      	lsls	r7, r3, #31
 8005da8:	bf48      	it	mi
 8005daa:	f043 0320 	orrmi.w	r3, r3, #32
 8005dae:	6029      	str	r1, [r5, #0]
 8005db0:	bf48      	it	mi
 8005db2:	6023      	strmi	r3, [r4, #0]
 8005db4:	b91e      	cbnz	r6, 8005dbe <_printf_i+0x1a6>
 8005db6:	6823      	ldr	r3, [r4, #0]
 8005db8:	f023 0320 	bic.w	r3, r3, #32
 8005dbc:	6023      	str	r3, [r4, #0]
 8005dbe:	2310      	movs	r3, #16
 8005dc0:	e7a6      	b.n	8005d10 <_printf_i+0xf8>
 8005dc2:	4824      	ldr	r0, [pc, #144]	; (8005e54 <_printf_i+0x23c>)
 8005dc4:	e7e4      	b.n	8005d90 <_printf_i+0x178>
 8005dc6:	4615      	mov	r5, r2
 8005dc8:	e7bd      	b.n	8005d46 <_printf_i+0x12e>
 8005dca:	682b      	ldr	r3, [r5, #0]
 8005dcc:	6826      	ldr	r6, [r4, #0]
 8005dce:	1d18      	adds	r0, r3, #4
 8005dd0:	6961      	ldr	r1, [r4, #20]
 8005dd2:	6028      	str	r0, [r5, #0]
 8005dd4:	0635      	lsls	r5, r6, #24
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	d501      	bpl.n	8005dde <_printf_i+0x1c6>
 8005dda:	6019      	str	r1, [r3, #0]
 8005ddc:	e002      	b.n	8005de4 <_printf_i+0x1cc>
 8005dde:	0670      	lsls	r0, r6, #25
 8005de0:	d5fb      	bpl.n	8005dda <_printf_i+0x1c2>
 8005de2:	8019      	strh	r1, [r3, #0]
 8005de4:	2300      	movs	r3, #0
 8005de6:	4615      	mov	r5, r2
 8005de8:	6123      	str	r3, [r4, #16]
 8005dea:	e7bc      	b.n	8005d66 <_printf_i+0x14e>
 8005dec:	682b      	ldr	r3, [r5, #0]
 8005dee:	2100      	movs	r1, #0
 8005df0:	1d1a      	adds	r2, r3, #4
 8005df2:	602a      	str	r2, [r5, #0]
 8005df4:	681d      	ldr	r5, [r3, #0]
 8005df6:	6862      	ldr	r2, [r4, #4]
 8005df8:	4628      	mov	r0, r5
 8005dfa:	f000 f999 	bl	8006130 <memchr>
 8005dfe:	b108      	cbz	r0, 8005e04 <_printf_i+0x1ec>
 8005e00:	1b40      	subs	r0, r0, r5
 8005e02:	6060      	str	r0, [r4, #4]
 8005e04:	6863      	ldr	r3, [r4, #4]
 8005e06:	6123      	str	r3, [r4, #16]
 8005e08:	2300      	movs	r3, #0
 8005e0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e0e:	e7aa      	b.n	8005d66 <_printf_i+0x14e>
 8005e10:	462a      	mov	r2, r5
 8005e12:	4649      	mov	r1, r9
 8005e14:	4640      	mov	r0, r8
 8005e16:	6923      	ldr	r3, [r4, #16]
 8005e18:	47d0      	blx	sl
 8005e1a:	3001      	adds	r0, #1
 8005e1c:	d0ad      	beq.n	8005d7a <_printf_i+0x162>
 8005e1e:	6823      	ldr	r3, [r4, #0]
 8005e20:	079b      	lsls	r3, r3, #30
 8005e22:	d413      	bmi.n	8005e4c <_printf_i+0x234>
 8005e24:	68e0      	ldr	r0, [r4, #12]
 8005e26:	9b03      	ldr	r3, [sp, #12]
 8005e28:	4298      	cmp	r0, r3
 8005e2a:	bfb8      	it	lt
 8005e2c:	4618      	movlt	r0, r3
 8005e2e:	e7a6      	b.n	8005d7e <_printf_i+0x166>
 8005e30:	2301      	movs	r3, #1
 8005e32:	4632      	mov	r2, r6
 8005e34:	4649      	mov	r1, r9
 8005e36:	4640      	mov	r0, r8
 8005e38:	47d0      	blx	sl
 8005e3a:	3001      	adds	r0, #1
 8005e3c:	d09d      	beq.n	8005d7a <_printf_i+0x162>
 8005e3e:	3501      	adds	r5, #1
 8005e40:	68e3      	ldr	r3, [r4, #12]
 8005e42:	9903      	ldr	r1, [sp, #12]
 8005e44:	1a5b      	subs	r3, r3, r1
 8005e46:	42ab      	cmp	r3, r5
 8005e48:	dcf2      	bgt.n	8005e30 <_printf_i+0x218>
 8005e4a:	e7eb      	b.n	8005e24 <_printf_i+0x20c>
 8005e4c:	2500      	movs	r5, #0
 8005e4e:	f104 0619 	add.w	r6, r4, #25
 8005e52:	e7f5      	b.n	8005e40 <_printf_i+0x228>
 8005e54:	08006387 	.word	0x08006387
 8005e58:	08006398 	.word	0x08006398

08005e5c <__sflush_r>:
 8005e5c:	898a      	ldrh	r2, [r1, #12]
 8005e5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e60:	4605      	mov	r5, r0
 8005e62:	0710      	lsls	r0, r2, #28
 8005e64:	460c      	mov	r4, r1
 8005e66:	d457      	bmi.n	8005f18 <__sflush_r+0xbc>
 8005e68:	684b      	ldr	r3, [r1, #4]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	dc04      	bgt.n	8005e78 <__sflush_r+0x1c>
 8005e6e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	dc01      	bgt.n	8005e78 <__sflush_r+0x1c>
 8005e74:	2000      	movs	r0, #0
 8005e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005e7a:	2e00      	cmp	r6, #0
 8005e7c:	d0fa      	beq.n	8005e74 <__sflush_r+0x18>
 8005e7e:	2300      	movs	r3, #0
 8005e80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005e84:	682f      	ldr	r7, [r5, #0]
 8005e86:	6a21      	ldr	r1, [r4, #32]
 8005e88:	602b      	str	r3, [r5, #0]
 8005e8a:	d032      	beq.n	8005ef2 <__sflush_r+0x96>
 8005e8c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005e8e:	89a3      	ldrh	r3, [r4, #12]
 8005e90:	075a      	lsls	r2, r3, #29
 8005e92:	d505      	bpl.n	8005ea0 <__sflush_r+0x44>
 8005e94:	6863      	ldr	r3, [r4, #4]
 8005e96:	1ac0      	subs	r0, r0, r3
 8005e98:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005e9a:	b10b      	cbz	r3, 8005ea0 <__sflush_r+0x44>
 8005e9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005e9e:	1ac0      	subs	r0, r0, r3
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ea6:	4628      	mov	r0, r5
 8005ea8:	6a21      	ldr	r1, [r4, #32]
 8005eaa:	47b0      	blx	r6
 8005eac:	1c43      	adds	r3, r0, #1
 8005eae:	89a3      	ldrh	r3, [r4, #12]
 8005eb0:	d106      	bne.n	8005ec0 <__sflush_r+0x64>
 8005eb2:	6829      	ldr	r1, [r5, #0]
 8005eb4:	291d      	cmp	r1, #29
 8005eb6:	d82b      	bhi.n	8005f10 <__sflush_r+0xb4>
 8005eb8:	4a28      	ldr	r2, [pc, #160]	; (8005f5c <__sflush_r+0x100>)
 8005eba:	410a      	asrs	r2, r1
 8005ebc:	07d6      	lsls	r6, r2, #31
 8005ebe:	d427      	bmi.n	8005f10 <__sflush_r+0xb4>
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	6062      	str	r2, [r4, #4]
 8005ec4:	6922      	ldr	r2, [r4, #16]
 8005ec6:	04d9      	lsls	r1, r3, #19
 8005ec8:	6022      	str	r2, [r4, #0]
 8005eca:	d504      	bpl.n	8005ed6 <__sflush_r+0x7a>
 8005ecc:	1c42      	adds	r2, r0, #1
 8005ece:	d101      	bne.n	8005ed4 <__sflush_r+0x78>
 8005ed0:	682b      	ldr	r3, [r5, #0]
 8005ed2:	b903      	cbnz	r3, 8005ed6 <__sflush_r+0x7a>
 8005ed4:	6560      	str	r0, [r4, #84]	; 0x54
 8005ed6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ed8:	602f      	str	r7, [r5, #0]
 8005eda:	2900      	cmp	r1, #0
 8005edc:	d0ca      	beq.n	8005e74 <__sflush_r+0x18>
 8005ede:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ee2:	4299      	cmp	r1, r3
 8005ee4:	d002      	beq.n	8005eec <__sflush_r+0x90>
 8005ee6:	4628      	mov	r0, r5
 8005ee8:	f7ff fa96 	bl	8005418 <_free_r>
 8005eec:	2000      	movs	r0, #0
 8005eee:	6360      	str	r0, [r4, #52]	; 0x34
 8005ef0:	e7c1      	b.n	8005e76 <__sflush_r+0x1a>
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	4628      	mov	r0, r5
 8005ef6:	47b0      	blx	r6
 8005ef8:	1c41      	adds	r1, r0, #1
 8005efa:	d1c8      	bne.n	8005e8e <__sflush_r+0x32>
 8005efc:	682b      	ldr	r3, [r5, #0]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d0c5      	beq.n	8005e8e <__sflush_r+0x32>
 8005f02:	2b1d      	cmp	r3, #29
 8005f04:	d001      	beq.n	8005f0a <__sflush_r+0xae>
 8005f06:	2b16      	cmp	r3, #22
 8005f08:	d101      	bne.n	8005f0e <__sflush_r+0xb2>
 8005f0a:	602f      	str	r7, [r5, #0]
 8005f0c:	e7b2      	b.n	8005e74 <__sflush_r+0x18>
 8005f0e:	89a3      	ldrh	r3, [r4, #12]
 8005f10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f14:	81a3      	strh	r3, [r4, #12]
 8005f16:	e7ae      	b.n	8005e76 <__sflush_r+0x1a>
 8005f18:	690f      	ldr	r7, [r1, #16]
 8005f1a:	2f00      	cmp	r7, #0
 8005f1c:	d0aa      	beq.n	8005e74 <__sflush_r+0x18>
 8005f1e:	0793      	lsls	r3, r2, #30
 8005f20:	bf18      	it	ne
 8005f22:	2300      	movne	r3, #0
 8005f24:	680e      	ldr	r6, [r1, #0]
 8005f26:	bf08      	it	eq
 8005f28:	694b      	ldreq	r3, [r1, #20]
 8005f2a:	1bf6      	subs	r6, r6, r7
 8005f2c:	600f      	str	r7, [r1, #0]
 8005f2e:	608b      	str	r3, [r1, #8]
 8005f30:	2e00      	cmp	r6, #0
 8005f32:	dd9f      	ble.n	8005e74 <__sflush_r+0x18>
 8005f34:	4633      	mov	r3, r6
 8005f36:	463a      	mov	r2, r7
 8005f38:	4628      	mov	r0, r5
 8005f3a:	6a21      	ldr	r1, [r4, #32]
 8005f3c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005f40:	47e0      	blx	ip
 8005f42:	2800      	cmp	r0, #0
 8005f44:	dc06      	bgt.n	8005f54 <__sflush_r+0xf8>
 8005f46:	89a3      	ldrh	r3, [r4, #12]
 8005f48:	f04f 30ff 	mov.w	r0, #4294967295
 8005f4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f50:	81a3      	strh	r3, [r4, #12]
 8005f52:	e790      	b.n	8005e76 <__sflush_r+0x1a>
 8005f54:	4407      	add	r7, r0
 8005f56:	1a36      	subs	r6, r6, r0
 8005f58:	e7ea      	b.n	8005f30 <__sflush_r+0xd4>
 8005f5a:	bf00      	nop
 8005f5c:	dfbffffe 	.word	0xdfbffffe

08005f60 <_fflush_r>:
 8005f60:	b538      	push	{r3, r4, r5, lr}
 8005f62:	690b      	ldr	r3, [r1, #16]
 8005f64:	4605      	mov	r5, r0
 8005f66:	460c      	mov	r4, r1
 8005f68:	b913      	cbnz	r3, 8005f70 <_fflush_r+0x10>
 8005f6a:	2500      	movs	r5, #0
 8005f6c:	4628      	mov	r0, r5
 8005f6e:	bd38      	pop	{r3, r4, r5, pc}
 8005f70:	b118      	cbz	r0, 8005f7a <_fflush_r+0x1a>
 8005f72:	6a03      	ldr	r3, [r0, #32]
 8005f74:	b90b      	cbnz	r3, 8005f7a <_fflush_r+0x1a>
 8005f76:	f7ff f927 	bl	80051c8 <__sinit>
 8005f7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d0f3      	beq.n	8005f6a <_fflush_r+0xa>
 8005f82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005f84:	07d0      	lsls	r0, r2, #31
 8005f86:	d404      	bmi.n	8005f92 <_fflush_r+0x32>
 8005f88:	0599      	lsls	r1, r3, #22
 8005f8a:	d402      	bmi.n	8005f92 <_fflush_r+0x32>
 8005f8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f8e:	f7ff fa40 	bl	8005412 <__retarget_lock_acquire_recursive>
 8005f92:	4628      	mov	r0, r5
 8005f94:	4621      	mov	r1, r4
 8005f96:	f7ff ff61 	bl	8005e5c <__sflush_r>
 8005f9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f9c:	4605      	mov	r5, r0
 8005f9e:	07da      	lsls	r2, r3, #31
 8005fa0:	d4e4      	bmi.n	8005f6c <_fflush_r+0xc>
 8005fa2:	89a3      	ldrh	r3, [r4, #12]
 8005fa4:	059b      	lsls	r3, r3, #22
 8005fa6:	d4e1      	bmi.n	8005f6c <_fflush_r+0xc>
 8005fa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005faa:	f7ff fa33 	bl	8005414 <__retarget_lock_release_recursive>
 8005fae:	e7dd      	b.n	8005f6c <_fflush_r+0xc>

08005fb0 <__swbuf_r>:
 8005fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fb2:	460e      	mov	r6, r1
 8005fb4:	4614      	mov	r4, r2
 8005fb6:	4605      	mov	r5, r0
 8005fb8:	b118      	cbz	r0, 8005fc2 <__swbuf_r+0x12>
 8005fba:	6a03      	ldr	r3, [r0, #32]
 8005fbc:	b90b      	cbnz	r3, 8005fc2 <__swbuf_r+0x12>
 8005fbe:	f7ff f903 	bl	80051c8 <__sinit>
 8005fc2:	69a3      	ldr	r3, [r4, #24]
 8005fc4:	60a3      	str	r3, [r4, #8]
 8005fc6:	89a3      	ldrh	r3, [r4, #12]
 8005fc8:	071a      	lsls	r2, r3, #28
 8005fca:	d525      	bpl.n	8006018 <__swbuf_r+0x68>
 8005fcc:	6923      	ldr	r3, [r4, #16]
 8005fce:	b31b      	cbz	r3, 8006018 <__swbuf_r+0x68>
 8005fd0:	6823      	ldr	r3, [r4, #0]
 8005fd2:	6922      	ldr	r2, [r4, #16]
 8005fd4:	b2f6      	uxtb	r6, r6
 8005fd6:	1a98      	subs	r0, r3, r2
 8005fd8:	6963      	ldr	r3, [r4, #20]
 8005fda:	4637      	mov	r7, r6
 8005fdc:	4283      	cmp	r3, r0
 8005fde:	dc04      	bgt.n	8005fea <__swbuf_r+0x3a>
 8005fe0:	4621      	mov	r1, r4
 8005fe2:	4628      	mov	r0, r5
 8005fe4:	f7ff ffbc 	bl	8005f60 <_fflush_r>
 8005fe8:	b9e0      	cbnz	r0, 8006024 <__swbuf_r+0x74>
 8005fea:	68a3      	ldr	r3, [r4, #8]
 8005fec:	3b01      	subs	r3, #1
 8005fee:	60a3      	str	r3, [r4, #8]
 8005ff0:	6823      	ldr	r3, [r4, #0]
 8005ff2:	1c5a      	adds	r2, r3, #1
 8005ff4:	6022      	str	r2, [r4, #0]
 8005ff6:	701e      	strb	r6, [r3, #0]
 8005ff8:	6962      	ldr	r2, [r4, #20]
 8005ffa:	1c43      	adds	r3, r0, #1
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d004      	beq.n	800600a <__swbuf_r+0x5a>
 8006000:	89a3      	ldrh	r3, [r4, #12]
 8006002:	07db      	lsls	r3, r3, #31
 8006004:	d506      	bpl.n	8006014 <__swbuf_r+0x64>
 8006006:	2e0a      	cmp	r6, #10
 8006008:	d104      	bne.n	8006014 <__swbuf_r+0x64>
 800600a:	4621      	mov	r1, r4
 800600c:	4628      	mov	r0, r5
 800600e:	f7ff ffa7 	bl	8005f60 <_fflush_r>
 8006012:	b938      	cbnz	r0, 8006024 <__swbuf_r+0x74>
 8006014:	4638      	mov	r0, r7
 8006016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006018:	4621      	mov	r1, r4
 800601a:	4628      	mov	r0, r5
 800601c:	f000 f806 	bl	800602c <__swsetup_r>
 8006020:	2800      	cmp	r0, #0
 8006022:	d0d5      	beq.n	8005fd0 <__swbuf_r+0x20>
 8006024:	f04f 37ff 	mov.w	r7, #4294967295
 8006028:	e7f4      	b.n	8006014 <__swbuf_r+0x64>
	...

0800602c <__swsetup_r>:
 800602c:	b538      	push	{r3, r4, r5, lr}
 800602e:	4b2a      	ldr	r3, [pc, #168]	; (80060d8 <__swsetup_r+0xac>)
 8006030:	4605      	mov	r5, r0
 8006032:	6818      	ldr	r0, [r3, #0]
 8006034:	460c      	mov	r4, r1
 8006036:	b118      	cbz	r0, 8006040 <__swsetup_r+0x14>
 8006038:	6a03      	ldr	r3, [r0, #32]
 800603a:	b90b      	cbnz	r3, 8006040 <__swsetup_r+0x14>
 800603c:	f7ff f8c4 	bl	80051c8 <__sinit>
 8006040:	89a3      	ldrh	r3, [r4, #12]
 8006042:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006046:	0718      	lsls	r0, r3, #28
 8006048:	d422      	bmi.n	8006090 <__swsetup_r+0x64>
 800604a:	06d9      	lsls	r1, r3, #27
 800604c:	d407      	bmi.n	800605e <__swsetup_r+0x32>
 800604e:	2309      	movs	r3, #9
 8006050:	602b      	str	r3, [r5, #0]
 8006052:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006056:	f04f 30ff 	mov.w	r0, #4294967295
 800605a:	81a3      	strh	r3, [r4, #12]
 800605c:	e034      	b.n	80060c8 <__swsetup_r+0x9c>
 800605e:	0758      	lsls	r0, r3, #29
 8006060:	d512      	bpl.n	8006088 <__swsetup_r+0x5c>
 8006062:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006064:	b141      	cbz	r1, 8006078 <__swsetup_r+0x4c>
 8006066:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800606a:	4299      	cmp	r1, r3
 800606c:	d002      	beq.n	8006074 <__swsetup_r+0x48>
 800606e:	4628      	mov	r0, r5
 8006070:	f7ff f9d2 	bl	8005418 <_free_r>
 8006074:	2300      	movs	r3, #0
 8006076:	6363      	str	r3, [r4, #52]	; 0x34
 8006078:	89a3      	ldrh	r3, [r4, #12]
 800607a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800607e:	81a3      	strh	r3, [r4, #12]
 8006080:	2300      	movs	r3, #0
 8006082:	6063      	str	r3, [r4, #4]
 8006084:	6923      	ldr	r3, [r4, #16]
 8006086:	6023      	str	r3, [r4, #0]
 8006088:	89a3      	ldrh	r3, [r4, #12]
 800608a:	f043 0308 	orr.w	r3, r3, #8
 800608e:	81a3      	strh	r3, [r4, #12]
 8006090:	6923      	ldr	r3, [r4, #16]
 8006092:	b94b      	cbnz	r3, 80060a8 <__swsetup_r+0x7c>
 8006094:	89a3      	ldrh	r3, [r4, #12]
 8006096:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800609a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800609e:	d003      	beq.n	80060a8 <__swsetup_r+0x7c>
 80060a0:	4621      	mov	r1, r4
 80060a2:	4628      	mov	r0, r5
 80060a4:	f000 f8b4 	bl	8006210 <__smakebuf_r>
 80060a8:	89a0      	ldrh	r0, [r4, #12]
 80060aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80060ae:	f010 0301 	ands.w	r3, r0, #1
 80060b2:	d00a      	beq.n	80060ca <__swsetup_r+0x9e>
 80060b4:	2300      	movs	r3, #0
 80060b6:	60a3      	str	r3, [r4, #8]
 80060b8:	6963      	ldr	r3, [r4, #20]
 80060ba:	425b      	negs	r3, r3
 80060bc:	61a3      	str	r3, [r4, #24]
 80060be:	6923      	ldr	r3, [r4, #16]
 80060c0:	b943      	cbnz	r3, 80060d4 <__swsetup_r+0xa8>
 80060c2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80060c6:	d1c4      	bne.n	8006052 <__swsetup_r+0x26>
 80060c8:	bd38      	pop	{r3, r4, r5, pc}
 80060ca:	0781      	lsls	r1, r0, #30
 80060cc:	bf58      	it	pl
 80060ce:	6963      	ldrpl	r3, [r4, #20]
 80060d0:	60a3      	str	r3, [r4, #8]
 80060d2:	e7f4      	b.n	80060be <__swsetup_r+0x92>
 80060d4:	2000      	movs	r0, #0
 80060d6:	e7f7      	b.n	80060c8 <__swsetup_r+0x9c>
 80060d8:	20000068 	.word	0x20000068

080060dc <memmove>:
 80060dc:	4288      	cmp	r0, r1
 80060de:	b510      	push	{r4, lr}
 80060e0:	eb01 0402 	add.w	r4, r1, r2
 80060e4:	d902      	bls.n	80060ec <memmove+0x10>
 80060e6:	4284      	cmp	r4, r0
 80060e8:	4623      	mov	r3, r4
 80060ea:	d807      	bhi.n	80060fc <memmove+0x20>
 80060ec:	1e43      	subs	r3, r0, #1
 80060ee:	42a1      	cmp	r1, r4
 80060f0:	d008      	beq.n	8006104 <memmove+0x28>
 80060f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80060f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80060fa:	e7f8      	b.n	80060ee <memmove+0x12>
 80060fc:	4601      	mov	r1, r0
 80060fe:	4402      	add	r2, r0
 8006100:	428a      	cmp	r2, r1
 8006102:	d100      	bne.n	8006106 <memmove+0x2a>
 8006104:	bd10      	pop	{r4, pc}
 8006106:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800610a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800610e:	e7f7      	b.n	8006100 <memmove+0x24>

08006110 <_sbrk_r>:
 8006110:	b538      	push	{r3, r4, r5, lr}
 8006112:	2300      	movs	r3, #0
 8006114:	4d05      	ldr	r5, [pc, #20]	; (800612c <_sbrk_r+0x1c>)
 8006116:	4604      	mov	r4, r0
 8006118:	4608      	mov	r0, r1
 800611a:	602b      	str	r3, [r5, #0]
 800611c:	f7fb fbcc 	bl	80018b8 <_sbrk>
 8006120:	1c43      	adds	r3, r0, #1
 8006122:	d102      	bne.n	800612a <_sbrk_r+0x1a>
 8006124:	682b      	ldr	r3, [r5, #0]
 8006126:	b103      	cbz	r3, 800612a <_sbrk_r+0x1a>
 8006128:	6023      	str	r3, [r4, #0]
 800612a:	bd38      	pop	{r3, r4, r5, pc}
 800612c:	20000498 	.word	0x20000498

08006130 <memchr>:
 8006130:	4603      	mov	r3, r0
 8006132:	b510      	push	{r4, lr}
 8006134:	b2c9      	uxtb	r1, r1
 8006136:	4402      	add	r2, r0
 8006138:	4293      	cmp	r3, r2
 800613a:	4618      	mov	r0, r3
 800613c:	d101      	bne.n	8006142 <memchr+0x12>
 800613e:	2000      	movs	r0, #0
 8006140:	e003      	b.n	800614a <memchr+0x1a>
 8006142:	7804      	ldrb	r4, [r0, #0]
 8006144:	3301      	adds	r3, #1
 8006146:	428c      	cmp	r4, r1
 8006148:	d1f6      	bne.n	8006138 <memchr+0x8>
 800614a:	bd10      	pop	{r4, pc}

0800614c <memcpy>:
 800614c:	440a      	add	r2, r1
 800614e:	4291      	cmp	r1, r2
 8006150:	f100 33ff 	add.w	r3, r0, #4294967295
 8006154:	d100      	bne.n	8006158 <memcpy+0xc>
 8006156:	4770      	bx	lr
 8006158:	b510      	push	{r4, lr}
 800615a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800615e:	4291      	cmp	r1, r2
 8006160:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006164:	d1f9      	bne.n	800615a <memcpy+0xe>
 8006166:	bd10      	pop	{r4, pc}

08006168 <_realloc_r>:
 8006168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800616c:	4680      	mov	r8, r0
 800616e:	4614      	mov	r4, r2
 8006170:	460e      	mov	r6, r1
 8006172:	b921      	cbnz	r1, 800617e <_realloc_r+0x16>
 8006174:	4611      	mov	r1, r2
 8006176:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800617a:	f7ff b9b5 	b.w	80054e8 <_malloc_r>
 800617e:	b92a      	cbnz	r2, 800618c <_realloc_r+0x24>
 8006180:	f7ff f94a 	bl	8005418 <_free_r>
 8006184:	4625      	mov	r5, r4
 8006186:	4628      	mov	r0, r5
 8006188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800618c:	f000 f89e 	bl	80062cc <_malloc_usable_size_r>
 8006190:	4284      	cmp	r4, r0
 8006192:	4607      	mov	r7, r0
 8006194:	d802      	bhi.n	800619c <_realloc_r+0x34>
 8006196:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800619a:	d812      	bhi.n	80061c2 <_realloc_r+0x5a>
 800619c:	4621      	mov	r1, r4
 800619e:	4640      	mov	r0, r8
 80061a0:	f7ff f9a2 	bl	80054e8 <_malloc_r>
 80061a4:	4605      	mov	r5, r0
 80061a6:	2800      	cmp	r0, #0
 80061a8:	d0ed      	beq.n	8006186 <_realloc_r+0x1e>
 80061aa:	42bc      	cmp	r4, r7
 80061ac:	4622      	mov	r2, r4
 80061ae:	4631      	mov	r1, r6
 80061b0:	bf28      	it	cs
 80061b2:	463a      	movcs	r2, r7
 80061b4:	f7ff ffca 	bl	800614c <memcpy>
 80061b8:	4631      	mov	r1, r6
 80061ba:	4640      	mov	r0, r8
 80061bc:	f7ff f92c 	bl	8005418 <_free_r>
 80061c0:	e7e1      	b.n	8006186 <_realloc_r+0x1e>
 80061c2:	4635      	mov	r5, r6
 80061c4:	e7df      	b.n	8006186 <_realloc_r+0x1e>

080061c6 <__swhatbuf_r>:
 80061c6:	b570      	push	{r4, r5, r6, lr}
 80061c8:	460c      	mov	r4, r1
 80061ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061ce:	4615      	mov	r5, r2
 80061d0:	2900      	cmp	r1, #0
 80061d2:	461e      	mov	r6, r3
 80061d4:	b096      	sub	sp, #88	; 0x58
 80061d6:	da0c      	bge.n	80061f2 <__swhatbuf_r+0x2c>
 80061d8:	89a3      	ldrh	r3, [r4, #12]
 80061da:	2100      	movs	r1, #0
 80061dc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80061e0:	bf0c      	ite	eq
 80061e2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80061e6:	2340      	movne	r3, #64	; 0x40
 80061e8:	2000      	movs	r0, #0
 80061ea:	6031      	str	r1, [r6, #0]
 80061ec:	602b      	str	r3, [r5, #0]
 80061ee:	b016      	add	sp, #88	; 0x58
 80061f0:	bd70      	pop	{r4, r5, r6, pc}
 80061f2:	466a      	mov	r2, sp
 80061f4:	f000 f848 	bl	8006288 <_fstat_r>
 80061f8:	2800      	cmp	r0, #0
 80061fa:	dbed      	blt.n	80061d8 <__swhatbuf_r+0x12>
 80061fc:	9901      	ldr	r1, [sp, #4]
 80061fe:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006202:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006206:	4259      	negs	r1, r3
 8006208:	4159      	adcs	r1, r3
 800620a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800620e:	e7eb      	b.n	80061e8 <__swhatbuf_r+0x22>

08006210 <__smakebuf_r>:
 8006210:	898b      	ldrh	r3, [r1, #12]
 8006212:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006214:	079d      	lsls	r5, r3, #30
 8006216:	4606      	mov	r6, r0
 8006218:	460c      	mov	r4, r1
 800621a:	d507      	bpl.n	800622c <__smakebuf_r+0x1c>
 800621c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006220:	6023      	str	r3, [r4, #0]
 8006222:	6123      	str	r3, [r4, #16]
 8006224:	2301      	movs	r3, #1
 8006226:	6163      	str	r3, [r4, #20]
 8006228:	b002      	add	sp, #8
 800622a:	bd70      	pop	{r4, r5, r6, pc}
 800622c:	466a      	mov	r2, sp
 800622e:	ab01      	add	r3, sp, #4
 8006230:	f7ff ffc9 	bl	80061c6 <__swhatbuf_r>
 8006234:	9900      	ldr	r1, [sp, #0]
 8006236:	4605      	mov	r5, r0
 8006238:	4630      	mov	r0, r6
 800623a:	f7ff f955 	bl	80054e8 <_malloc_r>
 800623e:	b948      	cbnz	r0, 8006254 <__smakebuf_r+0x44>
 8006240:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006244:	059a      	lsls	r2, r3, #22
 8006246:	d4ef      	bmi.n	8006228 <__smakebuf_r+0x18>
 8006248:	f023 0303 	bic.w	r3, r3, #3
 800624c:	f043 0302 	orr.w	r3, r3, #2
 8006250:	81a3      	strh	r3, [r4, #12]
 8006252:	e7e3      	b.n	800621c <__smakebuf_r+0xc>
 8006254:	89a3      	ldrh	r3, [r4, #12]
 8006256:	6020      	str	r0, [r4, #0]
 8006258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800625c:	81a3      	strh	r3, [r4, #12]
 800625e:	9b00      	ldr	r3, [sp, #0]
 8006260:	6120      	str	r0, [r4, #16]
 8006262:	6163      	str	r3, [r4, #20]
 8006264:	9b01      	ldr	r3, [sp, #4]
 8006266:	b15b      	cbz	r3, 8006280 <__smakebuf_r+0x70>
 8006268:	4630      	mov	r0, r6
 800626a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800626e:	f000 f81d 	bl	80062ac <_isatty_r>
 8006272:	b128      	cbz	r0, 8006280 <__smakebuf_r+0x70>
 8006274:	89a3      	ldrh	r3, [r4, #12]
 8006276:	f023 0303 	bic.w	r3, r3, #3
 800627a:	f043 0301 	orr.w	r3, r3, #1
 800627e:	81a3      	strh	r3, [r4, #12]
 8006280:	89a3      	ldrh	r3, [r4, #12]
 8006282:	431d      	orrs	r5, r3
 8006284:	81a5      	strh	r5, [r4, #12]
 8006286:	e7cf      	b.n	8006228 <__smakebuf_r+0x18>

08006288 <_fstat_r>:
 8006288:	b538      	push	{r3, r4, r5, lr}
 800628a:	2300      	movs	r3, #0
 800628c:	4d06      	ldr	r5, [pc, #24]	; (80062a8 <_fstat_r+0x20>)
 800628e:	4604      	mov	r4, r0
 8006290:	4608      	mov	r0, r1
 8006292:	4611      	mov	r1, r2
 8006294:	602b      	str	r3, [r5, #0]
 8006296:	f7fb fae9 	bl	800186c <_fstat>
 800629a:	1c43      	adds	r3, r0, #1
 800629c:	d102      	bne.n	80062a4 <_fstat_r+0x1c>
 800629e:	682b      	ldr	r3, [r5, #0]
 80062a0:	b103      	cbz	r3, 80062a4 <_fstat_r+0x1c>
 80062a2:	6023      	str	r3, [r4, #0]
 80062a4:	bd38      	pop	{r3, r4, r5, pc}
 80062a6:	bf00      	nop
 80062a8:	20000498 	.word	0x20000498

080062ac <_isatty_r>:
 80062ac:	b538      	push	{r3, r4, r5, lr}
 80062ae:	2300      	movs	r3, #0
 80062b0:	4d05      	ldr	r5, [pc, #20]	; (80062c8 <_isatty_r+0x1c>)
 80062b2:	4604      	mov	r4, r0
 80062b4:	4608      	mov	r0, r1
 80062b6:	602b      	str	r3, [r5, #0]
 80062b8:	f7fb fae7 	bl	800188a <_isatty>
 80062bc:	1c43      	adds	r3, r0, #1
 80062be:	d102      	bne.n	80062c6 <_isatty_r+0x1a>
 80062c0:	682b      	ldr	r3, [r5, #0]
 80062c2:	b103      	cbz	r3, 80062c6 <_isatty_r+0x1a>
 80062c4:	6023      	str	r3, [r4, #0]
 80062c6:	bd38      	pop	{r3, r4, r5, pc}
 80062c8:	20000498 	.word	0x20000498

080062cc <_malloc_usable_size_r>:
 80062cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062d0:	1f18      	subs	r0, r3, #4
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	bfbc      	itt	lt
 80062d6:	580b      	ldrlt	r3, [r1, r0]
 80062d8:	18c0      	addlt	r0, r0, r3
 80062da:	4770      	bx	lr

080062dc <_init>:
 80062dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062de:	bf00      	nop
 80062e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062e2:	bc08      	pop	{r3}
 80062e4:	469e      	mov	lr, r3
 80062e6:	4770      	bx	lr

080062e8 <_fini>:
 80062e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ea:	bf00      	nop
 80062ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062ee:	bc08      	pop	{r3}
 80062f0:	469e      	mov	lr, r3
 80062f2:	4770      	bx	lr
